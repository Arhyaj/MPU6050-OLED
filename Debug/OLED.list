
OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010518  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  080106b8  080106b8  000206b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011294  08011294  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08011294  08011294  00021294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801129c  0801129c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0801129c  0801129c  0002129c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080112a8  080112a8  000212a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080112b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005134  200001ec  080114a0  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005320  080114a0  00035320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006fc02  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007cdb  00000000  00000000  0009fe1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004870  00000000  00000000  000a7b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004558  00000000  00000000  000ac370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205b2  00000000  00000000  000b08c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000331ce  00000000  00000000  000d0e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc7b4  00000000  00000000  00104048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c07fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015390  00000000  00000000  001c084c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080106a0 	.word	0x080106a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080106a0 	.word	0x080106a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <_ZNK6String5isSSOEv>:
        union {
            struct _ptr ptr;
            struct _sso sso;
        };
        // Accessor functions
        inline bool isSSO() const { return sso.isSSO; }
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7adb      	ldrb	r3, [r3, #11]
 8001014:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	bf14      	ite	ne
 800101e:	2301      	movne	r3, #1
 8001020:	2300      	moveq	r3, #0
 8001022:	b2db      	uxtb	r3, r3
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_ZNK6String3lenEv>:
        inline unsigned int len() const { return isSSO() ? sso.len : ptr.len; }
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffe5 	bl	8001008 <_ZNK6String5isSSOEv>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <_ZNK6String3lenEv+0x20>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7adb      	ldrb	r3, [r3, #11]
 8001048:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800104c:	b2db      	uxtb	r3, r3
 800104e:	e001      	b.n	8001054 <_ZNK6String3lenEv+0x24>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	88db      	ldrh	r3, [r3, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZNK6String6bufferEv>:
            }
        }
        inline void setCapacity(int cap) { if (!isSSO()) ptr.cap = cap; }
        inline void setBuffer(char *buff) { if (!isSSO()) ptr.buff = buff; }
        // Buffer accessor functions
        inline const char *buffer() const { return (const char *)(isSSO() ? sso.buff : ptr.buff); }
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ffcf 	bl	8001008 <_ZNK6String5isSSOEv>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <_ZNK6String6bufferEv+0x18>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e001      	b.n	8001078 <_ZNK6String6bufferEv+0x1c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZN5Print17availableForWriteEv>:
    size_t printf(const char * format, ...)  __attribute__ ((format (printf, 2, 3)));

    // add availableForWrite to make compatible with Arduino Print.h
    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	2300      	movs	r3, #0
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
    size_t n = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
    while(size--) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	bf14      	ite	ne
 80010b0:	2301      	movne	r3, #1
 80010b2:	2300      	moveq	r3, #0
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00f      	beq.n	80010da <_ZN5Print5writeEPKhj+0x44>
        n += write(*buffer++);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	3308      	adds	r3, #8
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1c59      	adds	r1, r3, #1
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	4790      	blx	r2
 80010d0:	4602      	mov	r2, r0
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4413      	add	r3, r2
 80010d6:	617b      	str	r3, [r7, #20]
    while(size--) {
 80010d8:	e7e5      	b.n	80010a6 <_ZN5Print5writeEPKhj+0x10>
    }
    return n;
 80010da:	697b      	ldr	r3, [r7, #20]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN5Print6printfEPKcz>:

size_t Print::printf(const char *format, ...)
{
 80010e4:	b40e      	push	{r1, r2, r3}
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b097      	sub	sp, #92	; 0x5c
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    char loc_buf[64];
    char * temp = loc_buf;
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54
    va_list arg;
    va_list copy;
    va_start(arg, format);
 80010f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010f8:	60fb      	str	r3, [r7, #12]
    va_copy(copy, arg);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
    int len = vsnprintf(temp, sizeof(loc_buf), format, copy);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001106:	f00c fe57 	bl	800ddb8 <vsniprintf>
 800110a:	6538      	str	r0, [r7, #80]	; 0x50
    va_end(copy);
    if(len < 0) {
 800110c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800110e:	2b00      	cmp	r3, #0
 8001110:	da01      	bge.n	8001116 <_ZN5Print6printfEPKcz+0x32>
        va_end(arg);
        return 0;
 8001112:	2300      	movs	r3, #0
 8001114:	e02a      	b.n	800116c <_ZN5Print6printfEPKcz+0x88>
    };
    if(len >= sizeof(loc_buf)){
 8001116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001118:	2b3f      	cmp	r3, #63	; 0x3f
 800111a:	d914      	bls.n	8001146 <_ZN5Print6printfEPKcz+0x62>
        temp = (char*) malloc(len+1);
 800111c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800111e:	3301      	adds	r3, #1
 8001120:	4618      	mov	r0, r3
 8001122:	f00a fe93 	bl	800be4c <malloc>
 8001126:	4603      	mov	r3, r0
 8001128:	657b      	str	r3, [r7, #84]	; 0x54
        if(temp == NULL) {
 800112a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <_ZN5Print6printfEPKcz+0x50>
            va_end(arg);
            return 0;
 8001130:	2300      	movs	r3, #0
 8001132:	e01b      	b.n	800116c <_ZN5Print6printfEPKcz+0x88>
        }
        len = vsnprintf(temp, len+1, format, arg);
 8001134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001136:	3301      	adds	r3, #1
 8001138:	4619      	mov	r1, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800113e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001140:	f00c fe3a 	bl	800ddb8 <vsniprintf>
 8001144:	6538      	str	r0, [r7, #80]	; 0x50
    }
    va_end(arg);
    len = write((uint8_t*)temp, len);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	330c      	adds	r3, #12
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
 8001156:	4603      	mov	r3, r0
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
    if(temp != loc_buf){
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001160:	429a      	cmp	r2, r3
 8001162:	d002      	beq.n	800116a <_ZN5Print6printfEPKcz+0x86>
        free(temp);
 8001164:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001166:	f00a fe79 	bl	800be5c <free>
    }
    return len;
 800116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800116c:	4618      	mov	r0, r3
 800116e:	375c      	adds	r7, #92	; 0x5c
 8001170:	46bd      	mov	sp, r7
 8001172:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001176:	b003      	add	sp, #12
 8001178:	4770      	bx	lr
	...

0800117c <_ZN5PrintD1Ev>:
public:
    Print() :
        write_error(0)
    {
    }
    virtual ~Print() {}
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <_ZN5PrintD1Ev+0x1c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	080107c8 	.word	0x080107c8

0800119c <_ZN5PrintD0Ev>:
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffe9 	bl	800117c <_ZN5PrintD1Ev>
 80011aa:	2108      	movs	r1, #8
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f009 fc1f 	bl	800a9f0 <_ZdlPvj>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZNK6String8capacityEv>:
        inline unsigned int capacity() const { return isSSO() ? (unsigned int)SSOSIZE - 1 : ptr.cap; } // Size of max string not including terminal NUL
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff1f 	bl	8001008 <_ZNK6String5isSSOEv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <_ZNK6String8capacityEv+0x18>
 80011d0:	230a      	movs	r3, #10
 80011d2:	e001      	b.n	80011d8 <_ZNK6String8capacityEv+0x1c>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	889b      	ldrh	r3, [r3, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZN6String6setSSOEb>:
        inline void setSSO(bool set) { sso.isSSO = set; }
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	7ad3      	ldrb	r3, [r2, #11]
 80011f0:	78f9      	ldrb	r1, [r7, #3]
 80011f2:	f361 13c7 	bfi	r3, r1, #7, #1
 80011f6:	72d3      	strb	r3, [r2, #11]
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_ZN6String6setLenEi>:
        inline void setLen(int len) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
            if (isSSO()) {
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fefa 	bl	8001008 <_ZNK6String5isSSOEv>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d00e      	beq.n	8001238 <_ZN6String6setLenEi+0x34>
                sso.len = len;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001220:	b2d9      	uxtb	r1, r3
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	7ad3      	ldrb	r3, [r2, #11]
 8001226:	f361 0306 	bfi	r3, r1, #0, #7
 800122a:	72d3      	strb	r3, [r2, #11]
                sso.buff[len] = 0;
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
        }
 8001236:	e00d      	b.n	8001254 <_ZN6String6setLenEi+0x50>
                ptr.len = len;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b29a      	uxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	80da      	strh	r2, [r3, #6]
                if (ptr.buff) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <_ZN6String6setLenEi+0x50>
                    ptr.buff[len] = 0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
        }
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN6String11setCapacityEi>:
        inline void setCapacity(int cap) { if (!isSSO()) ptr.cap = cap; }
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fece 	bl	8001008 <_ZNK6String5isSSOEv>
 800126c:	4603      	mov	r3, r0
 800126e:	f083 0301 	eor.w	r3, r3, #1
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <_ZN6String11setCapacityEi+0x24>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	809a      	strh	r2, [r3, #4]
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <_ZN6String9setBufferEPc>:
        inline void setBuffer(char *buff) { if (!isSSO()) ptr.buff = buff; }
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff feb8 	bl	8001008 <_ZNK6String5isSSOEv>
 8001298:	4603      	mov	r3, r0
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <_ZN6String9setBufferEPc+0x22>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <_ZNK6String7wbufferEv>:
        inline char *wbuffer() const { return isSSO() ? const_cast<char *>(sso.buff) : ptr.buff; } // Writable version of buffer
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fea4 	bl	8001008 <_ZNK6String5isSSOEv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <_ZNK6String7wbufferEv+0x18>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	e001      	b.n	80012ce <_ZNK6String7wbufferEv+0x1c>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
    init();
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f81d 	bl	8001320 <_ZN6String4initEv>
    if (cstr)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <_ZN6StringC1EPKc+0x28>
        copy(cstr, strlen(cstr));
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7fe ff77 	bl	80001e0 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f93d 	bl	8001578 <_ZN6String4copyEPKcj>
}
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZN6StringD1Ev>:
    init();
    char buf[33];
    *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    invalidate();
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f81d 	bl	8001350 <_ZN6String10invalidateEv>
}
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZN6String4initEv>:

// /*********************************************/
// /*  Memory Management                        */
// /*********************************************/

inline void String::init(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
    setSSO(false);
 8001328:	2100      	movs	r1, #0
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff58 	bl	80011e0 <_ZN6String6setSSOEb>
    setBuffer(nullptr);
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff ffa8 	bl	8001288 <_ZN6String9setBufferEPc>
    setCapacity(0);
 8001338:	2100      	movs	r1, #0
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff ff8e 	bl	800125c <_ZN6String11setCapacityEi>
    setLen(0);
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff5e 	bl	8001204 <_ZN6String6setLenEi>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_ZN6String10invalidateEv>:

void String::invalidate(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    if(!isSSO() && wbuffer())
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe55 	bl	8001008 <_ZNK6String5isSSOEv>
 800135e:	4603      	mov	r3, r0
 8001360:	f083 0301 	eor.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d007      	beq.n	800137a <_ZN6String10invalidateEv+0x2a>
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa1 	bl	80012b2 <_ZNK6String7wbufferEv>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <_ZN6String10invalidateEv+0x2a>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <_ZN6String10invalidateEv+0x2c>
 800137a:	2300      	movs	r3, #0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <_ZN6String10invalidateEv+0x3e>
        free(wbuffer());
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff96 	bl	80012b2 <_ZNK6String7wbufferEv>
 8001386:	4603      	mov	r3, r0
 8001388:	4618      	mov	r0, r3
 800138a:	f00a fd67 	bl	800be5c <free>
    init();
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffc6 	bl	8001320 <_ZN6String4initEv>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_ZN6String7reserveEj>:

unsigned char String::reserve(unsigned int size) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    if(buffer() && capacity() >= size)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fe58 	bl	800105c <_ZNK6String6bufferEv>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <_ZN6String7reserveEj+0x28>
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff02 	bl	80011bc <_ZNK6String8capacityEv>
 80013b8:	4602      	mov	r2, r0
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4293      	cmp	r3, r2
 80013be:	d801      	bhi.n	80013c4 <_ZN6String7reserveEj+0x28>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <_ZN6String7reserveEj+0x2a>
 80013c4:	2300      	movs	r3, #0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <_ZN6String7reserveEj+0x32>
        return 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e01f      	b.n	800140e <_ZN6String7reserveEj+0x72>
    if(changeBuffer(size)) {
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f820 	bl	8001416 <_ZN6String12changeBufferEj>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	bf14      	ite	ne
 80013dc:	2301      	movne	r3, #1
 80013de:	2300      	moveq	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <_ZN6String7reserveEj+0x70>
        if(len() == 0)
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe22 	bl	8001030 <_ZNK6String3lenEv>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	bf0c      	ite	eq
 80013f2:	2301      	moveq	r3, #1
 80013f4:	2300      	movne	r3, #0
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <_ZN6String7reserveEj+0x6c>
            wbuffer()[0] = 0;
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff58 	bl	80012b2 <_ZNK6String7wbufferEv>
 8001402:	4603      	mov	r3, r0
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
        return 1;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <_ZN6String7reserveEj+0x72>
    }
    return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_ZN6String12changeBufferEj>:

unsigned char String::changeBuffer(unsigned int maxStrLen) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b08a      	sub	sp, #40	; 0x28
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
    // Can we use SSO here to avoid allocation?
    if (maxStrLen < sizeof(sso.buff) - 1) {
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b09      	cmp	r3, #9
 8001424:	d84a      	bhi.n	80014bc <_ZN6String12changeBufferEj+0xa6>
        if (isSSO() || !buffer()) {
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fdee 	bl	8001008 <_ZNK6String5isSSOEv>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <_ZN6String12changeBufferEj+0x28>
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fe12 	bl	800105c <_ZNK6String6bufferEv>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <_ZN6String12changeBufferEj+0x2c>
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <_ZN6String12changeBufferEj+0x2e>
 8001442:	2300      	movs	r3, #0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00f      	beq.n	8001468 <_ZN6String12changeBufferEj+0x52>
            // Already using SSO, nothing to do
	    uint16_t oldLen = len();
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fdf1 	bl	8001030 <_ZNK6String3lenEv>
 800144e:	4603      	mov	r3, r0
 8001450:	82bb      	strh	r3, [r7, #20]
            setSSO(true);
 8001452:	2101      	movs	r1, #1
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fec3 	bl	80011e0 <_ZN6String6setSSOEb>
            setLen(oldLen);
 800145a:	8abb      	ldrh	r3, [r7, #20]
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fed0 	bl	8001204 <_ZN6String6setLenEi>
            return 1;
 8001464:	2301      	movs	r3, #1
 8001466:	e083      	b.n	8001570 <_ZN6String12changeBufferEj+0x15a>
        } else { // if bufptr && !isSSO()
            // Using bufptr, need to shrink into sso.buff
            char temp[sizeof(sso.buff)];
            memcpy(temp, buffer(), maxStrLen);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fdf7 	bl	800105c <_ZNK6String6bufferEv>
 800146e:	4601      	mov	r1, r0
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f00a fcf8 	bl	800be6c <memcpy>
            free(wbuffer());
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff18 	bl	80012b2 <_ZNK6String7wbufferEv>
 8001482:	4603      	mov	r3, r0
 8001484:	4618      	mov	r0, r3
 8001486:	f00a fce9 	bl	800be5c <free>
            uint16_t oldLen = len();
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fdd0 	bl	8001030 <_ZNK6String3lenEv>
 8001490:	4603      	mov	r3, r0
 8001492:	82fb      	strh	r3, [r7, #22]
            setSSO(true);
 8001494:	2101      	movs	r1, #1
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fea2 	bl	80011e0 <_ZN6String6setSSOEb>
            memcpy(wbuffer(), temp, maxStrLen);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff08 	bl	80012b2 <_ZNK6String7wbufferEv>
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f00a fcdf 	bl	800be6c <memcpy>
            setLen(oldLen);
 80014ae:	8afb      	ldrh	r3, [r7, #22]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fea6 	bl	8001204 <_ZN6String6setLenEi>
            return 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e059      	b.n	8001570 <_ZN6String12changeBufferEj+0x15a>
        }
    }
    // Fallthrough to normal allocator
    size_t newSize = (maxStrLen + 16) & (~0xf);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3310      	adds	r3, #16
 80014c0:	f023 030f 	bic.w	r3, r3, #15
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    // Make sure we can fit newsize in the buffer
    if (newSize > CAPACITY_MAX) {
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d301      	bcc.n	80014d2 <_ZN6String12changeBufferEj+0xbc>
        return false;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e04e      	b.n	8001570 <_ZN6String12changeBufferEj+0x15a>
    }
    uint16_t oldLen = len();
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fdac 	bl	8001030 <_ZNK6String3lenEv>
 80014d8:	4603      	mov	r3, r0
 80014da:	847b      	strh	r3, [r7, #34]	; 0x22
    char *newbuffer = (char *) realloc(isSSO() ? nullptr : wbuffer(), newSize);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fd93 	bl	8001008 <_ZNK6String5isSSOEv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <_ZN6String12changeBufferEj+0xd6>
 80014e8:	2300      	movs	r3, #0
 80014ea:	e003      	b.n	80014f4 <_ZN6String12changeBufferEj+0xde>
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fee0 	bl	80012b2 <_ZNK6String7wbufferEv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00b fc42 	bl	800cd80 <realloc>
 80014fc:	61f8      	str	r0, [r7, #28]
    if (newbuffer) {
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d034      	beq.n	800156e <_ZN6String12changeBufferEj+0x158>
        size_t oldSize = capacity() + 1; // include NULL.
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fe59 	bl	80011bc <_ZNK6String8capacityEv>
 800150a:	4603      	mov	r3, r0
 800150c:	3301      	adds	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
        if (isSSO()) {
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fd79 	bl	8001008 <_ZNK6String5isSSOEv>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <_ZN6String12changeBufferEj+0x112>
            // Copy the SSO buffer into allocated space
            memmove(newbuffer, sso.buff, sizeof(sso.buff));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	220b      	movs	r2, #11
 8001520:	4619      	mov	r1, r3
 8001522:	69f8      	ldr	r0, [r7, #28]
 8001524:	f00a fcb0 	bl	800be88 <memmove>
        }
        if (newSize > oldSize)
 8001528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	429a      	cmp	r2, r3
 800152e:	d909      	bls.n	8001544 <_ZN6String12changeBufferEj+0x12e>
        {
            memset(newbuffer + oldSize, 0, newSize - oldSize);
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	18d0      	adds	r0, r2, r3
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	461a      	mov	r2, r3
 800153e:	2100      	movs	r1, #0
 8001540:	f00a fcbc 	bl	800bebc <memset>
        }
        setSSO(false);
 8001544:	2100      	movs	r1, #0
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff fe4a 	bl	80011e0 <_ZN6String6setSSOEb>
        setCapacity(newSize - 1);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	3b01      	subs	r3, #1
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe82 	bl	800125c <_ZN6String11setCapacityEi>
        setBuffer(newbuffer);
 8001558:	69f9      	ldr	r1, [r7, #28]
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe94 	bl	8001288 <_ZN6String9setBufferEPc>
        setLen(oldLen); // Needed in case of SSO where len() never existed
 8001560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fe4d 	bl	8001204 <_ZN6String6setLenEi>
        return 1;
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <_ZN6String12changeBufferEj+0x15a>
    }
    return 0;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3728      	adds	r7, #40	; 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <_ZN6String4copyEPKcj>:

// /*********************************************/
// /*  Copy and Move                            */
// /*********************************************/

String & String::copy(const char *cstr, unsigned int length) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
    if(!reserve(length)) {
 8001584:	6879      	ldr	r1, [r7, #4]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f7ff ff08 	bl	800139c <_ZN6String7reserveEj>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <_ZN6String4copyEPKcj+0x2e>
        invalidate();
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f7ff fed7 	bl	8001350 <_ZN6String10invalidateEv>
        return *this;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	e00e      	b.n	80015c4 <_ZN6String4copyEPKcj+0x4c>
    }
    memmove(wbuffer(), cstr, length + 1);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fe83 	bl	80012b2 <_ZNK6String7wbufferEv>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3301      	adds	r3, #1
 80015b0:	461a      	mov	r2, r3
 80015b2:	68b9      	ldr	r1, [r7, #8]
 80015b4:	f00a fc68 	bl	800be88 <memmove>
    setLen(length);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4619      	mov	r1, r3
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff fe21 	bl	8001204 <_ZN6String6setLenEi>
    return *this;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_Z41__static_initialization_and_destruction_0ii>:
    return 0.0;
}

// global empty string to allow returning const String& with nothing

const String emptyString;
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <_Z41__static_initialization_and_destruction_0ii+0x22>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d103      	bne.n	80015ee <_Z41__static_initialization_and_destruction_0ii+0x22>
 80015e6:	4909      	ldr	r1, [pc, #36]	; (800160c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80015ea:	f7ff fe74 	bl	80012d6 <_ZN6StringC1EPKc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d107      	bne.n	8001604 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d102      	bne.n	8001604 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8001600:	f7ff fe82 	bl	8001308 <_ZN6StringD1Ev>
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	080106c0 	.word	0x080106c0
 8001610:	20000208 	.word	0x20000208

08001614 <_GLOBAL__sub_I__ZN6StringC2EPKc>:
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 8001618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff ffd5 	bl	80015cc <_Z41__static_initialization_and_destruction_0ii>
 8001622:	bd80      	pop	{r7, pc}

08001624 <_GLOBAL__sub_D__ZN6StringC2EPKc>:
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
 8001628:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff ffcd 	bl	80015cc <_Z41__static_initialization_and_destruction_0ii>
 8001632:	bd80      	pop	{r7, pc}

08001634 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	7c1b      	ldrb	r3, [r3, #16]
 8001642:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f00a fc2a 	bl	800bebc <memset>
}
 8001668:	bf00      	nop
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
 800167c:	4613      	mov	r3, r2
 800167e:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	7c1b      	ldrb	r3, [r3, #16]
 8001686:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001690:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	b29b      	uxth	r3, r3
 8001696:	89ba      	ldrh	r2, [r7, #12]
 8001698:	fb12 f303 	smulbb	r3, r2, r3
 800169c:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800169e:	89bb      	ldrh	r3, [r7, #12]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80016a4:	89bb      	ldrh	r3, [r7, #12]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	4413      	add	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80016ac:	7bf9      	ldrb	r1, [r7, #15]
 80016ae:	78ba      	ldrb	r2, [r7, #2]
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	460b      	mov	r3, r1
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f001 fd9e 	bl	80031fa <u8x8_DrawTile>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016d8:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016e0:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	7c5b      	ldrb	r3, [r3, #17]
 80016e8:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80016ea:	7bba      	ldrb	r2, [r7, #14]
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	4619      	mov	r1, r3
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffbd 	bl	8001670 <u8g2_send_tile_row>
    src_row++;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	3301      	adds	r3, #1
 80016fa:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	3301      	adds	r3, #1
 8001700:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001702:	7bfa      	ldrb	r2, [r7, #15]
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	429a      	cmp	r2, r3
 8001708:	d203      	bcs.n	8001712 <u8g2_send_buffer+0x4c>
 800170a:	7bba      	ldrb	r2, [r7, #14]
 800170c:	7b3b      	ldrb	r3, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3eb      	bcc.n	80016ea <u8g2_send_buffer+0x24>
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffcf 	bl	80016c6 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f001 fdb7 	bl	800329c <u8x8_RefreshDisplay>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff5b 	bl	8001634 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800177e:	2100      	movs	r1, #0
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffd8 	bl	8001736 <u8g2_SetBufferCurrTileRow>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff95 	bl	80016c6 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017a2:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	4413      	add	r3, r2
 80017ae:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	7c5b      	ldrb	r3, [r3, #17]
 80017b6:	7bfa      	ldrb	r2, [r7, #15]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d304      	bcc.n	80017c6 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f001 fd6d 	bl	800329c <u8x8_RefreshDisplay>
    return 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e00d      	b.n	80017e2 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff2f 	bl	8001634 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4619      	mov	r1, r3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffab 	bl	8001736 <u8g2_SetBufferCurrTileRow>
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffb7 	bl	8001766 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ffc8 	bl	800178e <u8g2_NextPage>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f9      	bne.n	80017f8 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001804:	2100      	movs	r1, #0
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff ff95 	bl	8001736 <u8g2_SetBufferCurrTileRow>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2208      	movs	r2, #8
 8001820:	701a      	strb	r2, [r3, #0]
  return buf;
 8001822:	4b03      	ldr	r3, [pc, #12]	; (8001830 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000214 	.word	0x20000214

08001834 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x44>)
 800184a:	490c      	ldr	r1, [pc, #48]	; (800187c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x48>)
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f001 fd85 	bl	800335c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8001852:	f107 0313 	add.w	r3, r7, #19
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffdc 	bl	8001814 <u8g2_m_16_8_f>
 800185c:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800185e:	7cfa      	ldrb	r2, [r7, #19]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x4c>)
 8001866:	6979      	ldr	r1, [r7, #20]
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f001 f81d 	bl	80028a8 <u8g2_SetupBuffer>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08002e99 	.word	0x08002e99
 800187c:	080030f5 	.word	0x080030f5
 8001880:	0800272b 	.word	0x0800272b

08001884 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	781b      	ldrb	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	81fb      	strh	r3, [r7, #14]
    font++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3301      	adds	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	4413      	add	r3, r2
 80018d8:	81fb      	strh	r3, [r7, #14]
    return pos;
 80018da:	89fb      	ldrh	r3, [r7, #14]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80018f2:	2100      	movs	r1, #0
 80018f4:	6838      	ldr	r0, [r7, #0]
 80018f6:	f7ff ffc5 	bl	8001884 <u8g2_font_get_byte>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001902:	2101      	movs	r1, #1
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f7ff ffbd 	bl	8001884 <u8g2_font_get_byte>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001912:	2102      	movs	r1, #2
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f7ff ffb5 	bl	8001884 <u8g2_font_get_byte>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001922:	2103      	movs	r1, #3
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f7ff ffad 	bl	8001884 <u8g2_font_get_byte>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001932:	2104      	movs	r1, #4
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f7ff ffa5 	bl	8001884 <u8g2_font_get_byte>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001942:	2105      	movs	r1, #5
 8001944:	6838      	ldr	r0, [r7, #0]
 8001946:	f7ff ff9d 	bl	8001884 <u8g2_font_get_byte>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001952:	2106      	movs	r1, #6
 8001954:	6838      	ldr	r0, [r7, #0]
 8001956:	f7ff ff95 	bl	8001884 <u8g2_font_get_byte>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001962:	2107      	movs	r1, #7
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	f7ff ff8d 	bl	8001884 <u8g2_font_get_byte>
 800196a:	4603      	mov	r3, r0
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001972:	2108      	movs	r1, #8
 8001974:	6838      	ldr	r0, [r7, #0]
 8001976:	f7ff ff85 	bl	8001884 <u8g2_font_get_byte>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001982:	2109      	movs	r1, #9
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f7ff ff7d 	bl	8001884 <u8g2_font_get_byte>
 800198a:	4603      	mov	r3, r0
 800198c:	b25a      	sxtb	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001992:	210a      	movs	r1, #10
 8001994:	6838      	ldr	r0, [r7, #0]
 8001996:	f7ff ff75 	bl	8001884 <u8g2_font_get_byte>
 800199a:	4603      	mov	r3, r0
 800199c:	b25a      	sxtb	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80019a2:	210b      	movs	r1, #11
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f7ff ff6d 	bl	8001884 <u8g2_font_get_byte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80019b2:	210c      	movs	r1, #12
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff ff65 	bl	8001884 <u8g2_font_get_byte>
 80019ba:	4603      	mov	r3, r0
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80019c2:	210d      	movs	r1, #13
 80019c4:	6838      	ldr	r0, [r7, #0]
 80019c6:	f7ff ff5d 	bl	8001884 <u8g2_font_get_byte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b25a      	sxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80019d2:	210e      	movs	r1, #14
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7ff ff55 	bl	8001884 <u8g2_font_get_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80019e2:	210f      	movs	r1, #15
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f7ff ff4d 	bl	8001884 <u8g2_font_get_byte>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80019f2:	2110      	movs	r1, #16
 80019f4:	6838      	ldr	r0, [r7, #0]
 80019f6:	f7ff ff45 	bl	8001884 <u8g2_font_get_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b25a      	sxtb	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001a02:	2111      	movs	r1, #17
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff ff4f 	bl	80018a8 <u8g2_font_get_word>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8001a12:	2113      	movs	r1, #19
 8001a14:	6838      	ldr	r0, [r7, #0]
 8001a16:	f7ff ff47 	bl	80018a8 <u8g2_font_get_word>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8001a22:	2115      	movs	r1, #21
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f7ff ff3f 	bl	80018a8 <u8g2_font_get_word>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	82da      	strh	r2, [r3, #22]
#endif
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b085      	sub	sp, #20
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7b1b      	ldrb	r3, [r3, #12]
 8001a4a:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	7b7b      	ldrb	r3, [r7, #13]
 8001a58:	fa42 f303 	asr.w	r3, r2, r3
 8001a5c:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001a62:	7bba      	ldrb	r2, [r7, #14]
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	4413      	add	r3, r2
 8001a68:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	2b07      	cmp	r3, #7
 8001a6e:	d91a      	bls.n	8001aa6 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001a70:	2308      	movs	r3, #8
 8001a72:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001a74:	7b3a      	ldrb	r2, [r7, #12]
 8001a76:	7b7b      	ldrb	r3, [r7, #13]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	7b3b      	ldrb	r3, [r7, #12]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	b25a      	sxtb	r2, r3
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b25b      	sxtb	r3, r3
 8001a9e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001aa0:	7bbb      	ldrb	r3, [r7, #14]
 8001aa2:	3b08      	subs	r3, #8
 8001aa4:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7bba      	ldrb	r2, [r7, #14]
 8001ac0:	731a      	strb	r2, [r3, #12]
  return val;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ffaa 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001af4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	7bbb      	ldrb	r3, [r7, #14]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	73fb      	strb	r3, [r7, #15]
  return v;
 8001b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001b16:	b490      	push	{r4, r7}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4623      	mov	r3, r4
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	717b      	strb	r3, [r7, #5]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	713b      	strb	r3, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d014      	beq.n	8001b64 <u8g2_add_vector_y+0x4e>
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	dc19      	bgt.n	8001b72 <u8g2_add_vector_y+0x5c>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <u8g2_add_vector_y+0x32>
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d007      	beq.n	8001b56 <u8g2_add_vector_y+0x40>
 8001b46:	e014      	b.n	8001b72 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001b48:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4413      	add	r3, r2
 8001b52:	80fb      	strh	r3, [r7, #6]
      break;
 8001b54:	e014      	b.n	8001b80 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001b56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4413      	add	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
      break;
 8001b62:	e00d      	b.n	8001b80 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001b64:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	80fb      	strh	r3, [r7, #6]
      break;
 8001b70:	e006      	b.n	8001b80 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001b72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	88fa      	ldrh	r2, [r7, #6]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	80fb      	strh	r3, [r7, #6]
      break;      
 8001b7e:	bf00      	nop
  }
  return dy;
 8001b80:	88fb      	ldrh	r3, [r7, #6]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc90      	pop	{r4, r7}
 8001b8a:	4770      	bx	lr

08001b8c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001b8c:	b490      	push	{r4, r7}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4608      	mov	r0, r1
 8001b96:	4611      	mov	r1, r2
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	717b      	strb	r3, [r7, #5]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	713b      	strb	r3, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d014      	beq.n	8001bda <u8g2_add_vector_x+0x4e>
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	dc19      	bgt.n	8001be8 <u8g2_add_vector_x+0x5c>
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d002      	beq.n	8001bbe <u8g2_add_vector_x+0x32>
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d007      	beq.n	8001bcc <u8g2_add_vector_x+0x40>
 8001bbc:	e014      	b.n	8001be8 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001bbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	80fb      	strh	r3, [r7, #6]
      break;
 8001bca:	e014      	b.n	8001bf6 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001bcc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	80fb      	strh	r3, [r7, #6]
      break;
 8001bd8:	e00d      	b.n	8001bf6 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001bda:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	80fb      	strh	r3, [r7, #6]
      break;
 8001be6:	e006      	b.n	8001bf6 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001be8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	80fb      	strh	r3, [r7, #6]
      break;      
 8001bf4:	bf00      	nop
  }
  return dx;
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc90      	pop	{r4, r7}
 8001c00:	4770      	bx	lr

08001c02 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b088      	sub	sp, #32
 8001c06:	af02      	add	r7, sp, #8
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3360      	adds	r3, #96	; 0x60
 8001c16:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001c22:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001c2a:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c32:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	7d7b      	ldrb	r3, [r7, #21]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001c40:	7dfa      	ldrb	r2, [r7, #23]
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d201      	bcs.n	8001c4c <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	88db      	ldrh	r3, [r3, #6]
 8001c56:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001c58:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c5c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	7c1b      	ldrb	r3, [r3, #16]
 8001c64:	89b8      	ldrh	r0, [r7, #12]
 8001c66:	f7ff ff91 	bl	8001b8c <u8g2_add_vector_x>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001c6e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001c72:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	7c1b      	ldrb	r3, [r3, #16]
 8001c7a:	8978      	ldrh	r0, [r7, #10]
 8001c7c:	f7ff ff4b 	bl	8001b16 <u8g2_add_vector_y>
 8001c80:	4603      	mov	r3, r0
 8001c82:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001c84:	78bb      	ldrb	r3, [r7, #2]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d010      	beq.n	8001cac <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	7b9a      	ldrb	r2, [r3, #14]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001c94:	7dbb      	ldrb	r3, [r7, #22]
 8001c96:	b298      	uxth	r0, r3
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	7c1b      	ldrb	r3, [r3, #16]
 8001c9c:	897a      	ldrh	r2, [r7, #10]
 8001c9e:	89b9      	ldrh	r1, [r7, #12]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fb88 	bl	80023ba <u8g2_DrawHVLine>
 8001caa:	e013      	b.n	8001cd4 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	7b5b      	ldrb	r3, [r3, #13]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	7bda      	ldrb	r2, [r3, #15]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001cbe:	7dbb      	ldrb	r3, [r7, #22]
 8001cc0:	b298      	uxth	r0, r3
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	7c1b      	ldrb	r3, [r3, #16]
 8001cc6:	897a      	ldrh	r2, [r7, #10]
 8001cc8:	89b9      	ldrh	r1, [r7, #12]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 fb73 	bl	80023ba <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001cd4:	7dfa      	ldrb	r2, [r7, #23]
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d309      	bcc.n	8001cf0 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001cdc:	7dfa      	ldrb	r2, [r7, #23]
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	757b      	strb	r3, [r7, #21]
    ly++;
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001cee:	e79d      	b.n	8001c2c <u8g2_font_decode_len+0x2a>
      break;
 8001cf0:	bf00      	nop
  }
  lx += cnt;
 8001cf2:	7d7a      	ldrb	r2, [r7, #21]
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001cfa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	721a      	strb	r2, [r3, #8]
  decode->y = ly;
 8001d02:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	725a      	strb	r2, [r3, #9]
  
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b084      	sub	sp, #16
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3360      	adds	r3, #96	; 0x60
 8001d20:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001d34:	4619      	mov	r1, r3
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff fe7f 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b25a      	sxtb	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7ff fe74 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b25a      	sxtb	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	7b9b      	ldrb	r3, [r3, #14]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf0c      	ite	eq
 8001d6c:	2301      	moveq	r3, #1
 8001d6e:	2300      	movne	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	73da      	strb	r2, [r3, #15]
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af02      	add	r7, sp, #8
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3360      	adds	r3, #96	; 0x60
 8001d8e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffbd 	bl	8001d12 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001d9e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001da6:	4619      	mov	r1, r3
 8001da8:	6978      	ldr	r0, [r7, #20]
 8001daa:	f7ff fe91 	bl	8001ad0 <u8g2_font_decode_get_signed_bits>
 8001dae:	4603      	mov	r3, r0
 8001db0:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001db8:	4619      	mov	r1, r3
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff fe88 	bl	8001ad0 <u8g2_font_decode_get_signed_bits>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7ff fe7f 	bl	8001ad0 <u8g2_font_decode_get_signed_bits>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f340 80d7 	ble.w	8001f90 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	8898      	ldrh	r0, [r3, #4]
 8001de6:	7cfa      	ldrb	r2, [r7, #19]
 8001de8:	7c7b      	ldrb	r3, [r7, #17]
 8001dea:	4413      	add	r3, r2
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	425b      	negs	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	b25a      	sxtb	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	7c1b      	ldrb	r3, [r3, #16]
 8001df8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001dfc:	f7ff fec6 	bl	8001b8c <u8g2_add_vector_x>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	88d8      	ldrh	r0, [r3, #6]
 8001e0c:	7cfa      	ldrb	r2, [r7, #19]
 8001e0e:	7c7b      	ldrb	r3, [r7, #17]
 8001e10:	4413      	add	r3, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	425b      	negs	r3, r3
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	b25a      	sxtb	r2, r3
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	7c1b      	ldrb	r3, [r3, #16]
 8001e1e:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001e22:	f7ff fe78 	bl	8001b16 <u8g2_add_vector_y>
 8001e26:	4603      	mov	r3, r0
 8001e28:	461a      	mov	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	88db      	ldrh	r3, [r3, #6]
 8001e38:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001e3a:	8bfb      	ldrh	r3, [r7, #30]
 8001e3c:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001e3e:	8b7b      	ldrh	r3, [r7, #26]
 8001e40:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	7c1b      	ldrb	r3, [r3, #16]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d85a      	bhi.n	8001f00 <u8g2_font_decode_glyph+0x180>
 8001e4a:	a201      	add	r2, pc, #4	; (adr r2, 8001e50 <u8g2_font_decode_glyph+0xd0>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001e61 	.word	0x08001e61
 8001e54:	08001e7d 	.word	0x08001e7d
 8001e58:	08001ea5 	.word	0x08001ea5
 8001e5c:	08001ed9 	.word	0x08001ed9
      {
	case 0:
	    x1 += decode->glyph_width;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	8bbb      	ldrh	r3, [r7, #28]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001e6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	8b3b      	ldrh	r3, [r7, #24]
 8001e76:	4413      	add	r3, r2
 8001e78:	833b      	strh	r3, [r7, #24]
	    break;
 8001e7a:	e041      	b.n	8001f00 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001e7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	8bfa      	ldrh	r2, [r7, #30]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001e88:	8bfb      	ldrh	r3, [r7, #30]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001e8e:	8bbb      	ldrh	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	8b3b      	ldrh	r3, [r7, #24]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	833b      	strh	r3, [r7, #24]
	    break;
 8001ea2:	e02d      	b.n	8001f00 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	8bfa      	ldrh	r2, [r7, #30]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001eb8:	8bbb      	ldrh	r3, [r7, #28]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001ebe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	8b7a      	ldrh	r2, [r7, #26]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001ed0:	8b3b      	ldrh	r3, [r7, #24]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001ed6:	e013      	b.n	8001f00 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001ed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	8bbb      	ldrh	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	8b7a      	ldrh	r2, [r7, #26]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001ef2:	8b7b      	ldrh	r3, [r7, #26]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001ef8:	8b3b      	ldrh	r3, [r7, #24]
 8001efa:	3301      	adds	r3, #1
 8001efc:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001efe:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001f00:	8bb8      	ldrh	r0, [r7, #28]
 8001f02:	8b7a      	ldrh	r2, [r7, #26]
 8001f04:	8bf9      	ldrh	r1, [r7, #30]
 8001f06:	8b3b      	ldrh	r3, [r7, #24]
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fb45 	bl	800259c <u8g2_IsIntersection>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <u8g2_font_decode_glyph+0x19e>
	return d;
 8001f18:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001f1c:	e03a      	b.n	8001f94 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2200      	movs	r2, #0
 8001f28:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001f30:	4619      	mov	r1, r3
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff fd81 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001f42:	4619      	mov	r1, r3
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f7ff fd78 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fe54 	bl	8001c02 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001f5a:	7bbb      	ldrb	r3, [r7, #14]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fe4e 	bl	8001c02 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001f66:	2101      	movs	r1, #1
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff fd66 	bl	8001a3a <u8g2_font_decode_get_unsigned_bits>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1ec      	bne.n	8001f4e <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001f7a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dd00      	ble.n	8001f84 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001f82:	e7d2      	b.n	8001f2a <u8g2_font_decode_glyph+0x1aa>
	break;
 8001f84:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	7b9a      	ldrb	r2, [r3, #14]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001f90:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3317      	adds	r3, #23
 8001fb2:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d82a      	bhi.n	8002010 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	2b60      	cmp	r3, #96	; 0x60
 8001fbe:	d907      	bls.n	8001fd0 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	4413      	add	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e009      	b.n	8001fe4 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	2b40      	cmp	r3, #64	; 0x40
 8001fd4:	d906      	bls.n	8001fe4 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001fdc:	461a      	mov	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04e      	beq.n	800208c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	887a      	ldrh	r2, [r7, #2]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d102      	bne.n	8002000 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	e049      	b.n	8002094 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	4413      	add	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800200e:	e7e9      	b.n	8001fe4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8002016:	461a      	mov	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4413      	add	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002022:	2100      	movs	r1, #0
 8002024:	6938      	ldr	r0, [r7, #16]
 8002026:	f7ff fc3f 	bl	80018a8 <u8g2_font_get_word>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002034:	2102      	movs	r1, #2
 8002036:	6938      	ldr	r0, [r7, #16]
 8002038:	f7ff fc36 	bl	80018a8 <u8g2_font_get_word>
 800203c:	4603      	mov	r3, r0
 800203e:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	3304      	adds	r3, #4
 8002044:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8002046:	89fa      	ldrh	r2, [r7, #14]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3e9      	bcc.n	8002022 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8002054:	89fb      	ldrh	r3, [r7, #14]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b29a      	uxth	r2, r3
 8002062:	89fb      	ldrh	r3, [r7, #14]
 8002064:	4313      	orrs	r3, r2
 8002066:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8002068:	89fb      	ldrh	r3, [r7, #14]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d010      	beq.n	8002090 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 800206e:	89fa      	ldrh	r2, [r7, #14]
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	429a      	cmp	r2, r3
 8002074:	d102      	bne.n	800207c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3303      	adds	r3, #3
 800207a:	e00b      	b.n	8002094 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3302      	adds	r3, #2
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4413      	add	r3, r2
 8002088:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800208a:	e7e0      	b.n	800204e <u8g2_font_get_glyph_data+0xb2>
	break;
 800208c:	bf00      	nop
 800208e:	e000      	b.n	8002092 <u8g2_font_get_glyph_data+0xf6>
	break;
 8002090:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	4608      	mov	r0, r1
 80020a6:	4611      	mov	r1, r2
 80020a8:	461a      	mov	r2, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	817b      	strh	r3, [r7, #10]
 80020ae:	460b      	mov	r3, r1
 80020b0:	813b      	strh	r3, [r7, #8]
 80020b2:	4613      	mov	r3, r2
 80020b4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	897a      	ldrh	r2, [r7, #10]
 80020be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	893a      	ldrh	r2, [r7, #8]
 80020c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff ff64 	bl	8001f9c <u8g2_font_get_glyph_data>
 80020d4:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fe4e 	bl	8001d80 <u8g2_font_decode_glyph>
 80020e4:	4603      	mov	r3, r0
 80020e6:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80020e8:	8afb      	ldrh	r3, [r7, #22]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	817b      	strh	r3, [r7, #10]
 8002106:	460b      	mov	r3, r1
 8002108:	813b      	strh	r3, [r7, #8]
 800210a:	4613      	mov	r3, r2
 800210c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002114:	2b03      	cmp	r3, #3
 8002116:	d833      	bhi.n	8002180 <u8g2_DrawGlyph+0x8c>
 8002118:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <u8g2_DrawGlyph+0x2c>)
 800211a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211e:	bf00      	nop
 8002120:	08002131 	.word	0x08002131
 8002124:	08002145 	.word	0x08002145
 8002128:	08002159 	.word	0x08002159
 800212c:	0800216d 	.word	0x0800216d
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	4798      	blx	r3
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	893b      	ldrh	r3, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	813b      	strh	r3, [r7, #8]
      break;
 8002142:	e01d      	b.n	8002180 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	4798      	blx	r3
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	897b      	ldrh	r3, [r7, #10]
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	817b      	strh	r3, [r7, #10]
      break;
 8002156:	e013      	b.n	8002180 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	4798      	blx	r3
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	893b      	ldrh	r3, [r7, #8]
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	813b      	strh	r3, [r7, #8]
      break;
 800216a:	e009      	b.n	8002180 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	4798      	blx	r3
 8002174:	4603      	mov	r3, r0
 8002176:	461a      	mov	r2, r3
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	4413      	add	r3, r2
 800217c:	817b      	strh	r3, [r7, #10]
      break;
 800217e:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	893a      	ldrh	r2, [r7, #8]
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff ff88 	bl	800209c <u8g2_font_draw_glyph>
 800218c:	4603      	mov	r3, r0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05d      	beq.n	8002264 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d04d      	beq.n	8002266 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d11c      	bne.n	800220e <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80021e0:	429a      	cmp	r2, r3
 80021e2:	da05      	bge.n	80021f0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80021fc:	429a      	cmp	r2, r3
 80021fe:	dd32      	ble.n	8002266 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800220c:	e02b      	b.n	8002266 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800221c:	4619      	mov	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002224:	440b      	add	r3, r1
 8002226:	429a      	cmp	r2, r3
 8002228:	da0d      	bge.n	8002246 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002230:	b2da      	uxtb	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4413      	add	r3, r2
 800223c:	b2db      	uxtb	r3, r3
 800223e:	b25a      	sxtb	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002252:	429a      	cmp	r2, r3
 8002254:	dd07      	ble.n	8002266 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002262:	e000      	b.n	8002266 <u8g2_UpdateRefHeight+0xce>
    return;
 8002264:	bf00      	nop
  }  
}
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  return 0;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <u8g2_SetFontPosBaseline+0x1c>)
 8002294:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	08002271 	.word	0x08002271

080022a8 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d00b      	beq.n	80022d4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3374      	adds	r3, #116	; 0x74
 80022c6:	6839      	ldr	r1, [r7, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff fb0d 	bl	80018e8 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff62 	bl	8002198 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	460b      	mov	r3, r1
 80022ec:	80fb      	strh	r3, [r7, #6]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80022f8:	8afb      	ldrh	r3, [r7, #22]
 80022fa:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	881a      	ldrh	r2, [r3, #0]
 8002300:	8abb      	ldrh	r3, [r7, #20]
 8002302:	4413      	add	r3, r2
 8002304:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002306:	8afa      	ldrh	r2, [r7, #22]
 8002308:	8abb      	ldrh	r3, [r7, #20]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90b      	bls.n	8002326 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800230e:	8afa      	ldrh	r2, [r7, #22]
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d205      	bcs.n	8002322 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002316:	88bb      	ldrh	r3, [r7, #4]
 8002318:	82bb      	strh	r3, [r7, #20]
      b--;
 800231a:	8abb      	ldrh	r3, [r7, #20]
 800231c:	3b01      	subs	r3, #1
 800231e:	82bb      	strh	r3, [r7, #20]
 8002320:	e001      	b.n	8002326 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002322:	88fb      	ldrh	r3, [r7, #6]
 8002324:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002326:	8afa      	ldrh	r2, [r7, #22]
 8002328:	88bb      	ldrh	r3, [r7, #4]
 800232a:	429a      	cmp	r2, r3
 800232c:	d301      	bcc.n	8002332 <u8g2_clip_intersection2+0x56>
    return 0;
 800232e:	2300      	movs	r3, #0
 8002330:	e01c      	b.n	800236c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002332:	8aba      	ldrh	r2, [r7, #20]
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	429a      	cmp	r2, r3
 8002338:	d801      	bhi.n	800233e <u8g2_clip_intersection2+0x62>
    return 0;
 800233a:	2300      	movs	r3, #0
 800233c:	e016      	b.n	800236c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800233e:	8afa      	ldrh	r2, [r7, #22]
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	429a      	cmp	r2, r3
 8002344:	d201      	bcs.n	800234a <u8g2_clip_intersection2+0x6e>
    a = c;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 800234a:	8aba      	ldrh	r2, [r7, #20]
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d901      	bls.n	8002356 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002352:	88bb      	ldrh	r3, [r7, #4]
 8002354:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8afa      	ldrh	r2, [r7, #22]
 800235a:	801a      	strh	r2, [r3, #0]
  b -= a;
 800235c:	8aba      	ldrh	r2, [r7, #20]
 800235e:	8afb      	ldrh	r3, [r7, #22]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	8aba      	ldrh	r2, [r7, #20]
 8002368:	801a      	strh	r2, [r3, #0]
  return 1;
 800236a:	2301      	movs	r3, #1
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b087      	sub	sp, #28
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002396:	893a      	ldrh	r2, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80023a0:	88f8      	ldrh	r0, [r7, #6]
 80023a2:	893a      	ldrh	r2, [r7, #8]
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4603      	mov	r3, r0
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	47a0      	blx	r4
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b087      	sub	sp, #28
 80023be:	af02      	add	r7, sp, #8
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	460b      	mov	r3, r1
 80023ce:	813b      	strh	r3, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d075      	beq.n	80024ca <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d072      	beq.n	80024ca <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d91a      	bls.n	8002420 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80023ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d109      	bne.n	8002406 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80023f2:	897a      	ldrh	r2, [r7, #10]
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	817b      	strh	r3, [r7, #10]
	  x++;
 80023fc:	897b      	ldrh	r3, [r7, #10]
 80023fe:	3301      	adds	r3, #1
 8002400:	b29b      	uxth	r3, r3
 8002402:	817b      	strh	r3, [r7, #10]
 8002404:	e00c      	b.n	8002420 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002406:	f897 3020 	ldrb.w	r3, [r7, #32]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d108      	bne.n	8002420 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800240e:	893a      	ldrh	r2, [r7, #8]
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	b29b      	uxth	r3, r3
 8002416:	813b      	strh	r3, [r7, #8]
	  y++;
 8002418:	893b      	ldrh	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	b29b      	uxth	r3, r3
 800241e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002420:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800242c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11a      	bne.n	800246a <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800243a:	893b      	ldrh	r3, [r7, #8]
 800243c:	429a      	cmp	r2, r3
 800243e:	d83b      	bhi.n	80024b8 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002446:	893b      	ldrh	r3, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	d937      	bls.n	80024bc <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002458:	1db9      	adds	r1, r7, #6
 800245a:	f107 000a 	add.w	r0, r7, #10
 800245e:	f7ff ff3d 	bl	80022dc <u8g2_clip_intersection2>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d11a      	bne.n	800249e <u8g2_DrawHVLine+0xe4>
	  return;
 8002468:	e02f      	b.n	80024ca <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	429a      	cmp	r2, r3
 8002474:	d824      	bhi.n	80024c0 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800247c:	897b      	ldrh	r3, [r7, #10]
 800247e:	429a      	cmp	r2, r3
 8002480:	d920      	bls.n	80024c4 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800248e:	1db9      	adds	r1, r7, #6
 8002490:	f107 0008 	add.w	r0, r7, #8
 8002494:	f7ff ff22 	bl	80022dc <u8g2_clip_intersection2>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	689c      	ldr	r4, [r3, #8]
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	893a      	ldrh	r2, [r7, #8]
 80024a8:	88f8      	ldrh	r0, [r7, #6]
 80024aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4603      	mov	r3, r0
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	47a0      	blx	r4
 80024b6:	e008      	b.n	80024ca <u8g2_DrawHVLine+0x110>
	  return;
 80024b8:	bf00      	nop
 80024ba:	e006      	b.n	80024ca <u8g2_DrawHVLine+0x110>
	  return;
 80024bc:	bf00      	nop
 80024be:	e004      	b.n	80024ca <u8g2_DrawHVLine+0x110>
	  return;
 80024c0:	bf00      	nop
 80024c2:	e002      	b.n	80024ca <u8g2_DrawHVLine+0x110>
	  return;
 80024c4:	bf00      	nop
 80024c6:	e000      	b.n	80024ca <u8g2_DrawHVLine+0x110>
	  return;
 80024c8:	bf00      	nop
    }
}
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}

080024d0 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80024e6:	883a      	ldrh	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d31a      	bcc.n	8002522 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80024f2:	883a      	ldrh	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d216      	bcs.n	8002526 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	429a      	cmp	r2, r3
 8002502:	d312      	bcc.n	800252a <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800250a:	887a      	ldrh	r2, [r7, #2]
 800250c:	429a      	cmp	r2, r3
 800250e:	d20e      	bcs.n	800252e <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002510:	883a      	ldrh	r2, [r7, #0]
 8002512:	8879      	ldrh	r1, [r7, #2]
 8002514:	2300      	movs	r3, #0
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2301      	movs	r3, #1
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4d 	bl	80023ba <u8g2_DrawHVLine>
 8002520:	e006      	b.n	8002530 <u8g2_DrawPixel+0x60>
    return;
 8002522:	bf00      	nop
 8002524:	e004      	b.n	8002530 <u8g2_DrawPixel+0x60>
    return;
 8002526:	bf00      	nop
 8002528:	e002      	b.n	8002530 <u8g2_DrawPixel+0x60>
    return;
 800252a:	bf00      	nop
 800252c:	e000      	b.n	8002530 <u8g2_DrawPixel+0x60>
    return;
 800252e:	bf00      	nop
}
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002536:	b490      	push	{r4, r7}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4604      	mov	r4, r0
 800253e:	4608      	mov	r0, r1
 8002540:	4611      	mov	r1, r2
 8002542:	461a      	mov	r2, r3
 8002544:	4623      	mov	r3, r4
 8002546:	80fb      	strh	r3, [r7, #6]
 8002548:	4603      	mov	r3, r0
 800254a:	80bb      	strh	r3, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002554:	887a      	ldrh	r2, [r7, #2]
 8002556:	88bb      	ldrh	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	d20d      	bcs.n	8002578 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 800255c:	883a      	ldrh	r2, [r7, #0]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	429a      	cmp	r2, r3
 8002562:	d901      	bls.n	8002568 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002564:	2301      	movs	r3, #1
 8002566:	e014      	b.n	8002592 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d901      	bls.n	8002574 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002570:	2301      	movs	r3, #1
 8002572:	e00e      	b.n	8002592 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002574:	2300      	movs	r3, #0
 8002576:	e00c      	b.n	8002592 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002578:	883a      	ldrh	r2, [r7, #0]
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	429a      	cmp	r2, r3
 800257e:	d907      	bls.n	8002590 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	883b      	ldrh	r3, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d901      	bls.n	800258c <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002588:	2301      	movs	r3, #1
 800258a:	e002      	b.n	8002592 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002590:	2300      	movs	r3, #0
    }
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bc90      	pop	{r4, r7}
 800259a:	4770      	bx	lr

0800259c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	460b      	mov	r3, r1
 80025b0:	813b      	strh	r3, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80025c2:	8b3b      	ldrh	r3, [r7, #24]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	f7ff ffb6 	bl	8002536 <u8g2_is_intersection_decision_tree>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <u8g2_IsIntersection+0x38>
    return 0; 
 80025d0:	2300      	movs	r3, #0
 80025d2:	e00a      	b.n	80025ea <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	897a      	ldrh	r2, [r7, #10]
 80025e4:	f7ff ffa7 	bl	8002536 <u8g2_is_intersection_decision_tree>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	4608      	mov	r0, r1
 80025fc:	4611      	mov	r1, r2
 80025fe:	461a      	mov	r2, r3
 8002600:	4603      	mov	r3, r0
 8002602:	817b      	strh	r3, [r7, #10]
 8002604:	460b      	mov	r3, r1
 8002606:	813b      	strh	r3, [r7, #8]
 8002608:	4613      	mov	r3, r2
 800260a:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	74fb      	strb	r3, [r7, #19]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8002610:	897a      	ldrh	r2, [r7, #10]
 8002612:	88fb      	ldrh	r3, [r7, #6]
 8002614:	429a      	cmp	r2, r3
 8002616:	d904      	bls.n	8002622 <u8g2_DrawLine+0x30>
 8002618:	897a      	ldrh	r2, [r7, #10]
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	837b      	strh	r3, [r7, #26]
 8002620:	e003      	b.n	800262a <u8g2_DrawLine+0x38>
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	837b      	strh	r3, [r7, #26]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800262a:	893a      	ldrh	r2, [r7, #8]
 800262c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800262e:	429a      	cmp	r2, r3
 8002630:	d904      	bls.n	800263c <u8g2_DrawLine+0x4a>
 8002632:	893a      	ldrh	r2, [r7, #8]
 8002634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	833b      	strh	r3, [r7, #24]
 800263a:	e003      	b.n	8002644 <u8g2_DrawLine+0x52>
 800263c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	833b      	strh	r3, [r7, #24]

  if ( dy > dx ) 
 8002644:	8b3a      	ldrh	r2, [r7, #24]
 8002646:	8b7b      	ldrh	r3, [r7, #26]
 8002648:	429a      	cmp	r2, r3
 800264a:	d913      	bls.n	8002674 <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	74fb      	strb	r3, [r7, #19]
    tmp = dx; dx =dy; dy = tmp;
 8002650:	8b7b      	ldrh	r3, [r7, #26]
 8002652:	823b      	strh	r3, [r7, #16]
 8002654:	8b3b      	ldrh	r3, [r7, #24]
 8002656:	837b      	strh	r3, [r7, #26]
 8002658:	8a3b      	ldrh	r3, [r7, #16]
 800265a:	833b      	strh	r3, [r7, #24]
    tmp = x1; x1 =y1; y1 = tmp;
 800265c:	897b      	ldrh	r3, [r7, #10]
 800265e:	823b      	strh	r3, [r7, #16]
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	817b      	strh	r3, [r7, #10]
 8002664:	8a3b      	ldrh	r3, [r7, #16]
 8002666:	813b      	strh	r3, [r7, #8]
    tmp = x2; x2 =y2; y2 = tmp;
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	823b      	strh	r3, [r7, #16]
 800266c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800266e:	80fb      	strh	r3, [r7, #6]
 8002670:	8a3b      	ldrh	r3, [r7, #16]
 8002672:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  if ( x1 > x2 ) 
 8002674:	897a      	ldrh	r2, [r7, #10]
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d90b      	bls.n	8002694 <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 800267c:	897b      	ldrh	r3, [r7, #10]
 800267e:	823b      	strh	r3, [r7, #16]
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	817b      	strh	r3, [r7, #10]
 8002684:	8a3b      	ldrh	r3, [r7, #16]
 8002686:	80fb      	strh	r3, [r7, #6]
    tmp = y1; y1 =y2; y2 = tmp;
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	823b      	strh	r3, [r7, #16]
 800268c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800268e:	813b      	strh	r3, [r7, #8]
 8002690:	8a3b      	ldrh	r3, [r7, #16]
 8002692:	853b      	strh	r3, [r7, #40]	; 0x28
  }
  err = dx >> 1;
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	b29b      	uxth	r3, r3
 800269a:	82fb      	strh	r3, [r7, #22]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800269c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800269e:	893b      	ldrh	r3, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d902      	bls.n	80026aa <u8g2_DrawLine+0xb8>
 80026a4:	2301      	movs	r3, #1
 80026a6:	82bb      	strh	r3, [r7, #20]
 80026a8:	e002      	b.n	80026b0 <u8g2_DrawLine+0xbe>
 80026aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ae:	82bb      	strh	r3, [r7, #20]
  y = y1;
 80026b0:	893b      	ldrh	r3, [r7, #8]
 80026b2:	83bb      	strh	r3, [r7, #28]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d102      	bne.n	80026c4 <u8g2_DrawLine+0xd2>
    x2--;
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	80fb      	strh	r3, [r7, #6]
#endif

  for( x = x1; x <= x2; x++ )
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	83fb      	strh	r3, [r7, #30]
 80026c8:	e026      	b.n	8002718 <u8g2_DrawLine+0x126>
  {
    if ( swapxy == 0 ) 
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d106      	bne.n	80026de <u8g2_DrawLine+0xec>
      u8g2_DrawPixel(u8g2, x, y); 
 80026d0:	8bba      	ldrh	r2, [r7, #28]
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	4619      	mov	r1, r3
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f7ff fefa 	bl	80024d0 <u8g2_DrawPixel>
 80026dc:	e005      	b.n	80026ea <u8g2_DrawLine+0xf8>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 80026de:	8bfa      	ldrh	r2, [r7, #30]
 80026e0:	8bbb      	ldrh	r3, [r7, #28]
 80026e2:	4619      	mov	r1, r3
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f7ff fef3 	bl	80024d0 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 80026ea:	8afa      	ldrh	r2, [r7, #22]
 80026ec:	8b3b      	ldrh	r3, [r7, #24]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	82fb      	strh	r3, [r7, #22]
    if ( err < 0 ) 
 80026f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	da08      	bge.n	8002712 <u8g2_DrawLine+0x120>
    {
      y += (u8g2_uint_t)ystep;
 8002700:	8aba      	ldrh	r2, [r7, #20]
 8002702:	8bbb      	ldrh	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	83bb      	strh	r3, [r7, #28]
      err += (u8g2_uint_t)dx;
 8002708:	8afa      	ldrh	r2, [r7, #22]
 800270a:	8b7b      	ldrh	r3, [r7, #26]
 800270c:	4413      	add	r3, r2
 800270e:	b29b      	uxth	r3, r3
 8002710:	82fb      	strh	r3, [r7, #22]
  for( x = x1; x <= x2; x++ )
 8002712:	8bfb      	ldrh	r3, [r7, #30]
 8002714:	3301      	adds	r3, #1
 8002716:	83fb      	strh	r3, [r7, #30]
 8002718:	8bfa      	ldrh	r2, [r7, #30]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	429a      	cmp	r2, r3
 800271e:	d9d4      	bls.n	80026ca <u8g2_DrawLine+0xd8>
    }
  }
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b089      	sub	sp, #36	; 0x24
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	4608      	mov	r0, r1
 8002734:	4611      	mov	r1, r2
 8002736:	461a      	mov	r2, r3
 8002738:	4603      	mov	r3, r0
 800273a:	817b      	strh	r3, [r7, #10]
 800273c:	460b      	mov	r3, r1
 800273e:	813b      	strh	r3, [r7, #8]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002748:	7efb      	ldrb	r3, [r7, #27]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002754:	7e3a      	ldrb	r2, [r7, #24]
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800276c:	2b01      	cmp	r3, #1
 800276e:	d801      	bhi.n	8002774 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002770:	7e3b      	ldrb	r3, [r7, #24]
 8002772:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800277a:	2b01      	cmp	r3, #1
 800277c:	d001      	beq.n	8002782 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800277e:	7e3b      	ldrb	r3, [r7, #24]
 8002780:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002782:	893b      	ldrh	r3, [r7, #8]
 8002784:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	f023 0307 	bic.w	r3, r3, #7
 800278c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	7c1b      	ldrb	r3, [r3, #16]
 8002794:	b29b      	uxth	r3, r3
 8002796:	8afa      	ldrh	r2, [r7, #22]
 8002798:	fb12 f303 	smulbb	r3, r2, r3
 800279c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a2:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 80027a4:	8afb      	ldrh	r3, [r7, #22]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	4413      	add	r3, r2
 80027aa:	61fb      	str	r3, [r7, #28]
  ptr += x;
 80027ac:	897b      	ldrh	r3, [r7, #10]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80027b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d117      	bne.n	80027ec <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	781a      	ldrb	r2, [r3, #0]
 80027c0:	7ebb      	ldrb	r3, [r7, #26]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	7e7b      	ldrb	r3, [r7, #25]
 80027d0:	4053      	eors	r3, r2
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	3301      	adds	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
	len--;
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1e8      	bne.n	80027bc <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80027ea:	e038      	b.n	800285e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	7ebb      	ldrb	r3, [r7, #26]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	7e7b      	ldrb	r3, [r7, #25]
 8002800:	4053      	eors	r3, r2
 8002802:	b2da      	uxtb	r2, r3
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002808:	7efb      	ldrb	r3, [r7, #27]
 800280a:	3301      	adds	r3, #1
 800280c:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 800280e:	7efb      	ldrb	r3, [r7, #27]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	76fb      	strb	r3, [r7, #27]
      len--;
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	3b01      	subs	r3, #1
 800281a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800281c:	7efb      	ldrb	r3, [r7, #27]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d114      	bne.n	800284c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002826:	461a      	mov	r2, r3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	4413      	add	r3, r2
 800282c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002834:	2b01      	cmp	r3, #1
 8002836:	d801      	bhi.n	800283c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002842:	2b01      	cmp	r3, #1
 8002844:	d008      	beq.n	8002858 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002846:	2301      	movs	r3, #1
 8002848:	767b      	strb	r3, [r7, #25]
 800284a:	e005      	b.n	8002858 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800284c:	7ebb      	ldrb	r3, [r7, #26]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002852:	7e7b      	ldrb	r3, [r7, #25]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1c6      	bne.n	80027ec <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800285e:	bf00      	nop
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002888:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ffad 	bl	800286a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff fcb9 	bl	8002288 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800293a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	89fa      	ldrh	r2, [r7, #14]
 8002946:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	7c1b      	ldrb	r3, [r3, #16]
 800294c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002960:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	89fa      	ldrh	r2, [r7, #14]
 800296c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002974:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800297e:	4413      	add	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	7c52      	ldrb	r2, [r2, #17]
 8002984:	4293      	cmp	r3, r2
 8002986:	dd08      	ble.n	800299a <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	7c5b      	ldrb	r3, [r3, #17]
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002994:	b29b      	uxth	r3, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800299a:	89fb      	ldrh	r3, [r7, #14]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	4413      	add	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	8a9a      	ldrh	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	8ada      	ldrh	r2, [r3, #22]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fdc5 	bl	800259c <u8g2_IsIntersection>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002a20:	e03b      	b.n	8002a9a <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d205      	bcs.n	8002a46 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d905      	bls.n	8002a62 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d205      	bcs.n	8002a7e <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d905      	bls.n	8002a9a <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ff3b 	bl	8002926 <u8g2_update_dimension_common>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff7b 	bl	80029e8 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af02      	add	r7, sp, #8
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	4608      	mov	r0, r1
 8002b04:	4611      	mov	r1, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4603      	mov	r3, r0
 8002b0a:	817b      	strh	r3, [r7, #10]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	813b      	strh	r3, [r7, #8]
 8002b10:	4613      	mov	r3, r2
 8002b12:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002b14:	88f8      	ldrh	r0, [r7, #6]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	8979      	ldrh	r1, [r7, #10]
 8002b1a:	7e3b      	ldrb	r3, [r7, #24]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4603      	mov	r3, r0
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f7ff fc29 	bl	8002378 <u8g2_draw_hv_line_2dir>
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <u8x8_stm32_gpio_and_delay>:
/* I2C Interface */
I2C_HandleTypeDef *U8G2_I2C_HANDLE;


uint8_t u8x8_stm32_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	72fb      	strb	r3, [r7, #11]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	72bb      	strb	r3, [r7, #10]
    /* STM32 supports HW SPI, Remove unused cases like U8X8_MSG_DELAY_XXX & U8X8_MSG_GPIO_XXX */
    switch (msg)
 8002b40:	7afb      	ldrb	r3, [r7, #11]
 8002b42:	2b28      	cmp	r3, #40	; 0x28
 8002b44:	d006      	beq.n	8002b54 <u8x8_stm32_gpio_and_delay+0x26>
 8002b46:	2b29      	cmp	r3, #41	; 0x29
 8002b48:	d105      	bne.n	8002b56 <u8x8_stm32_gpio_and_delay+0x28>
        case U8X8_MSG_GPIO_AND_DELAY_INIT:
            /* Insert codes for initialization */
            break;
        case U8X8_MSG_DELAY_MILLI:
            /* ms Delay */
            osDelay(arg_int);
 8002b4a:	7abb      	ldrb	r3, [r7, #10]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f004 fb1b 	bl	8007188 <osDelay>
            break;
 8002b52:	e000      	b.n	8002b56 <u8x8_stm32_gpio_and_delay+0x28>
            break;
 8002b54:	bf00      	nop
            /* Insert codes for RST pin control */
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, arg_int);
            break;
#endif
    }
    return 1;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <u8x8_byte_stm32_hw_i2c>:
#endif

#ifdef USE_I2C_INTERFACE

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	72fb      	strb	r3, [r7, #11]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	72bb      	strb	r3, [r7, #10]
    /* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
    static uint8_t buffer[32];
    static uint8_t buf_idx;
    uint8_t *data;

    switch (msg)
 8002b72:	7afb      	ldrb	r3, [r7, #11]
 8002b74:	3b14      	subs	r3, #20
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d851      	bhi.n	8002c1e <u8x8_byte_stm32_hw_i2c+0xbe>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <u8x8_byte_stm32_hw_i2c+0x20>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002c23 	.word	0x08002c23
 8002b84:	08002c1f 	.word	0x08002c1f
 8002b88:	08002c1f 	.word	0x08002c1f
 8002b8c:	08002bb5 	.word	0x08002bb5
 8002b90:	08002be5 	.word	0x08002be5
 8002b94:	08002bed 	.word	0x08002bed
 8002b98:	08002c1f 	.word	0x08002c1f
 8002b9c:	08002c1f 	.word	0x08002c1f
 8002ba0:	08002c1f 	.word	0x08002c1f
 8002ba4:	08002c1f 	.word	0x08002c1f
 8002ba8:	08002c1f 	.word	0x08002c1f
 8002bac:	08002c1f 	.word	0x08002c1f
 8002bb0:	08002c23 	.word	0x08002c23
    {
        case U8X8_MSG_BYTE_SEND:
            data = (uint8_t *) arg_ptr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
            while (arg_int > 0)
 8002bb8:	e010      	b.n	8002bdc <u8x8_byte_stm32_hw_i2c+0x7c>
            {
                buffer[buf_idx++] = *data;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <u8x8_byte_stm32_hw_i2c+0xd0>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	b2d1      	uxtb	r1, r2
 8002bc2:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <u8x8_byte_stm32_hw_i2c+0xd0>)
 8002bc4:	7011      	strb	r1, [r2, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	7819      	ldrb	r1, [r3, #0]
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <u8x8_byte_stm32_hw_i2c+0xd4>)
 8002bce:	5499      	strb	r1, [r3, r2]
                data++;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
                arg_int--;
 8002bd6:	7abb      	ldrb	r3, [r7, #10]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	72bb      	strb	r3, [r7, #10]
            while (arg_int > 0)
 8002bdc:	7abb      	ldrb	r3, [r7, #10]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1eb      	bne.n	8002bba <u8x8_byte_stm32_hw_i2c+0x5a>
            }
            break;
 8002be2:	e01f      	b.n	8002c24 <u8x8_byte_stm32_hw_i2c+0xc4>
            /* add your custom code to init i2c subsystem */
            break;
        case U8X8_MSG_BYTE_SET_DC:
            break;
        case U8X8_MSG_BYTE_START_TRANSFER:
            buf_idx = 0;
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <u8x8_byte_stm32_hw_i2c+0xd0>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
            break;
 8002bea:	e01b      	b.n	8002c24 <u8x8_byte_stm32_hw_i2c+0xc4>
        case U8X8_MSG_BYTE_END_TRANSFER:
            if (U8G2_I2C_HANDLE->Instance == I2C_SOFT)
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <u8x8_byte_stm32_hw_i2c+0xd8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d107      	bne.n	8002c06 <u8x8_byte_stm32_hw_i2c+0xa6>
                SOFT_I2C_Master_Transmit((DEVICE_ADDRESS << 1), buffer, buf_idx);
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <u8x8_byte_stm32_hw_i2c+0xd0>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	490d      	ldr	r1, [pc, #52]	; (8002c34 <u8x8_byte_stm32_hw_i2c+0xd4>)
 8002bfe:	2078      	movs	r0, #120	; 0x78
 8002c00:	f001 fb9e 	bl	8004340 <SOFT_I2C_Master_Transmit>
            else
                HAL_I2C_Master_Transmit(U8G2_I2C_HANDLE, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT);
            break;
 8002c04:	e00e      	b.n	8002c24 <u8x8_byte_stm32_hw_i2c+0xc4>
                HAL_I2C_Master_Transmit(U8G2_I2C_HANDLE, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT);
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <u8x8_byte_stm32_hw_i2c+0xd8>)
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <u8x8_byte_stm32_hw_i2c+0xd0>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2264      	movs	r2, #100	; 0x64
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <u8x8_byte_stm32_hw_i2c+0xd4>)
 8002c16:	2178      	movs	r1, #120	; 0x78
 8002c18:	f002 fb6c 	bl	80052f4 <HAL_I2C_Master_Transmit>
            break;
 8002c1c:	e002      	b.n	8002c24 <u8x8_byte_stm32_hw_i2c+0xc4>
        default:
            return 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	e001      	b.n	8002c26 <u8x8_byte_stm32_hw_i2c+0xc6>
            break;
 8002c22:	bf00      	nop
    }
    return 1;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000618 	.word	0x20000618
 8002c34:	2000061c 	.word	0x2000061c
 8002c38:	20000614 	.word	0x20000614

08002c3c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <u8x8_ascii_next+0x18>
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	2b0a      	cmp	r3, #10
 8002c6e:	d102      	bne.n	8002c76 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c74:	e001      	b.n	8002c7a <u8x8_ascii_next+0x22>
  return b;
 8002c76:	78fb      	ldrb	r3, [r7, #3]
 8002c78:	b29b      	uxth	r3, r3
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c86:	b590      	push	{r4, r7, lr}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	607a      	str	r2, [r7, #4]
 8002c92:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	691c      	ldr	r4, [r3, #16]
 8002c98:	7afa      	ldrb	r2, [r7, #11]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2117      	movs	r1, #23
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	47a0      	blx	r4
 8002ca2:	4603      	mov	r3, r0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}

08002cac <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002cb8:	1cfb      	adds	r3, r7, #3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffe1 	bl	8002c86 <u8x8_byte_SendBytes>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002cce:	b590      	push	{r4, r7, lr}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691c      	ldr	r4, [r3, #16]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2118      	movs	r1, #24
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	47a0      	blx	r4
 8002ce4:	4603      	mov	r3, r0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd90      	pop	{r4, r7, pc}

08002cee <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002cee:	b590      	push	{r4, r7, lr}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691c      	ldr	r4, [r3, #16]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2119      	movs	r1, #25
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	47a0      	blx	r4
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd90      	pop	{r4, r7, pc}

08002d0e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002d0e:	b590      	push	{r4, r7, lr}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	460b      	mov	r3, r1
 8002d18:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68dc      	ldr	r4, [r3, #12]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2115      	movs	r1, #21
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	47a0      	blx	r4
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd90      	pop	{r4, r7, pc}

08002d32 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002d32:	b590      	push	{r4, r7, lr}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68dc      	ldr	r4, [r3, #12]
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	2300      	movs	r3, #0
 8002d46:	2116      	movs	r1, #22
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	47a0      	blx	r4
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}

08002d56 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002d56:	b590      	push	{r4, r7, lr}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68dc      	ldr	r4, [r3, #12]
 8002d68:	7afa      	ldrb	r2, [r7, #11]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2117      	movs	r1, #23
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	47a0      	blx	r4
 8002d72:	4603      	mov	r3, r0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd90      	pop	{r4, r7, pc}

08002d7c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68dc      	ldr	r4, [r3, #12]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2118      	movs	r1, #24
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	47a0      	blx	r4
 8002d92:	4603      	mov	r3, r0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd90      	pop	{r4, r7, pc}

08002d9c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68dc      	ldr	r4, [r3, #12]
 8002da8:	2300      	movs	r3, #0
 8002daa:	2200      	movs	r2, #0
 8002dac:	2119      	movs	r1, #25
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	47a0      	blx	r4
 8002db2:	4603      	mov	r3, r0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	73fb      	strb	r3, [r7, #15]
    data++;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2bfe      	cmp	r3, #254	; 0xfe
 8002dd6:	d031      	beq.n	8002e3c <u8x8_cad_SendSequence+0x80>
 8002dd8:	2bfe      	cmp	r3, #254	; 0xfe
 8002dda:	dc3d      	bgt.n	8002e58 <u8x8_cad_SendSequence+0x9c>
 8002ddc:	2b19      	cmp	r3, #25
 8002dde:	dc3b      	bgt.n	8002e58 <u8x8_cad_SendSequence+0x9c>
 8002de0:	2b18      	cmp	r3, #24
 8002de2:	da23      	bge.n	8002e2c <u8x8_cad_SendSequence+0x70>
 8002de4:	2b16      	cmp	r3, #22
 8002de6:	dc02      	bgt.n	8002dee <u8x8_cad_SendSequence+0x32>
 8002de8:	2b15      	cmp	r3, #21
 8002dea:	da03      	bge.n	8002df4 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002dec:	e034      	b.n	8002e58 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002dee:	2b17      	cmp	r3, #23
 8002df0:	d00e      	beq.n	8002e10 <u8x8_cad_SendSequence+0x54>
	return;
 8002df2:	e031      	b.n	8002e58 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68dc      	ldr	r4, [r3, #12]
 8002dfe:	7bba      	ldrb	r2, [r7, #14]
 8002e00:	7bf9      	ldrb	r1, [r7, #15]
 8002e02:	2300      	movs	r3, #0
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	47a0      	blx	r4
	  data++;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	603b      	str	r3, [r7, #0]
	  break;
 8002e0e:	e022      	b.n	8002e56 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002e16:	f107 030e 	add.w	r3, r7, #14
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff99 	bl	8002d56 <u8x8_cad_SendData>
	  data++;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	603b      	str	r3, [r7, #0]
	  break;
 8002e2a:	e014      	b.n	8002e56 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68dc      	ldr	r4, [r3, #12]
 8002e30:	7bf9      	ldrb	r1, [r7, #15]
 8002e32:	2300      	movs	r3, #0
 8002e34:	2200      	movs	r2, #0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	47a0      	blx	r4
	  break;
 8002e3a:	e00c      	b.n	8002e56 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002e42:	7bbb      	ldrb	r3, [r7, #14]
 8002e44:	461a      	mov	r2, r3
 8002e46:	2129      	movs	r1, #41	; 0x29
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fa36 	bl	80032ba <u8x8_gpio_call>
	  data++;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	603b      	str	r3, [r7, #0]
	  break;
 8002e54:	bf00      	nop
    cmd = *data;
 8002e56:	e7b6      	b.n	8002dc6 <u8x8_cad_SendSequence+0xa>
	return;
 8002e58:	bf00      	nop
    }
  }
}
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd90      	pop	{r4, r7, pc}

08002e60 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff ff2d 	bl	8002cce <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002e74:	2140      	movs	r1, #64	; 0x40
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff18 	bl	8002cac <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	691c      	ldr	r4, [r3, #16]
 8002e80:	7afa      	ldrb	r2, [r7, #11]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2117      	movs	r1, #23
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7ff ff2f 	bl	8002cee <u8x8_byte_EndTransfer>
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}

08002e98 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	72fb      	strb	r3, [r7, #11]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	3b14      	subs	r3, #20
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d86e      	bhi.n	8002f90 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f4f 	.word	0x08002f4f
 8002ebc:	08002ed1 	.word	0x08002ed1
 8002ec0:	08002eff 	.word	0x08002eff
 8002ec4:	08002f0b 	.word	0x08002f0b
 8002ec8:	08002f73 	.word	0x08002f73
 8002ecc:	08002f7b 	.word	0x08002f7b
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002ed0:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff08 	bl	8002cee <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fef5 	bl	8002cce <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fee0 	bl	8002cac <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002eec:	7abb      	ldrb	r3, [r7, #10]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fedb 	bl	8002cac <u8x8_byte_SendByte>
      in_transfer = 1;
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002efc:	e04a      	b.n	8002f94 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002efe:	7abb      	ldrb	r3, [r7, #10]
 8002f00:	4619      	mov	r1, r3
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fed2 	bl	8002cac <u8x8_byte_SendByte>
      break;      
 8002f08:	e044      	b.n	8002f94 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8002f0a:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff feeb 	bl	8002cee <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002f1c:	e00a      	b.n	8002f34 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	2118      	movs	r1, #24
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f7ff ff9c 	bl	8002e60 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002f28:	7abb      	ldrb	r3, [r7, #10]
 8002f2a:	3b18      	subs	r3, #24
 8002f2c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	3318      	adds	r3, #24
 8002f32:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002f34:	7abb      	ldrb	r3, [r7, #10]
 8002f36:	2b18      	cmp	r3, #24
 8002f38:	d8f1      	bhi.n	8002f1e <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002f3a:	7abb      	ldrb	r3, [r7, #10]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f7ff ff8d 	bl	8002e60 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002f46:	4b16      	ldr	r3, [pc, #88]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
      break;
 8002f4c:	e022      	b.n	8002f94 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f54:	2bff      	cmp	r3, #255	; 0xff
 8002f56:	d103      	bne.n	8002f60 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2278      	movs	r2, #120	; 0x78
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691c      	ldr	r4, [r3, #16]
 8002f64:	7aba      	ldrb	r2, [r7, #10]
 8002f66:	7af9      	ldrb	r1, [r7, #11]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	47a0      	blx	r4
 8002f6e:	4603      	mov	r3, r0
 8002f70:	e011      	b.n	8002f96 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8002f72:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
      break;
 8002f78:	e00c      	b.n	8002f94 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8002f7a:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff feb3 	bl	8002cee <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002f88:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
      break;
 8002f8e:	e001      	b.n	8002f94 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8002f94:	2301      	movs	r3, #1
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000063c 	.word	0x2000063c

08002fa4 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	72fb      	strb	r3, [r7, #11]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002fb6:	7afb      	ldrb	r3, [r7, #11]
 8002fb8:	3b0b      	subs	r3, #11
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	f200 808a 	bhi.w	80030d4 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8002fc0:	a201      	add	r2, pc, #4	; (adr r2, 8002fc8 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8002fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc6:	bf00      	nop
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	080030d5 	.word	0x080030d5
 8002fd0:	08002ff7 	.word	0x08002ff7
 8002fd4:	08003029 	.word	0x08003029
 8002fd8:	08003049 	.word	0x08003049
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002fdc:	7abb      	ldrb	r3, [r7, #10]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002fe2:	4940      	ldr	r1, [pc, #256]	; (80030e4 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7ff fee9 	bl	8002dbc <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8002fea:	e075      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002fec:	493e      	ldr	r1, [pc, #248]	; (80030e8 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f7ff fee4 	bl	8002dbc <u8x8_cad_SendSequence>
      break;
 8002ff4:	e070      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002ff6:	7abb      	ldrb	r3, [r7, #10]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002ffc:	493b      	ldr	r1, [pc, #236]	; (80030ec <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f7ff fedc 	bl	8002dbc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	7c9a      	ldrb	r2, [r3, #18]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8003010:	e062      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8003012:	4937      	ldr	r1, [pc, #220]	; (80030f0 <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f7ff fed1 	bl	8002dbc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	7cda      	ldrb	r2, [r3, #19]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8003026:	e057      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f7ff fea7 	bl	8002d7c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800302e:	2181      	movs	r1, #129	; 0x81
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fe6c 	bl	8002d0e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8003036:	7abb      	ldrb	r3, [r7, #10]
 8003038:	4619      	mov	r1, r3
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fe79 	bl	8002d32 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7ff feab 	bl	8002d9c <u8x8_cad_EndTransfer>
      break;
 8003046:	e047      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff fe97 	bl	8002d7c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	795b      	ldrb	r3, [r3, #5]
 8003052:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8003054:	7dfb      	ldrb	r3, [r7, #23]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	4413      	add	r3, r2
 8003064:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8003066:	2140      	movs	r1, #64	; 0x40
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff fe50 	bl	8002d0e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f043 0310 	orr.w	r3, r3, #16
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4619      	mov	r1, r3
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff fe46 	bl	8002d0e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	b2db      	uxtb	r3, r3
 800308a:	4619      	mov	r1, r3
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff fe50 	bl	8002d32 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	799b      	ldrb	r3, [r3, #6]
 8003096:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f7ff fe47 	bl	8002d32 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80030b0:	7dbb      	ldrb	r3, [r7, #22]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4619      	mov	r1, r3
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7ff fe4b 	bl	8002d56 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80030c0:	7abb      	ldrb	r3, [r7, #10]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80030c6:	7abb      	ldrb	r3, [r7, #10]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1eb      	bne.n	80030a4 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7ff fe65 	bl	8002d9c <u8x8_cad_EndTransfer>
      break;
 80030d2:	e001      	b.n	80030d8 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e000      	b.n	80030da <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	08010b6c 	.word	0x08010b6c
 80030e8:	08010b74 	.word	0x08010b74
 80030ec:	08010b7c 	.word	0x08010b7c
 80030f0:	08010b84 	.word	0x08010b84

080030f4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	607b      	str	r3, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	72fb      	strb	r3, [r7, #11]
 8003102:	4613      	mov	r3, r2
 8003104:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8003106:	7aba      	ldrb	r2, [r7, #10]
 8003108:	7af9      	ldrb	r1, [r7, #11]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff49 	bl	8002fa4 <u8x8_d_ssd1306_sh1106_generic>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <u8x8_d_ssd1306_128x64_noname+0x28>
    return 1;
 8003118:	2301      	movs	r3, #1
 800311a:	e014      	b.n	8003146 <u8x8_d_ssd1306_128x64_noname+0x52>
  
  switch(msg)
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	2b09      	cmp	r3, #9
 8003120:	d009      	beq.n	8003136 <u8x8_d_ssd1306_128x64_noname+0x42>
 8003122:	2b0a      	cmp	r3, #10
 8003124:	d10c      	bne.n	8003140 <u8x8_d_ssd1306_128x64_noname+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f82a 	bl	8003180 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800312c:	4908      	ldr	r1, [pc, #32]	; (8003150 <u8x8_d_ssd1306_128x64_noname+0x5c>)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fe44 	bl	8002dbc <u8x8_cad_SendSequence>
      break;
 8003134:	e006      	b.n	8003144 <u8x8_d_ssd1306_128x64_noname+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8003136:	4907      	ldr	r1, [pc, #28]	; (8003154 <u8x8_d_ssd1306_128x64_noname+0x60>)
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f80d 	bl	8003158 <u8x8_d_helper_display_setup_memory>
      break;
 800313e:	e001      	b.n	8003144 <u8x8_d_ssd1306_128x64_noname+0x50>
    default:
      return 0;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <u8x8_d_ssd1306_128x64_noname+0x52>
  }
  return 1;
 8003144:	2301      	movs	r3, #1
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	08010b34 	.word	0x08010b34
 8003154:	08010b8c 	.word	0x08010b8c

08003158 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	7c9a      	ldrb	r2, [r3, #18]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003180:	b590      	push	{r4, r7, lr}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695c      	ldr	r4, [r3, #20]
 800318c:	2300      	movs	r3, #0
 800318e:	2200      	movs	r2, #0
 8003190:	2128      	movs	r1, #40	; 0x28
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68dc      	ldr	r4, [r3, #12]
 800319a:	2300      	movs	r3, #0
 800319c:	2200      	movs	r2, #0
 800319e:	2114      	movs	r1, #20
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80031a4:	2201      	movs	r2, #1
 80031a6:	214b      	movs	r1, #75	; 0x4b
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f886 	bl	80032ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	791b      	ldrb	r3, [r3, #4]
 80031b4:	461a      	mov	r2, r3
 80031b6:	2129      	movs	r1, #41	; 0x29
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f87e 	bl	80032ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	214b      	movs	r1, #75	; 0x4b
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f879 	bl	80032ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	791b      	ldrb	r3, [r3, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	2129      	movs	r1, #41	; 0x29
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f871 	bl	80032ba <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80031d8:	2201      	movs	r2, #1
 80031da:	214b      	movs	r1, #75	; 0x4b
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f86c 	bl	80032ba <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	795b      	ldrb	r3, [r3, #5]
 80031e8:	461a      	mov	r2, r3
 80031ea:	2129      	movs	r1, #41	; 0x29
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f864 	bl	80032ba <u8x8_gpio_call>
}    
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}

080031fa <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80031fa:	b590      	push	{r4, r7, lr}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	4608      	mov	r0, r1
 8003204:	4611      	mov	r1, r2
 8003206:	461a      	mov	r2, r3
 8003208:	4603      	mov	r3, r0
 800320a:	70fb      	strb	r3, [r7, #3]
 800320c:	460b      	mov	r3, r1
 800320e:	70bb      	strb	r3, [r7, #2]
 8003210:	4613      	mov	r3, r2
 8003212:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003218:	78bb      	ldrb	r3, [r7, #2]
 800321a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689c      	ldr	r4, [r3, #8]
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	2201      	movs	r2, #1
 800322e:	210f      	movs	r1, #15
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	47a0      	blx	r4
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}

0800323e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800323e:	b590      	push	{r4, r7, lr}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689c      	ldr	r4, [r3, #8]
 800324a:	2300      	movs	r3, #0
 800324c:	2200      	movs	r2, #0
 800324e:	2109      	movs	r1, #9
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	47a0      	blx	r4
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bd90      	pop	{r4, r7, pc}

0800325c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689c      	ldr	r4, [r3, #8]
 8003268:	2300      	movs	r3, #0
 800326a:	2200      	movs	r2, #0
 800326c:	210a      	movs	r1, #10
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	47a0      	blx	r4
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}

0800327a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800327a:	b590      	push	{r4, r7, lr}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689c      	ldr	r4, [r3, #8]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	2300      	movs	r3, #0
 800328e:	210b      	movs	r1, #11
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	47a0      	blx	r4
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}

0800329c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689c      	ldr	r4, [r3, #8]
 80032a8:	2300      	movs	r3, #0
 80032aa:	2200      	movs	r2, #0
 80032ac:	2110      	movs	r1, #16
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	47a0      	blx	r4
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd90      	pop	{r4, r7, pc}

080032ba <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80032ba:	b590      	push	{r4, r7, lr}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
 80032c2:	460b      	mov	r3, r1
 80032c4:	70fb      	strb	r3, [r7, #3]
 80032c6:	4613      	mov	r3, r2
 80032c8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695c      	ldr	r4, [r3, #20]
 80032ce:	78ba      	ldrb	r2, [r7, #2]
 80032d0:	78f9      	ldrb	r1, [r7, #3]
 80032d2:	2300      	movs	r3, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	47a0      	blx	r4
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}

080032e0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	72fb      	strb	r3, [r7, #11]
 80032ee:	4613      	mov	r3, r2
 80032f0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a11      	ldr	r2, [pc, #68]	; (8003358 <u8x8_SetupDefaults+0x58>)
 8003312:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <u8x8_SetupDefaults+0x58>)
 8003318:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <u8x8_SetupDefaults+0x58>)
 800331e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0d      	ldr	r2, [pc, #52]	; (8003358 <u8x8_SetupDefaults+0x58>)
 8003324:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	22ff      	movs	r2, #255	; 0xff
 8003348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	080032e1 	.word	0x080032e1

0800335c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff ffc8 	bl	8003300 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff ff58 	bl	800323e <u8x8_SetupMemory>
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <_ZN7MPU6050C1EP17I2C_HandleTypeDefh>:
 * @param address I2C address, uses default I2C address if none is specified
 * @see MPU6050_DEFAULT_ADDRESS
 * @see MPU6050_ADDRESS_AD0_LOW
 * @see MPU6050_ADDRESS_AD0_HIGH
 */
MPU6050::MPU6050(I2C_HandleTypeDef *_hi2c, uint8_t address) : hi2c(_hi2c), devAddr(address)
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	4613      	mov	r3, r2
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	79fa      	ldrb	r2, [r7, #7]
 80033b0:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
{
    I2Cdev_init(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa8d 	bl	80038d8 <_Z11I2Cdev_initP17I2C_HandleTypeDef>

    InitFilter();
 80033be:	ed9f 1a07 	vldr	s2, [pc, #28]	; 80033dc <_ZN7MPU6050C1EP17I2C_HandleTypeDefh+0x44>
 80033c2:	eddf 0a07 	vldr	s1, [pc, #28]	; 80033e0 <_ZN7MPU6050C1EP17I2C_HandleTypeDefh+0x48>
 80033c6:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80033e4 <_ZN7MPU6050C1EP17I2C_HandleTypeDefh+0x4c>
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f000 fa4e 	bl	800386c <_ZN7MPU605010InitFilterEfff>
}
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	42480000 	.word	0x42480000
 80033e0:	42c80000 	.word	0x42c80000
 80033e4:	43480000 	.word	0x43480000

080033e8 <_ZN7MPU60504InitEv>:
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::Init()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80033f0:	2101      	movs	r1, #1
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f92e 	bl	8003654 <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80033f8:	2100      	movs	r1, #0
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f836 	bl	800346c <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 8003400:	2100      	movs	r1, #0
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f872 	bl	80034ec <_ZN7MPU605022setFullScaleAccelRangeEh>
    setDLPFMode(MPU6050_DLPF_BW_98);
 8003408:	2102      	movs	r1, #2
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f819 	bl	8003442 <_ZN7MPU605011setDLPFModeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 8003410:	2100      	movs	r1, #0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f90c 	bl	8003630 <_ZN7MPU605015setSleepEnabledEb>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <_ZN7MPU605014testConnectionEv>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection()
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
    return getDeviceID() == 0x34;
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f927 	bl	800367c <_ZN7MPU605011getDeviceIDEv>
 800342e:	4603      	mov	r3, r0
 8003430:	2b34      	cmp	r3, #52	; 0x34
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <_ZN7MPU605011setDLPFModeEh>:
 * @see MPU6050_RA_CONFIG
 * @see MPU6050_CFG_DLPF_CFG_BIT
 * @see MPU6050_CFG_DLPF_CFG_LENGTH
 */
void MPU6050::setDLPFMode(uint8_t mode)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af02      	add	r7, sp, #8
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	460b      	mov	r3, r1
 800344c:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	2303      	movs	r3, #3
 800345a:	2202      	movs	r2, #2
 800345c:	211a      	movs	r1, #26
 800345e:	f000 fb25 	bl	8003aac <_Z16I2Cdev_writeBitshhhhh>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	2302      	movs	r3, #2
 8003484:	2204      	movs	r2, #4
 8003486:	211b      	movs	r1, #27
 8003488:	f000 fb10 	bl	8003aac <_Z16I2Cdev_writeBitshhhhh>
                     range);

    switch (range)
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	2b03      	cmp	r3, #3
 8003490:	d81e      	bhi.n	80034d0 <_ZN7MPU605021setFullScaleGyroRangeEh+0x64>
 8003492:	a201      	add	r2, pc, #4	; (adr r2, 8003498 <_ZN7MPU605021setFullScaleGyroRangeEh+0x2c>)
 8003494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003498:	080034a9 	.word	0x080034a9
 800349c:	080034b3 	.word	0x080034b3
 80034a0:	080034bd 	.word	0x080034bd
 80034a4:	080034c7 	.word	0x080034c7
    {
        case MPU6050_GYRO_FS_250:
            gyroRangeScale = 32768 / 250.0;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <_ZN7MPU605021setFullScaleGyroRangeEh+0x70>)
 80034ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            break;
 80034b0:	e00f      	b.n	80034d2 <_ZN7MPU605021setFullScaleGyroRangeEh+0x66>
        case MPU6050_GYRO_FS_500:
            gyroRangeScale = 32768 / 500.0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <_ZN7MPU605021setFullScaleGyroRangeEh+0x74>)
 80034b6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            break;
 80034ba:	e00a      	b.n	80034d2 <_ZN7MPU605021setFullScaleGyroRangeEh+0x66>
        case MPU6050_GYRO_FS_1000:
            gyroRangeScale = 32768 / 1000.0;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <_ZN7MPU605021setFullScaleGyroRangeEh+0x78>)
 80034c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            break;
 80034c4:	e005      	b.n	80034d2 <_ZN7MPU605021setFullScaleGyroRangeEh+0x66>
        case MPU6050_GYRO_FS_2000:
            gyroRangeScale = 32768 / 2000.0;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <_ZN7MPU605021setFullScaleGyroRangeEh+0x7c>)
 80034ca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
            break;
 80034ce:	e000      	b.n	80034d2 <_ZN7MPU605021setFullScaleGyroRangeEh+0x66>
        default:
            break;
 80034d0:	bf00      	nop
    }
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	4303126f 	.word	0x4303126f
 80034e0:	4283126f 	.word	0x4283126f
 80034e4:	4203126f 	.word	0x4203126f
 80034e8:	4183126f 	.word	0x4183126f

080034ec <_ZN7MPU605022setFullScaleAccelRangeEh>:
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	2302      	movs	r3, #2
 8003504:	2204      	movs	r2, #4
 8003506:	211c      	movs	r1, #28
 8003508:	f000 fad0 	bl	8003aac <_Z16I2Cdev_writeBitshhhhh>
                     range);

    switch (range)
 800350c:	78fb      	ldrb	r3, [r7, #3]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d822      	bhi.n	8003558 <_ZN7MPU605022setFullScaleAccelRangeEh+0x6c>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <_ZN7MPU605022setFullScaleAccelRangeEh+0x2c>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	08003535 	.word	0x08003535
 8003520:	08003541 	.word	0x08003541
 8003524:	0800354d 	.word	0x0800354d
    {
        case MPU6050_ACCEL_FS_2:
            accRangeScale = 32768 / 2.0;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800352e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            break;
 8003532:	e012      	b.n	800355a <_ZN7MPU605022setFullScaleAccelRangeEh+0x6e>
        case MPU6050_ACCEL_FS_4:
            accRangeScale = 32768 / 4.0;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800353a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            break;
 800353e:	e00c      	b.n	800355a <_ZN7MPU605022setFullScaleAccelRangeEh+0x6e>
        case MPU6050_ACCEL_FS_8:
            accRangeScale = 32768 / 8.0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8003546:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            break;
 800354a:	e006      	b.n	800355a <_ZN7MPU605022setFullScaleAccelRangeEh+0x6e>
        case MPU6050_ACCEL_FS_16:
            accRangeScale = 32768 / 16.0;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8003552:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
            break;
 8003556:	e000      	b.n	800355a <_ZN7MPU605022setFullScaleAccelRangeEh+0x6e>
        default:
            break;
 8003558:	bf00      	nop
    }
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop

08003564 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>:
 * @see getAcceleration()
 * @see getRotation()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
void MPU6050::getMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
    I2Cdev_readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f203 1309 	addw	r3, r3, #265	; 0x109
 800357e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003582:	9200      	str	r2, [sp, #0]
 8003584:	220e      	movs	r2, #14
 8003586:	213b      	movs	r1, #59	; 0x3b
 8003588:	f000 fa12 	bl	80039b0 <_Z16I2Cdev_readByteshhhPht>
    *ax = (((int16_t) buffer[0]) << 8) | buffer[1];
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	b21a      	sxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800359c:	b21b      	sxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	801a      	strh	r2, [r3, #0]
    *ay = (((int16_t) buffer[2]) << 8) | buffer[3];
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	b21a      	sxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	801a      	strh	r2, [r3, #0]
    *az = (((int16_t) buffer[4]) << 8) | buffer[5];
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 80035d0:	b21b      	sxth	r3, r3
 80035d2:	4313      	orrs	r3, r2
 80035d4:	b21a      	sxth	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	801a      	strh	r2, [r3, #0]
    *gx = (((int16_t) buffer[8]) << 8) | buffer[9];
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	b21a      	sxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
 80035ea:	b21b      	sxth	r3, r3
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	801a      	strh	r2, [r3, #0]
    *gy = (((int16_t) buffer[10]) << 8) | buffer[11];
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	b21a      	sxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003604:	b21b      	sxth	r3, r3
 8003606:	4313      	orrs	r3, r2
 8003608:	b21a      	sxth	r2, r3
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	801a      	strh	r2, [r3, #0]
    *gz = (((int16_t) buffer[12]) << 8) | buffer[13];
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	b21a      	sxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 800361e:	b21b      	sxth	r3, r3
 8003620:	4313      	orrs	r3, r2
 8003622:	b21a      	sxth	r2, r3
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	801a      	strh	r2, [r3, #0]
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_ZN7MPU605015setSleepEnabledEb>:
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	2206      	movs	r2, #6
 8003646:	216b      	movs	r1, #107	; 0x6b
 8003648:	f000 f9f0 	bl	8003a2c <_Z15I2Cdev_writeBithhhh>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZN7MPU605014setClockSourceEh>:
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	70fb      	strb	r3, [r7, #3]
    I2Cdev_writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2303      	movs	r3, #3
 800366c:	2202      	movs	r2, #2
 800366e:	216b      	movs	r1, #107	; 0x6b
 8003670:	f000 fa1c 	bl	8003aac <_Z16I2Cdev_writeBitshhhhh>
}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_ZN7MPU605011getDeviceIDEv>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID()
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af02      	add	r7, sp, #8
 8003682:	6078      	str	r0, [r7, #4]
    I2Cdev_readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 0108 	ldrb.w	r0, [r3, #264]	; 0x108
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f203 1309 	addw	r3, r3, #265	; 0x109
 8003690:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2306      	movs	r3, #6
 800369a:	2206      	movs	r2, #6
 800369c:	2175      	movs	r1, #117	; 0x75
 800369e:	f000 f92b 	bl	80038f8 <_Z15I2Cdev_readBitshhhhPht>
    return buffer[0];
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <_ZN7MPU60506UpdateEb>:
{
    I2Cdev_writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);
}

void MPU6050::Update(bool _useFilter)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	70fb      	strb	r3, [r7, #3]
    getMotion6(&dataRaw.ax, &dataRaw.ay, &dataRaw.az, &dataRaw.gx, &dataRaw.gy, &dataRaw.gz);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f103 04e6 	add.w	r4, r3, #230	; 0xe6
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f103 05e8 	add.w	r5, r3, #232	; 0xe8
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	33ea      	adds	r3, #234	; 0xea
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	32ec      	adds	r2, #236	; 0xec
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	31ee      	adds	r1, #238	; 0xee
 80036da:	9102      	str	r1, [sp, #8]
 80036dc:	9201      	str	r2, [sp, #4]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	462b      	mov	r3, r5
 80036e2:	4622      	mov	r2, r4
 80036e4:	4601      	mov	r1, r0
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff ff3c 	bl	8003564 <_ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_>
    data.ax = (float) dataRaw.ax / accRangeScale;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f9b3 30e4 	ldrsh.w	r3, [r3, #228]	; 0xe4
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8003700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    data.ay = (float) dataRaw.ay / accRangeScale;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f9b3 30e6 	ldrsh.w	r3, [r3, #230]	; 0xe6
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800371e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
    data.az = (float) dataRaw.az / accRangeScale;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f9b3 30e8 	ldrsh.w	r3, [r3, #232]	; 0xe8
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 800373c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
    data.gx = (float) dataRaw.gx / gyroRangeScale;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f9b3 30ea 	ldrsh.w	r3, [r3, #234]	; 0xea
 800374c:	ee07 3a90 	vmov	s15, r3
 8003750:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 800375a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
    data.gy = (float) dataRaw.gy / gyroRangeScale;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
    data.gz = (float) dataRaw.gz / gyroRangeScale;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8003796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104

    if (_useFilter)
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d05e      	beq.n	8003864 <_ZN7MPU60506UpdateEb+0x1b4>
    {
        data.ax = biquadFilterApply(&accFilterLPF[0], data.ax);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	edd3 7a3c 	vldr	s15, [r3, #240]	; 0xf0
 80037b2:	eeb0 0a67 	vmov.f32	s0, s15
 80037b6:	4610      	mov	r0, r2
 80037b8:	f000 fb4e 	bl	8003e58 <biquadFilterApply>
 80037bc:	eef0 7a40 	vmov.f32	s15, s0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
        data.ay = biquadFilterApply(&accFilterLPF[1], data.ay);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f103 0294 	add.w	r2, r3, #148	; 0x94
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80037d2:	eeb0 0a67 	vmov.f32	s0, s15
 80037d6:	4610      	mov	r0, r2
 80037d8:	f000 fb3e 	bl	8003e58 <biquadFilterApply>
 80037dc:	eef0 7a40 	vmov.f32	s15, s0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
        data.az = biquadFilterApply(&accFilterLPF[2], data.az);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 80037f2:	eeb0 0a67 	vmov.f32	s0, s15
 80037f6:	4610      	mov	r0, r2
 80037f8:	f000 fb2e 	bl	8003e58 <biquadFilterApply>
 80037fc:	eef0 7a40 	vmov.f32	s15, s0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	edc3 7a3e 	vstr	s15, [r3, #248]	; 0xf8
        data.gx = biquadFilterApply(&gyroFilterLPF[0], data.gx);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1d1a      	adds	r2, r3, #4
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8003810:	eeb0 0a67 	vmov.f32	s0, s15
 8003814:	4610      	mov	r0, r2
 8003816:	f000 fb1f 	bl	8003e58 <biquadFilterApply>
 800381a:	eef0 7a40 	vmov.f32	s15, s0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	edc3 7a3f 	vstr	s15, [r3, #252]	; 0xfc
        data.gy = biquadFilterApply(&gyroFilterLPF[1], data.gy);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	4610      	mov	r0, r2
 8003836:	f000 fb0f 	bl	8003e58 <biquadFilterApply>
 800383a:	eef0 7a40 	vmov.f32	s15, s0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        data.gz = biquadFilterApply(&gyroFilterLPF[2], data.gz);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8003850:	eeb0 0a67 	vmov.f32	s0, s15
 8003854:	4610      	mov	r0, r2
 8003856:	f000 faff 	bl	8003e58 <biquadFilterApply>
 800385a:	eef0 7a40 	vmov.f32	s15, s0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	edc3 7a41 	vstr	s15, [r3, #260]	; 0x104
    }
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bdb0      	pop	{r4, r5, r7, pc}

0800386c <_ZN7MPU605010InitFilterEfff>:
void MPU6050::InitFilter(float _imuUpdateRate,
                         float _gyroFilterCutoffFreq,
                         float _accFilterCutoffFreq)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	ed87 0a02 	vstr	s0, [r7, #8]
 8003878:	edc7 0a01 	vstr	s1, [r7, #4]
 800387c:	ed87 1a00 	vstr	s2, [r7]

    for (int i = 0; i < 3; i++)
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2b02      	cmp	r3, #2
 8003888:	dc21      	bgt.n	80038ce <_ZN7MPU605010InitFilterEfff+0x62>
    {
        biquadFilterInitLPF(&gyroFilterLPF[i], _imuUpdateRate, _gyroFilterCutoffFreq);
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	3304      	adds	r3, #4
 800389a:	edd7 0a01 	vldr	s1, [r7, #4]
 800389e:	ed97 0a02 	vldr	s0, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9ac 	bl	8003c00 <biquadFilterInitLPF>
        biquadFilterInitLPF(&accFilterLPF[i], _imuUpdateRate, _accFilterCutoffFreq);
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3370      	adds	r3, #112	; 0x70
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	edd7 0a00 	vldr	s1, [r7]
 80038bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 f99d 	bl	8003c00 <biquadFilterInitLPF>
    for (int i = 0; i < 3; i++)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e7da      	b.n	8003884 <_ZN7MPU605010InitFilterEfff+0x18>
    }
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <_Z11I2Cdev_initP17I2C_HandleTypeDef>:

/** Sets device handle to use for communications
 * You can call this function and set any other device at any moment
 */
void I2Cdev_init(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    I2Cdev_hi2c = hi2c;
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <_Z11I2Cdev_initP17I2C_HandleTypeDef+0x1c>)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6013      	str	r3, [r2, #0]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000640 	.word	0x20000640

080038f8 <_Z15I2Cdev_readBitshhhhPht>:
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t
I2Cdev_readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80038f8:	b590      	push	{r4, r7, lr}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	71fb      	strb	r3, [r7, #7]
 800390a:	4603      	mov	r3, r0
 800390c:	71bb      	strb	r3, [r7, #6]
 800390e:	460b      	mov	r3, r1
 8003910:	717b      	strb	r3, [r7, #5]
 8003912:	4613      	mov	r3, r2
 8003914:	713b      	strb	r3, [r7, #4]
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = I2Cdev_readByte(devAddr, regAddr, &b, timeout)) != 0)
 8003916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003918:	f107 020d 	add.w	r2, r7, #13
 800391c:	79b9      	ldrb	r1, [r7, #6]
 800391e:	79f8      	ldrb	r0, [r7, #7]
 8003920:	f000 f82d 	bl	800397e <_Z15I2Cdev_readBytehhPht>
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01d      	beq.n	8003974 <_Z15I2Cdev_readBitshhhhPht+0x7c>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8003938:	793b      	ldrb	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	7979      	ldrb	r1, [r7, #5]
 8003944:	793b      	ldrb	r3, [r7, #4]
 8003946:	1acb      	subs	r3, r1, r3
 8003948:	3301      	adds	r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	73bb      	strb	r3, [r7, #14]
        b &= mask;
 8003950:	7b7a      	ldrb	r2, [r7, #13]
 8003952:	7bbb      	ldrb	r3, [r7, #14]
 8003954:	4013      	ands	r3, r2
 8003956:	b2db      	uxtb	r3, r3
 8003958:	737b      	strb	r3, [r7, #13]
        b >>= (bitStart - length + 1);
 800395a:	7b7b      	ldrb	r3, [r7, #13]
 800395c:	4619      	mov	r1, r3
 800395e:	797a      	ldrb	r2, [r7, #5]
 8003960:	793b      	ldrb	r3, [r7, #4]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	3301      	adds	r3, #1
 8003966:	fa41 f303 	asr.w	r3, r1, r3
 800396a:	b2db      	uxtb	r3, r3
 800396c:	737b      	strb	r3, [r7, #13]
        *data = b;
 800396e:	7b7a      	ldrb	r2, [r7, #13]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	701a      	strb	r2, [r3, #0]
    }
    return count;
 8003974:	7bfb      	ldrb	r3, [r7, #15]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	bd90      	pop	{r4, r7, pc}

0800397e <_Z15I2Cdev_readBytehhPht>:
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Status of read operation (true = success)
 */
uint8_t I2Cdev_readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af02      	add	r7, sp, #8
 8003984:	603a      	str	r2, [r7, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	460b      	mov	r3, r1
 800398e:	71bb      	strb	r3, [r7, #6]
 8003990:	4613      	mov	r3, r2
 8003992:	80bb      	strh	r3, [r7, #4]
    return I2Cdev_readBytes(devAddr, regAddr, 1, data, timeout);
 8003994:	79b9      	ldrb	r1, [r7, #6]
 8003996:	79f8      	ldrb	r0, [r7, #7]
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2201      	movs	r2, #1
 80039a0:	f000 f806 	bl	80039b0 <_Z16I2Cdev_readByteshhhPht>
 80039a4:	4603      	mov	r3, r0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <_Z16I2Cdev_readByteshhhPht>:
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev_readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
uint8_t I2Cdev_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
 80039bc:	460b      	mov	r3, r1
 80039be:	71bb      	strb	r3, [r7, #6]
 80039c0:	4613      	mov	r3, r2
 80039c2:	717b      	strb	r3, [r7, #5]
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 80039c4:	8b3b      	ldrh	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <_Z16I2Cdev_readByteshhhPht+0x1e>
 80039ca:	8b3b      	ldrh	r3, [r7, #24]
 80039cc:	e001      	b.n	80039d2 <_Z16I2Cdev_readByteshhhPht+0x22>
 80039ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d2:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, &regAddr, 1, tout);
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <_Z16I2Cdev_readByteshhhPht+0x78>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	b299      	uxth	r1, r3
 80039e0:	89fb      	ldrh	r3, [r7, #14]
 80039e2:	1dba      	adds	r2, r7, #6
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2301      	movs	r3, #1
 80039e8:	f001 fc84 	bl	80052f4 <HAL_I2C_Master_Transmit>
    if (HAL_I2C_Master_Receive(I2Cdev_hi2c, devAddr << 1, data, length, tout) == HAL_OK) return length;
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <_Z16I2Cdev_readByteshhhPht+0x78>)
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	b299      	uxth	r1, r3
 80039f8:	797b      	ldrb	r3, [r7, #5]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	89fb      	ldrh	r3, [r7, #14]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	f001 fd74 	bl	80054f0 <HAL_I2C_Master_Receive>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <_Z16I2Cdev_readByteshhhPht+0x6c>
 8003a18:	797b      	ldrb	r3, [r7, #5]
 8003a1a:	e000      	b.n	8003a1e <_Z16I2Cdev_readByteshhhPht+0x6e>
    return -1;
 8003a1c:	23ff      	movs	r3, #255	; 0xff
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000640 	.word	0x20000640

08003a2c <_Z15I2Cdev_writeBithhhh>:
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data)
{
 8003a2c:	b590      	push	{r4, r7, lr}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4604      	mov	r4, r0
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4623      	mov	r3, r4
 8003a3c:	71fb      	strb	r3, [r7, #7]
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71bb      	strb	r3, [r7, #6]
 8003a42:	460b      	mov	r3, r1
 8003a44:	717b      	strb	r3, [r7, #5]
 8003a46:	4613      	mov	r3, r2
 8003a48:	713b      	strb	r3, [r7, #4]
    uint8_t b;
    I2Cdev_readByte(devAddr, regAddr, &b, I2Cdev_readTimeout);
 8003a4a:	4b17      	ldr	r3, [pc, #92]	; (8003aa8 <_Z15I2Cdev_writeBithhhh+0x7c>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f107 020f 	add.w	r2, r7, #15
 8003a52:	79b9      	ldrb	r1, [r7, #6]
 8003a54:	79f8      	ldrb	r0, [r7, #7]
 8003a56:	f7ff ff92 	bl	800397e <_Z15I2Cdev_readBytehhPht>
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 8003a5a:	793b      	ldrb	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <_Z15I2Cdev_writeBithhhh+0x4a>
 8003a60:	797b      	ldrb	r3, [r7, #5]
 8003a62:	2201      	movs	r2, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	b25a      	sxtb	r2, r3
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	b25b      	sxtb	r3, r3
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	b25b      	sxtb	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	e00b      	b.n	8003a8e <_Z15I2Cdev_writeBithhhh+0x62>
 8003a76:	797b      	ldrb	r3, [r7, #5]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	b25b      	sxtb	r3, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	b25b      	sxtb	r3, r3
 8003a88:	4013      	ands	r3, r2
 8003a8a:	b25b      	sxtb	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	73fb      	strb	r3, [r7, #15]
    return I2Cdev_writeByte(devAddr, regAddr, b);
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	79b9      	ldrb	r1, [r7, #6]
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f85f 	bl	8003b5a <_Z16I2Cdev_writeBytehhh>
 8003a9c:	4603      	mov	r3, r0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000000 	.word	0x20000000

08003aac <_Z16I2Cdev_writeBitshhhhh>:
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8003aac:	b590      	push	{r4, r7, lr}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4623      	mov	r3, r4
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71bb      	strb	r3, [r7, #6]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	717b      	strb	r3, [r7, #5]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	713b      	strb	r3, [r7, #4]
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (I2Cdev_readByte(devAddr, regAddr, &b, 100) != 0)
 8003aca:	f107 020e 	add.w	r2, r7, #14
 8003ace:	79b9      	ldrb	r1, [r7, #6]
 8003ad0:	79f8      	ldrb	r0, [r7, #7]
 8003ad2:	2364      	movs	r3, #100	; 0x64
 8003ad4:	f7ff ff53 	bl	800397e <_Z15I2Cdev_readBytehhPht>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d033      	beq.n	8003b50 <_Z16I2Cdev_writeBitshhhhh+0xa4>
    {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8003ae8:	793b      	ldrb	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	7979      	ldrb	r1, [r7, #5]
 8003af4:	793b      	ldrb	r3, [r7, #4]
 8003af6:	1acb      	subs	r3, r1, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	73fb      	strb	r3, [r7, #15]
        data <<= (bitStart - length + 1); // shift data into correct position
 8003b00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b04:	7979      	ldrb	r1, [r7, #5]
 8003b06:	793b      	ldrb	r3, [r7, #4]
 8003b08:	1acb      	subs	r3, r1, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	f887 3020 	strb.w	r3, [r7, #32]
        data &= mask; // zero all non-important bits in data
 8003b14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	f887 3020 	strb.w	r3, [r7, #32]
        b &= ~(mask); // zero all important bits in existing byte
 8003b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	b25a      	sxtb	r2, r3
 8003b28:	7bbb      	ldrb	r3, [r7, #14]
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b25b      	sxtb	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	73bb      	strb	r3, [r7, #14]
        b |= data; // combine data with existing byte
 8003b34:	7bba      	ldrb	r2, [r7, #14]
 8003b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	73bb      	strb	r3, [r7, #14]
        return I2Cdev_writeByte(devAddr, regAddr, b);
 8003b40:	7bba      	ldrb	r2, [r7, #14]
 8003b42:	79b9      	ldrb	r1, [r7, #6]
 8003b44:	79fb      	ldrb	r3, [r7, #7]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 f807 	bl	8003b5a <_Z16I2Cdev_writeBytehhh>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	e000      	b.n	8003b52 <_Z16I2Cdev_writeBitshhhhh+0xa6>
    } else
    {
        return 0;
 8003b50:	2300      	movs	r3, #0
    }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}

08003b5a <_Z16I2Cdev_writeBytehhh>:
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b082      	sub	sp, #8
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	4603      	mov	r3, r0
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	460b      	mov	r3, r1
 8003b66:	71bb      	strb	r3, [r7, #6]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	717b      	strb	r3, [r7, #5]
    return I2Cdev_writeBytes(devAddr, regAddr, 1, &data);
 8003b6c:	1d7b      	adds	r3, r7, #5
 8003b6e:	79b9      	ldrb	r1, [r7, #6]
 8003b70:	79f8      	ldrb	r0, [r7, #7]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f000 f806 	bl	8003b84 <_Z17I2Cdev_writeByteshhhPh>
 8003b78:	4603      	mov	r3, r0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <_Z17I2Cdev_writeByteshhhPh>:
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
uint16_t I2Cdev_writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t Size, uint8_t *pData)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	71fb      	strb	r3, [r7, #7]
 8003b90:	460b      	mov	r3, r1
 8003b92:	71bb      	strb	r3, [r7, #6]
 8003b94:	4613      	mov	r3, r2
 8003b96:	717b      	strb	r3, [r7, #5]
    // Creating dynamic array to store regAddr + data in one buffer
    uint8_t *dynBuffer;
    dynBuffer = (uint8_t *) malloc(sizeof(uint8_t) * (Size + 1));
 8003b98:	797b      	ldrb	r3, [r7, #5]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f008 f955 	bl	800be4c <malloc>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	60fb      	str	r3, [r7, #12]
    dynBuffer[0] = regAddr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	79ba      	ldrb	r2, [r7, #6]
 8003baa:	701a      	strb	r2, [r3, #0]

    // copy array
    memcpy(dynBuffer + 1, pData, sizeof(uint8_t) * Size);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	797a      	ldrb	r2, [r7, #5]
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f008 f959 	bl	800be6c <memcpy>

    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(I2Cdev_hi2c, devAddr << 1, dynBuffer, Size + 1, 1000);
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <_Z17I2Cdev_writeByteshhhPh+0x78>)
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	b299      	uxth	r1, r3
 8003bc6:	797b      	ldrb	r3, [r7, #5]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bd2:	9200      	str	r2, [sp, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	f001 fb8d 	bl	80052f4 <HAL_I2C_Master_Transmit>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	72fb      	strb	r3, [r7, #11]
    free(dynBuffer);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f008 f93c 	bl	800be5c <free>
    return status == HAL_OK;
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	b29b      	uxth	r3, r3
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000640 	.word	0x20000640

08003c00 <biquadFilterInitLPF>:
    return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
}

/* sets up a biquad filter as a 2nd order butterworth LPF */
void biquadFilterInitLPF(BiquadFilter_t *filter, float _filterCallFreq, float _cutoffFreq)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c0c:	edc7 0a01 	vstr	s1, [r7, #4]
    biquadFilterInit(filter, _filterCallFreq, _cutoffFreq, BIQUAD_Q, FILTER_LPF);
 8003c10:	2100      	movs	r1, #0
 8003c12:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8003c2c <biquadFilterInitLPF+0x2c>
 8003c16:	edd7 0a01 	vldr	s1, [r7, #4]
 8003c1a:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f806 	bl	8003c30 <biquadFilterInit>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	3f3504f3 	.word	0x3f3504f3

08003c30 <biquadFilterInit>:

void
biquadFilterInit(BiquadFilter_t *filter, float _filterCallFreq, float _cutoffFreq, float Q,
                 biquadFilterType_e filterType)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6178      	str	r0, [r7, #20]
 8003c38:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c40:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c44:	460b      	mov	r3, r1
 8003c46:	71fb      	strb	r3, [r7, #7]
    biquadFilterUpdate(filter, _filterCallFreq, _cutoffFreq, Q, filterType);
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	ed97 1a02 	vldr	s2, [r7, #8]
 8003c50:	edd7 0a03 	vldr	s1, [r7, #12]
 8003c54:	ed97 0a04 	vldr	s0, [r7, #16]
 8003c58:	6978      	ldr	r0, [r7, #20]
 8003c5a:	f000 f815 	bl	8003c88 <biquadFilterUpdate>

    // zero initial samples
    filter->x1 = filter->x2 = 0;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	619a      	str	r2, [r3, #24]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	615a      	str	r2, [r3, #20]
    filter->y1 = filter->y2 = 0;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	621a      	str	r2, [r3, #32]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	61da      	str	r2, [r3, #28]
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <biquadFilterUpdate>:

void biquadFilterUpdate(BiquadFilter_t *filter, float _filterCallFreq, float _cutoffFreq, float Q,
                        biquadFilterType_e filterType)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6178      	str	r0, [r7, #20]
 8003c90:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c94:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c98:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	71fb      	strb	r3, [r7, #7]
    // setup variables
    const float omega = 2.0f * M_PIf * _filterCallFreq * _cutoffFreq * 0.000001f;
 8003ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ca4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003e50 <biquadFilterUpdate+0x1c8>
 8003ca8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cac:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003e54 <biquadFilterUpdate+0x1cc>
 8003cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cbc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    const float sn = sin_approx(omega);
 8003cc0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003cc4:	f000 f912 	bl	8003eec <sin_approx>
 8003cc8:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
    const float cs = cos_approx(omega);
 8003ccc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003cd0:	f000 f9b6 	bl	8004040 <cos_approx>
 8003cd4:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    const float alpha = sn / (2.0f * Q);
 8003cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cdc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ce0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce8:	edc7 7a08 	vstr	s15, [r7, #32]

    switch (filterType)
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d04f      	beq.n	8003d92 <biquadFilterUpdate+0x10a>
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	dc6e      	bgt.n	8003dd4 <biquadFilterUpdate+0x14c>
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <biquadFilterUpdate+0x78>
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d02a      	beq.n	8003d54 <biquadFilterUpdate+0xcc>
 8003cfe:	e069      	b.n	8003dd4 <biquadFilterUpdate+0x14c>
    {
        case FILTER_LPF:
            // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
            // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
            filter->b1 = 1 - cs;
 8003d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d04:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	edc3 7a01 	vstr	s15, [r3, #4]
            filter->b0 = filter->b1 * 0.5f;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	edc3 7a00 	vstr	s15, [r3]
            filter->b2 = filter->b0;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	609a      	str	r2, [r3, #8]
            filter->a1 = -2 * cs;
 8003d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d32:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	edc3 7a03 	vstr	s15, [r3, #12]
            filter->a2 = 1 - alpha;
 8003d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d44:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	edc3 7a04 	vstr	s15, [r3, #16]
            break;
 8003d52:	e03f      	b.n	8003dd4 <biquadFilterUpdate+0x14c>
        case FILTER_NOTCH:
            filter->b0 = 1;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d5a:	601a      	str	r2, [r3, #0]
            filter->b1 = -2 * cs;
 8003d5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d60:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	edc3 7a01 	vstr	s15, [r3, #4]
            filter->b2 = 1;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d74:	609a      	str	r2, [r3, #8]
            filter->a1 = filter->b1;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	60da      	str	r2, [r3, #12]
            filter->a2 = 1 - alpha;
 8003d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d82:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	edc3 7a04 	vstr	s15, [r3, #16]
            break;
 8003d90:	e020      	b.n	8003dd4 <biquadFilterUpdate+0x14c>
        case FILTER_BPF:
            filter->b0 = alpha;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	6a3a      	ldr	r2, [r7, #32]
 8003d96:	601a      	str	r2, [r3, #0]
            filter->b1 = 0;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]
            filter->b2 = -alpha;
 8003da0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003da4:	eef1 7a67 	vneg.f32	s15, s15
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	edc3 7a02 	vstr	s15, [r3, #8]
            filter->a1 = -2 * cs;
 8003dae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003db2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003db6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	edc3 7a03 	vstr	s15, [r3, #12]
            filter->a2 = 1 - alpha;
 8003dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	edc3 7a04 	vstr	s15, [r3, #16]
            break;
 8003dd2:	bf00      	nop
    }

    const float a0 = 1 + alpha;
 8003dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ddc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003de0:	edc7 7a07 	vstr	s15, [r7, #28]

    // precompute the coefficients
    filter->b0 /= a0;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	edd3 6a00 	vldr	s13, [r3]
 8003dea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	edc3 7a00 	vstr	s15, [r3]
    filter->b1 /= a0;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	edd3 6a01 	vldr	s13, [r3, #4]
 8003dfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	edc3 7a01 	vstr	s15, [r3, #4]
    filter->b2 /= a0;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e12:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->a1 /= a0;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e26:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->a2 /= a0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	edd3 6a04 	vldr	s13, [r3, #16]
 8003e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003e48:	bf00      	nop
 8003e4a:	3730      	adds	r7, #48	; 0x30
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40c90fdb 	.word	0x40c90fdb
 8003e54:	358637bd 	.word	0x358637bd

08003e58 <biquadFilterApply>:
    return result;
}

/* Computes a biquadFilter_t filter in direct form 2 on a sample (higher precision but can't handle changes in coefficients */
float biquadFilterApply(BiquadFilter_t *filter, float input)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	ed87 0a00 	vstr	s0, [r7]
    const float result = filter->b0 * input + filter->x1;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	ed93 7a00 	vldr	s14, [r3]
 8003e6a:	edd7 7a00 	vldr	s15, [r7]
 8003e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	edd3 7a05 	vldr	s15, [r3, #20]
 8003e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e7c:	edc7 7a03 	vstr	s15, [r7, #12]
    filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e86:	edd7 7a00 	vldr	s15, [r7]
 8003e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	edd3 6a03 	vldr	s13, [r3, #12]
 8003e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	edc3 7a05 	vstr	s15, [r3, #20]
    filter->x2 = filter->b2 * input - filter->a2 * result;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8003eb6:	edd7 7a00 	vldr	s15, [r7]
 8003eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	edd3 6a04 	vldr	s13, [r3, #16]
 8003ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	edc3 7a06 	vstr	s15, [r3, #24]
    return result;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	ee07 3a90 	vmov	s15, r3
}
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <sin_approx>:
#define sinPolyCoef7 -1.980661520e-4f                                          // Double: -1.980661520135080504411629636078917643846e-4
#define sinPolyCoef9  2.600054768e-6f                                          // Double:  2.600054767890361277123254766503271638682e-6
#endif

float sin_approx(float x)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	ed87 0a01 	vstr	s0, [r7, #4]
    int32_t xint = x;
 8003ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003efe:	ee17 3a90 	vmov	r3, s15
 8003f02:	60fb      	str	r3, [r7, #12]
    if (xint < -32 || xint > 32) return 0.0f;                               // Stop here on error input (5 * 360 Deg)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f113 0f20 	cmn.w	r3, #32
 8003f0a:	db02      	blt.n	8003f12 <sin_approx+0x26>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	dd0a      	ble.n	8003f28 <sin_approx+0x3c>
 8003f12:	eddf 7a42 	vldr	s15, [pc, #264]	; 800401c <sin_approx+0x130>
 8003f16:	e079      	b.n	800400c <sin_approx+0x120>
    while (x > M_PIf) x -= (2.0f * M_PIf);                                 // always wrap input angle to -PI..PI
 8003f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f1c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004020 <sin_approx+0x134>
 8003f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f24:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f2c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8004024 <sin_approx+0x138>
 8003f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f38:	dcee      	bgt.n	8003f18 <sin_approx+0x2c>
    while (x < -M_PIf) x += (2.0f * M_PIf);
 8003f3a:	e007      	b.n	8003f4c <sin_approx+0x60>
 8003f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f40:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004020 <sin_approx+0x134>
 8003f44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f48:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f50:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004028 <sin_approx+0x13c>
 8003f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	d4ee      	bmi.n	8003f3c <sin_approx+0x50>
    if (x > (0.5f * M_PIf)) x = (0.5f * M_PIf) - (x - (0.5f * M_PIf));   // We just pick -90..+90 Degree
 8003f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f62:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800402c <sin_approx+0x140>
 8003f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	dd0c      	ble.n	8003f8a <sin_approx+0x9e>
 8003f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f74:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800402c <sin_approx+0x140>
 8003f78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f7c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800402c <sin_approx+0x140>
 8003f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f84:	edc7 7a01 	vstr	s15, [r7, #4]
 8003f88:	e014      	b.n	8003fb4 <sin_approx+0xc8>
    else if (x < -(0.5f * M_PIf)) x = -(0.5f * M_PIf) - ((0.5f * M_PIf) + x);
 8003f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f8e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004030 <sin_approx+0x144>
 8003f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	d50b      	bpl.n	8003fb4 <sin_approx+0xc8>
 8003f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fa0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800402c <sin_approx+0x140>
 8003fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fa8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004030 <sin_approx+0x144>
 8003fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb0:	edc7 7a01 	vstr	s15, [r7, #4]
    float x2 = x * x;
 8003fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003fbc:	edc7 7a02 	vstr	s15, [r7, #8]
    return x + x * x2 * (sinPolyCoef3 + x2 * (sinPolyCoef5 + x2 * (sinPolyCoef7 + x2 * sinPolyCoef9)));
 8003fc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fd0:	eddf 6a12 	vldr	s13, [pc, #72]	; 800401c <sin_approx+0x130>
 8003fd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003fd8:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004034 <sin_approx+0x148>
 8003fdc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8003fe0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fe8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004038 <sin_approx+0x14c>
 8003fec:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8003ff0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ff8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800403c <sin_approx+0x150>
 8003ffc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004004:	edd7 7a01 	vldr	s15, [r7, #4]
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800400c:	eeb0 0a67 	vmov.f32	s0, s15
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	00000000 	.word	0x00000000
 8004020:	40c90fdb 	.word	0x40c90fdb
 8004024:	40490fdb 	.word	0x40490fdb
 8004028:	c0490fdb 	.word	0xc0490fdb
 800402c:	3fc90fdb 	.word	0x3fc90fdb
 8004030:	bfc90fdb 	.word	0xbfc90fdb
 8004034:	3941e792 	.word	0x3941e792
 8004038:	3c083097 	.word	0x3c083097
 800403c:	3e2aa815 	.word	0x3e2aa815

08004040 <cos_approx>:

float cos_approx(float x)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	ed87 0a01 	vstr	s0, [r7, #4]
    return sin_approx(x + (0.5f * M_PIf));
 800404a:	edd7 7a01 	vldr	s15, [r7, #4]
 800404e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800406c <cos_approx+0x2c>
 8004052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004056:	eeb0 0a67 	vmov.f32	s0, s15
 800405a:	f7ff ff47 	bl	8003eec <sin_approx>
 800405e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004062:	eeb0 0a67 	vmov.f32	s0, s15
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	3fc90fdb 	.word	0x3fc90fdb

08004070 <delay_xus>:
    {
        .Instance = I2C_SOFT
    };

void delay_xus(__IO uint32_t nTime)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    int old_val, new_val, val;

    if (nTime > 900)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800407e:	d91c      	bls.n	80040ba <delay_xus+0x4a>
    {
        for (old_val = 0; old_val < nTime / 900; old_val++)
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e006      	b.n	8004094 <delay_xus+0x24>
        {
            delay_xus(900);
 8004086:	f44f 7061 	mov.w	r0, #900	; 0x384
 800408a:	f7ff fff1 	bl	8004070 <delay_xus>
        for (old_val = 0; old_val < nTime / 900; old_val++)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <delay_xus+0x94>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	0a5a      	lsrs	r2, r3, #9
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d8f0      	bhi.n	8004086 <delay_xus+0x16>
        }
        nTime = nTime % 900;
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <delay_xus+0x94>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	0a5b      	lsrs	r3, r3, #9
 80040ae:	f44f 7161 	mov.w	r1, #900	; 0x384
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	607b      	str	r3, [r7, #4]
    }

    old_val = SysTick->VAL;
 80040ba:	4b13      	ldr	r3, [pc, #76]	; (8004108 <delay_xus+0x98>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	617b      	str	r3, [r7, #20]
    new_val = old_val - CPU_FREQUENCY_MHZ * nTime;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	613b      	str	r3, [r7, #16]
    if (new_val >= 0)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db0b      	blt.n	80040e4 <delay_xus+0x74>
    {
        do
        {
            val = SysTick->VAL;
 80040cc:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <delay_xus+0x98>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60fb      	str	r3, [r7, #12]
        } while ((val < old_val) && (val >= new_val));
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	da0f      	bge.n	80040fa <delay_xus+0x8a>
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	daf4      	bge.n	80040cc <delay_xus+0x5c>
        {
            val = SysTick->VAL;
        } while ((val <= old_val) || (val > new_val));

    }
}
 80040e2:	e00a      	b.n	80040fa <delay_xus+0x8a>
            val = SysTick->VAL;
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <delay_xus+0x98>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
        } while ((val <= old_val) || (val > new_val));
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	ddf8      	ble.n	80040e4 <delay_xus+0x74>
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	dcf4      	bgt.n	80040e4 <delay_xus+0x74>
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	91a2b3c5 	.word	0x91a2b3c5
 8004108:	e000e010 	.word	0xe000e010

0800410c <SDA_Output>:

//--------------------------------------------
void SDA_Output(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = MYI2C_SDA_PIN;
 8004112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004116:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004118:	2301      	movs	r3, #1
 800411a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800411c:	2302      	movs	r3, #2
 800411e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MYI2C_SDA_PORT, &GPIO_InitStruct);
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	4619      	mov	r1, r3
 8004124:	4803      	ldr	r0, [pc, #12]	; (8004134 <SDA_Output+0x28>)
 8004126:	f000 fdeb 	bl	8004d00 <HAL_GPIO_Init>
}
 800412a:	bf00      	nop
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40020400 	.word	0x40020400

08004138 <SDA_Input>:


void SDA_Input(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = MYI2C_SDA_PIN;
 800413e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004142:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004148:	2302      	movs	r3, #2
 800414a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MYI2C_SDA_PORT, &GPIO_InitStruct);
 800414c:	1d3b      	adds	r3, r7, #4
 800414e:	4619      	mov	r1, r3
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <SDA_Input+0x28>)
 8004152:	f000 fdd5 	bl	8004d00 <HAL_GPIO_Init>
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40020400 	.word	0x40020400

08004164 <SCL_Output>:

void SCL_Output(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = MYI2C_SCL_PIN;
 800416a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004170:	2301      	movs	r3, #1
 8004172:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004174:	2302      	movs	r3, #2
 8004176:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(MYI2C_SCL_PORT, &GPIO_InitStruct);
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4803      	ldr	r0, [pc, #12]	; (800418c <SCL_Output+0x28>)
 800417e:	f000 fdbf 	bl	8004d00 <HAL_GPIO_Init>
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40020400 	.word	0x40020400

08004190 <Soft_I2C_Init>:
    HAL_GPIO_Init(MYI2C_SCL_PORT, &GPIO_InitStruct);
}


void Soft_I2C_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
    SCL_Output();
 8004194:	f7ff ffe6 	bl	8004164 <SCL_Output>
    SDA_Output();
 8004198:	f7ff ffb8 	bl	800410c <SDA_Output>
    SCL_Dout_HIGH();
 800419c:	2201      	movs	r2, #1
 800419e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041a2:	4805      	ldr	r0, [pc, #20]	; (80041b8 <Soft_I2C_Init+0x28>)
 80041a4:	f000 ff48 	bl	8005038 <HAL_GPIO_WritePin>
    SDA_Dout_HIGH();
 80041a8:	2201      	movs	r2, #1
 80041aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041ae:	4802      	ldr	r0, [pc, #8]	; (80041b8 <Soft_I2C_Init+0x28>)
 80041b0:	f000 ff42 	bl	8005038 <HAL_GPIO_WritePin>
}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40020400 	.word	0x40020400

080041bc <Soft_I2C_Start>:


//产生IIC起始信号

void Soft_I2C_Start(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
    SDA_Output();
 80041c0:	f7ff ffa4 	bl	800410c <SDA_Output>
    SDA_Dout_HIGH();
 80041c4:	2201      	movs	r2, #1
 80041c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041ca:	480e      	ldr	r0, [pc, #56]	; (8004204 <Soft_I2C_Start+0x48>)
 80041cc:	f000 ff34 	bl	8005038 <HAL_GPIO_WritePin>
    SCL_Dout_HIGH();
 80041d0:	2201      	movs	r2, #1
 80041d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041d6:	480b      	ldr	r0, [pc, #44]	; (8004204 <Soft_I2C_Start+0x48>)
 80041d8:	f000 ff2e 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(4);
 80041dc:	2004      	movs	r0, #4
 80041de:	f7ff ff47 	bl	8004070 <delay_xus>
    SDA_Dout_LOW();
 80041e2:	2200      	movs	r2, #0
 80041e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041e8:	4806      	ldr	r0, [pc, #24]	; (8004204 <Soft_I2C_Start+0x48>)
 80041ea:	f000 ff25 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(4);
 80041ee:	2004      	movs	r0, #4
 80041f0:	f7ff ff3e 	bl	8004070 <delay_xus>
    SCL_Dout_LOW();
 80041f4:	2200      	movs	r2, #0
 80041f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041fa:	4802      	ldr	r0, [pc, #8]	; (8004204 <Soft_I2C_Start+0x48>)
 80041fc:	f000 ff1c 	bl	8005038 <HAL_GPIO_WritePin>
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40020400 	.word	0x40020400

08004208 <Soft_I2C_Stop>:


//产生IIC停止信号

void Soft_I2C_Stop(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
    SDA_Output();
 800420c:	f7ff ff7e 	bl	800410c <SDA_Output>
    SCL_Dout_LOW();
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004216:	480e      	ldr	r0, [pc, #56]	; (8004250 <Soft_I2C_Stop+0x48>)
 8004218:	f000 ff0e 	bl	8005038 <HAL_GPIO_WritePin>
    SDA_Dout_LOW();
 800421c:	2200      	movs	r2, #0
 800421e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004222:	480b      	ldr	r0, [pc, #44]	; (8004250 <Soft_I2C_Stop+0x48>)
 8004224:	f000 ff08 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(4);
 8004228:	2004      	movs	r0, #4
 800422a:	f7ff ff21 	bl	8004070 <delay_xus>
    SCL_Dout_HIGH();
 800422e:	2201      	movs	r2, #1
 8004230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004234:	4806      	ldr	r0, [pc, #24]	; (8004250 <Soft_I2C_Stop+0x48>)
 8004236:	f000 feff 	bl	8005038 <HAL_GPIO_WritePin>
    SDA_Dout_HIGH();
 800423a:	2201      	movs	r2, #1
 800423c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004240:	4803      	ldr	r0, [pc, #12]	; (8004250 <Soft_I2C_Stop+0x48>)
 8004242:	f000 fef9 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(4);
 8004246:	2004      	movs	r0, #4
 8004248:	f7ff ff12 	bl	8004070 <delay_xus>
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40020400 	.word	0x40020400

08004254 <Soft_I2C_Wait_Ack>:

uint8_t Soft_I2C_Wait_Ack(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
    uint8_t ucErrTime = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	71fb      	strb	r3, [r7, #7]
    SDA_Input();
 800425e:	f7ff ff6b 	bl	8004138 <SDA_Input>
    SDA_Dout_HIGH();
 8004262:	2201      	movs	r2, #1
 8004264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004268:	4816      	ldr	r0, [pc, #88]	; (80042c4 <Soft_I2C_Wait_Ack+0x70>)
 800426a:	f000 fee5 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(1);
 800426e:	2001      	movs	r0, #1
 8004270:	f7ff fefe 	bl	8004070 <delay_xus>
    SCL_Dout_HIGH();
 8004274:	2201      	movs	r2, #1
 8004276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800427a:	4812      	ldr	r0, [pc, #72]	; (80042c4 <Soft_I2C_Wait_Ack+0x70>)
 800427c:	f000 fedc 	bl	8005038 <HAL_GPIO_WritePin>
    Delay_us(1);
 8004280:	2001      	movs	r0, #1
 8004282:	f7ff fef5 	bl	8004070 <delay_xus>
    while (SDA_Data_IN())
 8004286:	e009      	b.n	800429c <Soft_I2C_Wait_Ack+0x48>
    {
        ucErrTime++;
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	3301      	adds	r3, #1
 800428c:	71fb      	strb	r3, [r7, #7]
        if (ucErrTime > 250)
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	2bfa      	cmp	r3, #250	; 0xfa
 8004292:	d903      	bls.n	800429c <Soft_I2C_Wait_Ack+0x48>
        {
            Soft_I2C_Stop();
 8004294:	f7ff ffb8 	bl	8004208 <Soft_I2C_Stop>
            return 1;
 8004298:	2301      	movs	r3, #1
 800429a:	e00e      	b.n	80042ba <Soft_I2C_Wait_Ack+0x66>
    while (SDA_Data_IN())
 800429c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042a0:	4808      	ldr	r0, [pc, #32]	; (80042c4 <Soft_I2C_Wait_Ack+0x70>)
 80042a2:	f000 feb1 	bl	8005008 <HAL_GPIO_ReadPin>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ed      	bne.n	8004288 <Soft_I2C_Wait_Ack+0x34>
        }
    }
    SCL_Dout_LOW();//时钟输出0
 80042ac:	2200      	movs	r2, #0
 80042ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042b2:	4804      	ldr	r0, [pc, #16]	; (80042c4 <Soft_I2C_Wait_Ack+0x70>)
 80042b4:	f000 fec0 	bl	8005038 <HAL_GPIO_WritePin>
    return 0;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40020400 	.word	0x40020400

080042c8 <Soft_I2C_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void Soft_I2C_Send_Byte(uint8_t txd)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	4603      	mov	r3, r0
 80042d0:	71fb      	strb	r3, [r7, #7]
    uint8_t t;
    //拉低时钟开始数据传输
    SDA_Output();
 80042d2:	f7ff ff1b 	bl	800410c <SDA_Output>
    SCL_Dout_LOW();
 80042d6:	2200      	movs	r2, #0
 80042d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80042dc:	4817      	ldr	r0, [pc, #92]	; (800433c <Soft_I2C_Send_Byte+0x74>)
 80042de:	f000 feab 	bl	8005038 <HAL_GPIO_WritePin>
    for (t = 0; t < 8; t++)
 80042e2:	2300      	movs	r3, #0
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e020      	b.n	800432a <Soft_I2C_Send_Byte+0x62>
    {
        SDA_Write((txd & 0x80) >> 7);
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	09db      	lsrs	r3, r3, #7
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042f4:	4811      	ldr	r0, [pc, #68]	; (800433c <Soft_I2C_Send_Byte+0x74>)
 80042f6:	f000 fe9f 	bl	8005038 <HAL_GPIO_WritePin>
        txd <<= 1;
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	71fb      	strb	r3, [r7, #7]
        Delay_us(5);   //对TEA5767这三个延时都是必须的
 8004300:	2005      	movs	r0, #5
 8004302:	f7ff feb5 	bl	8004070 <delay_xus>
        SCL_Dout_HIGH();
 8004306:	2201      	movs	r2, #1
 8004308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800430c:	480b      	ldr	r0, [pc, #44]	; (800433c <Soft_I2C_Send_Byte+0x74>)
 800430e:	f000 fe93 	bl	8005038 <HAL_GPIO_WritePin>
        Delay_us(5);
 8004312:	2005      	movs	r0, #5
 8004314:	f7ff feac 	bl	8004070 <delay_xus>
        SCL_Dout_LOW();
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800431e:	4807      	ldr	r0, [pc, #28]	; (800433c <Soft_I2C_Send_Byte+0x74>)
 8004320:	f000 fe8a 	bl	8005038 <HAL_GPIO_WritePin>
    for (t = 0; t < 8; t++)
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b07      	cmp	r3, #7
 800432e:	d9db      	bls.n	80042e8 <Soft_I2C_Send_Byte+0x20>
        //Delay_us(2);
    }
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40020400 	.word	0x40020400

08004340 <SOFT_I2C_Master_Transmit>:
    return receive;
}


void SOFT_I2C_Master_Transmit(uint8_t daddr, uint8_t *buff, uint8_t len)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	71fb      	strb	r3, [r7, #7]
 800434c:	4613      	mov	r3, r2
 800434e:	71bb      	strb	r3, [r7, #6]
    Soft_I2C_Start();
 8004350:	f7ff ff34 	bl	80041bc <Soft_I2C_Start>
    Soft_I2C_Send_Byte(daddr);
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ffb6 	bl	80042c8 <Soft_I2C_Send_Byte>
    Soft_I2C_Wait_Ack();
 800435c:	f7ff ff7a 	bl	8004254 <Soft_I2C_Wait_Ack>

    for (int i = 0; i < len; i++)
 8004360:	2300      	movs	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e00b      	b.n	800437e <SOFT_I2C_Master_Transmit+0x3e>
    {
        Soft_I2C_Send_Byte(*(buff + i));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	4413      	add	r3, r2
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ffaa 	bl	80042c8 <Soft_I2C_Send_Byte>
        Soft_I2C_Wait_Ack();
 8004374:	f7ff ff6e 	bl	8004254 <Soft_I2C_Wait_Ack>
    for (int i = 0; i < len; i++)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	79bb      	ldrb	r3, [r7, #6]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	429a      	cmp	r2, r3
 8004384:	dbef      	blt.n	8004366 <SOFT_I2C_Master_Transmit+0x26>
    }

    Soft_I2C_Stop();
 8004386:	f7ff ff3f 	bl	8004208 <Soft_I2C_Stop>
}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <MX_FREERTOS_Init+0x18>)
 800439a:	2100      	movs	r1, #0
 800439c:	4804      	ldr	r0, [pc, #16]	; (80043b0 <MX_FREERTOS_Init+0x1c>)
 800439e:	f002 fe61 	bl	8007064 <osThreadNew>
 80043a2:	4603      	mov	r3, r0
 80043a4:	4a03      	ldr	r2, [pc, #12]	; (80043b4 <MX_FREERTOS_Init+0x20>)
 80043a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80043a8:	bf00      	nop
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	08010ba4 	.word	0x08010ba4
 80043b0:	080043b9 	.word	0x080043b9
 80043b4:	20000644 	.word	0x20000644

080043b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	  Main();
 80043c0:	f006 fa6a 	bl	800a898 <Main>

  /* USER CODE END StartDefaultTask */
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b17      	ldr	r3, [pc, #92]	; (8004434 <MX_GPIO_Init+0x68>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <MX_GPIO_Init+0x68>)
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <MX_GPIO_Init+0x68>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ee:	2300      	movs	r3, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	4b10      	ldr	r3, [pc, #64]	; (8004434 <MX_GPIO_Init+0x68>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <MX_GPIO_Init+0x68>)
 80043f8:	f043 0302 	orr.w	r3, r3, #2
 80043fc:	6313      	str	r3, [r2, #48]	; 0x30
 80043fe:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <MX_GPIO_Init+0x68>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <MX_GPIO_Init+0x68>)
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	4a08      	ldr	r2, [pc, #32]	; (8004434 <MX_GPIO_Init+0x68>)
 8004414:	f043 0301 	orr.w	r3, r3, #1
 8004418:	6313      	str	r3, [r2, #48]	; 0x30
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <MX_GPIO_Init+0x68>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]

}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800

08004438 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_I2C1_Init+0x50>)
 800443e:	4a13      	ldr	r2, [pc, #76]	; (800448c <MX_I2C1_Init+0x54>)
 8004440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_I2C1_Init+0x50>)
 8004444:	4a12      	ldr	r2, [pc, #72]	; (8004490 <MX_I2C1_Init+0x58>)
 8004446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_I2C1_Init+0x50>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_I2C1_Init+0x50>)
 8004450:	2200      	movs	r2, #0
 8004452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_I2C1_Init+0x50>)
 8004456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800445a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <MX_I2C1_Init+0x50>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_I2C1_Init+0x50>)
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <MX_I2C1_Init+0x50>)
 800446a:	2200      	movs	r2, #0
 800446c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_I2C1_Init+0x50>)
 8004470:	2200      	movs	r2, #0
 8004472:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004474:	4804      	ldr	r0, [pc, #16]	; (8004488 <MX_I2C1_Init+0x50>)
 8004476:	f000 fdf9 	bl	800506c <HAL_I2C_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004480:	f000 f954 	bl	800472c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000648 	.word	0x20000648
 800448c:	40005400 	.word	0x40005400
 8004490:	00061a80 	.word	0x00061a80

08004494 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <MX_I2C2_Init+0x50>)
 800449a:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <MX_I2C2_Init+0x54>)
 800449c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044a0:	4a12      	ldr	r2, [pc, #72]	; (80044ec <MX_I2C2_Init+0x58>)
 80044a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <MX_I2C2_Init+0x50>)
 80044d2:	f000 fdcb 	bl	800506c <HAL_I2C_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80044dc:	f000 f926 	bl	800472c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	2000069c 	.word	0x2000069c
 80044e8:	40005800 	.word	0x40005800
 80044ec:	00061a80 	.word	0x00061a80

080044f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	; 0x30
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 031c 	add.w	r3, r7, #28
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3a      	ldr	r2, [pc, #232]	; (80045f8 <HAL_I2C_MspInit+0x108>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d12c      	bne.n	800456c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	4b39      	ldr	r3, [pc, #228]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451a:	4a38      	ldr	r2, [pc, #224]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	6313      	str	r3, [r2, #48]	; 0x30
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = OLED_I2C1_SCL_Pin|OLED_I2C1_SDA_Pin;
 800452e:	23c0      	movs	r3, #192	; 0xc0
 8004530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004532:	2312      	movs	r3, #18
 8004534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800453a:	2303      	movs	r3, #3
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800453e:	2304      	movs	r3, #4
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004542:	f107 031c 	add.w	r3, r7, #28
 8004546:	4619      	mov	r1, r3
 8004548:	482d      	ldr	r0, [pc, #180]	; (8004600 <HAL_I2C_MspInit+0x110>)
 800454a:	f000 fbd9 	bl	8004d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a29      	ldr	r2, [pc, #164]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b27      	ldr	r3, [pc, #156]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800456a:	e041      	b.n	80045f0 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a24      	ldr	r2, [pc, #144]	; (8004604 <HAL_I2C_MspInit+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d13c      	bne.n	80045f0 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6313      	str	r3, [r2, #48]	; 0x30
 8004586:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004598:	2312      	movs	r3, #18
 800459a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80045a4:	2304      	movs	r3, #4
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a8:	f107 031c 	add.w	r3, r7, #28
 80045ac:	4619      	mov	r1, r3
 80045ae:	4814      	ldr	r0, [pc, #80]	; (8004600 <HAL_I2C_MspInit+0x110>)
 80045b0:	f000 fba6 	bl	8004d00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80045b4:	2308      	movs	r3, #8
 80045b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045b8:	2312      	movs	r3, #18
 80045ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c0:	2303      	movs	r3, #3
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80045c4:	2309      	movs	r3, #9
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c8:	f107 031c 	add.w	r3, r7, #28
 80045cc:	4619      	mov	r1, r3
 80045ce:	480c      	ldr	r0, [pc, #48]	; (8004600 <HAL_I2C_MspInit+0x110>)
 80045d0:	f000 fb96 	bl	8004d00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 80045de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045e2:	6413      	str	r3, [r2, #64]	; 0x40
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_I2C_MspInit+0x10c>)
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	bf00      	nop
 80045f2:	3730      	adds	r7, #48	; 0x30
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40005400 	.word	0x40005400
 80045fc:	40023800 	.word	0x40023800
 8004600:	40020400 	.word	0x40020400
 8004604:	40005800 	.word	0x40005800

08004608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800460c:	f000 fa54 	bl	8004ab8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_RCC_DeInit();
 8004610:	f002 f94c 	bl	80068ac <HAL_RCC_DeInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004614:	f000 f80e 	bl	8004634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004618:	f7ff fed8 	bl	80043cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800461c:	f7ff ff0c 	bl	8004438 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004620:	f7ff ff38 	bl	8004494 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004624:	f002 fcd4 	bl	8006fd0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004628:	f7ff feb4 	bl	8004394 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800462c:	f002 fcf4 	bl	8007018 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004630:	e7fe      	b.n	8004630 <main+0x28>
	...

08004634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b094      	sub	sp, #80	; 0x50
 8004638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800463a:	f107 0320 	add.w	r3, r7, #32
 800463e:	2230      	movs	r2, #48	; 0x30
 8004640:	2100      	movs	r1, #0
 8004642:	4618      	mov	r0, r3
 8004644:	f007 fc3a 	bl	800bebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	4b28      	ldr	r3, [pc, #160]	; (8004700 <SystemClock_Config+0xcc>)
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	4a27      	ldr	r2, [pc, #156]	; (8004700 <SystemClock_Config+0xcc>)
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004666:	6413      	str	r3, [r2, #64]	; 0x40
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <SystemClock_Config+0xcc>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004674:	2300      	movs	r3, #0
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	4b22      	ldr	r3, [pc, #136]	; (8004704 <SystemClock_Config+0xd0>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004680:	4a20      	ldr	r2, [pc, #128]	; (8004704 <SystemClock_Config+0xd0>)
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <SystemClock_Config+0xd0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004694:	2301      	movs	r3, #1
 8004696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800469e:	2302      	movs	r3, #2
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80046a8:	2319      	movs	r3, #25
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80046ac:	23a8      	movs	r3, #168	; 0xa8
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046b0:	2302      	movs	r3, #2
 80046b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80046b4:	2304      	movs	r3, #4
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b8:	f107 0320 	add.w	r3, r7, #32
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 fc6b 	bl	8005f98 <HAL_RCC_OscConfig>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80046c8:	f000 f830 	bl	800472c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046cc:	230f      	movs	r3, #15
 80046ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046d0:	2302      	movs	r3, #2
 80046d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80046e2:	f107 030c 	add.w	r3, r7, #12
 80046e6:	2102      	movs	r1, #2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f001 fecd 	bl	8006488 <HAL_RCC_ClockConfig>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80046f4:	f000 f81a 	bl	800472c <Error_Handler>
  }
}
 80046f8:	bf00      	nop
 80046fa:	3750      	adds	r7, #80	; 0x50
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	40007000 	.word	0x40007000

08004708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a04      	ldr	r2, [pc, #16]	; (8004728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800471a:	f000 f9ef 	bl	8004afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40010000 	.word	0x40010000

0800472c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004730:	b672      	cpsid	i
}
 8004732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004734:	e7fe      	b.n	8004734 <Error_Handler+0x8>
	...

08004738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_MspInit+0x54>)
 8004744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004746:	4a11      	ldr	r2, [pc, #68]	; (800478c <HAL_MspInit+0x54>)
 8004748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800474c:	6453      	str	r3, [r2, #68]	; 0x44
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <HAL_MspInit+0x54>)
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_MspInit+0x54>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_MspInit+0x54>)
 8004764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b08      	ldr	r3, [pc, #32]	; (800478c <HAL_MspInit+0x54>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004776:	2200      	movs	r2, #0
 8004778:	210f      	movs	r1, #15
 800477a:	f06f 0001 	mvn.w	r0, #1
 800477e:	f000 fa95 	bl	8004cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40023800 	.word	0x40023800

08004790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	4b2e      	ldr	r3, [pc, #184]	; (8004860 <HAL_InitTick+0xd0>)
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_InitTick+0xd0>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6453      	str	r3, [r2, #68]	; 0x44
 80047b0:	4b2b      	ldr	r3, [pc, #172]	; (8004860 <HAL_InitTick+0xd0>)
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047bc:	f107 020c 	add.w	r2, r7, #12
 80047c0:	f107 0310 	add.w	r3, r7, #16
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 f83e 	bl	8006848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80047cc:	f002 f828 	bl	8006820 <HAL_RCC_GetPCLK2Freq>
 80047d0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <HAL_InitTick+0xd4>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	0c9b      	lsrs	r3, r3, #18
 80047dc:	3b01      	subs	r3, #1
 80047de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_InitTick+0xd8>)
 80047e2:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_InitTick+0xdc>)
 80047e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_InitTick+0xd8>)
 80047e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80047ee:	4a1e      	ldr	r2, [pc, #120]	; (8004868 <HAL_InitTick+0xd8>)
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80047f4:	4b1c      	ldr	r3, [pc, #112]	; (8004868 <HAL_InitTick+0xd8>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_InitTick+0xd8>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004800:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_InitTick+0xd8>)
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004806:	4818      	ldr	r0, [pc, #96]	; (8004868 <HAL_InitTick+0xd8>)
 8004808:	f002 f91e 	bl	8006a48 <HAL_TIM_Base_Init>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11b      	bne.n	8004852 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800481a:	4813      	ldr	r0, [pc, #76]	; (8004868 <HAL_InitTick+0xd8>)
 800481c:	f002 f96e 	bl	8006afc <HAL_TIM_Base_Start_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800482a:	2b00      	cmp	r3, #0
 800482c:	d111      	bne.n	8004852 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800482e:	2019      	movs	r0, #25
 8004830:	f000 fa58 	bl	8004ce4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b0f      	cmp	r3, #15
 8004838:	d808      	bhi.n	800484c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800483a:	2200      	movs	r2, #0
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	2019      	movs	r0, #25
 8004840:	f000 fa34 	bl	8004cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <HAL_InitTick+0xe0>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e002      	b.n	8004852 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004852:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004856:	4618      	mov	r0, r3
 8004858:	3730      	adds	r7, #48	; 0x30
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	431bde83 	.word	0x431bde83
 8004868:	200006f0 	.word	0x200006f0
 800486c:	40010000 	.word	0x40010000
 8004870:	20000008 	.word	0x20000008

08004874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <NMI_Handler+0x4>

0800487a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <HardFault_Handler+0x4>

08004880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <MemManage_Handler+0x4>

08004886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler+0x4>

08004892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80048a6:	f002 f98b 	bl	8006bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200006f0 	.word	0x200006f0

080048b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	return 1;
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_kill>:

int _kill(int pid, int sig)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80048ce:	f007 f999 	bl	800bc04 <__errno>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2216      	movs	r2, #22
 80048d6:	601a      	str	r2, [r3, #0]
	return -1;
 80048d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <_exit>:

void _exit (int status)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80048ec:	f04f 31ff 	mov.w	r1, #4294967295
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ffe7 	bl	80048c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80048f6:	e7fe      	b.n	80048f6 <_exit+0x12>

080048f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004904:	2300      	movs	r3, #0
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e00a      	b.n	8004920 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800490a:	f3af 8000 	nop.w
 800490e:	4601      	mov	r1, r0
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	60ba      	str	r2, [r7, #8]
 8004916:	b2ca      	uxtb	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	dbf0      	blt.n	800490a <_read+0x12>
	}

return len;
 8004928:	687b      	ldr	r3, [r7, #4]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b086      	sub	sp, #24
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e009      	b.n	8004958 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	60ba      	str	r2, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3301      	adds	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	429a      	cmp	r2, r3
 800495e:	dbf1      	blt.n	8004944 <_write+0x12>
	}
	return len;
 8004960:	687b      	ldr	r3, [r7, #4]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <_close>:

int _close(int file)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
	return -1;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004992:	605a      	str	r2, [r3, #4]
	return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <_isatty>:

int _isatty(int file)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
	return 1;
 80049aa:	2301      	movs	r3, #1
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
	return 0;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <_sbrk+0x5c>)
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <_sbrk+0x60>)
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049e8:	4b13      	ldr	r3, [pc, #76]	; (8004a38 <_sbrk+0x64>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049f0:	4b11      	ldr	r3, [pc, #68]	; (8004a38 <_sbrk+0x64>)
 80049f2:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <_sbrk+0x68>)
 80049f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <_sbrk+0x64>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d207      	bcs.n	8004a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a04:	f007 f8fe 	bl	800bc04 <__errno>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	220c      	movs	r2, #12
 8004a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a12:	e009      	b.n	8004a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <_sbrk+0x64>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a1a:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <_sbrk+0x64>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	4a05      	ldr	r2, [pc, #20]	; (8004a38 <_sbrk+0x64>)
 8004a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20010000 	.word	0x20010000
 8004a34:	00000400 	.word	0x00000400
 8004a38:	20000738 	.word	0x20000738
 8004a3c:	20005320 	.word	0x20005320

08004a40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a44:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <SystemInit+0x20>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4a:	4a05      	ldr	r2, [pc, #20]	; (8004a60 <SystemInit+0x20>)
 8004a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a54:	bf00      	nop
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a68:	480d      	ldr	r0, [pc, #52]	; (8004aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a6a:	490e      	ldr	r1, [pc, #56]	; (8004aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a6c:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a70:	e002      	b.n	8004a78 <LoopCopyDataInit>

08004a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a76:	3304      	adds	r3, #4

08004a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a7c:	d3f9      	bcc.n	8004a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a7e:	4a0b      	ldr	r2, [pc, #44]	; (8004aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a80:	4c0b      	ldr	r4, [pc, #44]	; (8004ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a84:	e001      	b.n	8004a8a <LoopFillZerobss>

08004a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a88:	3204      	adds	r2, #4

08004a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a8c:	d3fb      	bcc.n	8004a86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a8e:	f7ff ffd7 	bl	8004a40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a92:	f007 f9b3 	bl	800bdfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a96:	f7ff fdb7 	bl	8004608 <main>
  bx  lr    
 8004a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004aa4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004aa8:	080112b4 	.word	0x080112b4
  ldr r2, =_sbss
 8004aac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004ab0:	20005320 	.word	0x20005320

08004ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ab4:	e7fe      	b.n	8004ab4 <ADC_IRQHandler>
	...

08004ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <HAL_Init+0x40>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <HAL_Init+0x40>)
 8004ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_Init+0x40>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <HAL_Init+0x40>)
 8004ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_Init+0x40>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a07      	ldr	r2, [pc, #28]	; (8004af8 <HAL_Init+0x40>)
 8004ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ae0:	2003      	movs	r0, #3
 8004ae2:	f000 f8d8 	bl	8004c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae6:	200f      	movs	r0, #15
 8004ae8:	f7ff fe52 	bl	8004790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004aec:	f7ff fe24 	bl	8004738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023c00 	.word	0x40023c00

08004afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_IncTick+0x20>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_IncTick+0x24>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	4a04      	ldr	r2, [pc, #16]	; (8004b20 <HAL_IncTick+0x24>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	2000000c 	.word	0x2000000c
 8004b20:	2000073c 	.word	0x2000073c

08004b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return uwTick;
 8004b28:	4b03      	ldr	r3, [pc, #12]	; (8004b38 <HAL_GetTick+0x14>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	2000073c 	.word	0x2000073c

08004b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <__NVIC_SetPriorityGrouping+0x44>)
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	60d3      	str	r3, [r2, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <__NVIC_GetPriorityGrouping+0x18>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db0b      	blt.n	8004bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	f003 021f 	and.w	r2, r3, #31
 8004bb8:	4907      	ldr	r1, [pc, #28]	; (8004bd8 <__NVIC_EnableIRQ+0x38>)
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e100 	.word	0xe000e100

08004bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	6039      	str	r1, [r7, #0]
 8004be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db0a      	blt.n	8004c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	490c      	ldr	r1, [pc, #48]	; (8004c28 <__NVIC_SetPriority+0x4c>)
 8004bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfa:	0112      	lsls	r2, r2, #4
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c04:	e00a      	b.n	8004c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	4908      	ldr	r1, [pc, #32]	; (8004c2c <__NVIC_SetPriority+0x50>)
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	3b04      	subs	r3, #4
 8004c14:	0112      	lsls	r2, r2, #4
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	440b      	add	r3, r1
 8004c1a:	761a      	strb	r2, [r3, #24]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b089      	sub	sp, #36	; 0x24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	bf28      	it	cs
 8004c4e:	2304      	movcs	r3, #4
 8004c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d902      	bls.n	8004c60 <NVIC_EncodePriority+0x30>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3b03      	subs	r3, #3
 8004c5e:	e000      	b.n	8004c62 <NVIC_EncodePriority+0x32>
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	401a      	ands	r2, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c78:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	43d9      	mvns	r1, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c88:	4313      	orrs	r3, r2
         );
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff ff4c 	bl	8004b3c <__NVIC_SetPriorityGrouping>
}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
 8004cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cbe:	f7ff ff61 	bl	8004b84 <__NVIC_GetPriorityGrouping>
 8004cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	68b9      	ldr	r1, [r7, #8]
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f7ff ffb1 	bl	8004c30 <NVIC_EncodePriority>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff80 	bl	8004bdc <__NVIC_SetPriority>
}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	4603      	mov	r3, r0
 8004cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff ff54 	bl	8004ba0 <__NVIC_EnableIRQ>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b089      	sub	sp, #36	; 0x24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	e159      	b.n	8004fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f040 8148 	bne.w	8004fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d005      	beq.n	8004d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d130      	bne.n	8004db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d88:	2201      	movs	r2, #1
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4013      	ands	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 0201 	and.w	r2, r3, #1
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f003 0303 	and.w	r3, r3, #3
 8004dbc:	2b03      	cmp	r3, #3
 8004dbe:	d017      	beq.n	8004df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	2203      	movs	r2, #3
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d123      	bne.n	8004e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	08da      	lsrs	r2, r3, #3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	3208      	adds	r2, #8
 8004e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	220f      	movs	r2, #15
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	08da      	lsrs	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3208      	adds	r2, #8
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0203 	and.w	r2, r3, #3
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a2 	beq.w	8004fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	4b57      	ldr	r3, [pc, #348]	; (8004fe8 <HAL_GPIO_Init+0x2e8>)
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8e:	4a56      	ldr	r2, [pc, #344]	; (8004fe8 <HAL_GPIO_Init+0x2e8>)
 8004e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e94:	6453      	str	r3, [r2, #68]	; 0x44
 8004e96:	4b54      	ldr	r3, [pc, #336]	; (8004fe8 <HAL_GPIO_Init+0x2e8>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea2:	4a52      	ldr	r2, [pc, #328]	; (8004fec <HAL_GPIO_Init+0x2ec>)
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	089b      	lsrs	r3, r3, #2
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	220f      	movs	r2, #15
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a49      	ldr	r2, [pc, #292]	; (8004ff0 <HAL_GPIO_Init+0x2f0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d019      	beq.n	8004f02 <HAL_GPIO_Init+0x202>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a48      	ldr	r2, [pc, #288]	; (8004ff4 <HAL_GPIO_Init+0x2f4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d013      	beq.n	8004efe <HAL_GPIO_Init+0x1fe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a47      	ldr	r2, [pc, #284]	; (8004ff8 <HAL_GPIO_Init+0x2f8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00d      	beq.n	8004efa <HAL_GPIO_Init+0x1fa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a46      	ldr	r2, [pc, #280]	; (8004ffc <HAL_GPIO_Init+0x2fc>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <HAL_GPIO_Init+0x1f6>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a45      	ldr	r2, [pc, #276]	; (8005000 <HAL_GPIO_Init+0x300>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d101      	bne.n	8004ef2 <HAL_GPIO_Init+0x1f2>
 8004eee:	2304      	movs	r3, #4
 8004ef0:	e008      	b.n	8004f04 <HAL_GPIO_Init+0x204>
 8004ef2:	2307      	movs	r3, #7
 8004ef4:	e006      	b.n	8004f04 <HAL_GPIO_Init+0x204>
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e004      	b.n	8004f04 <HAL_GPIO_Init+0x204>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e002      	b.n	8004f04 <HAL_GPIO_Init+0x204>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <HAL_GPIO_Init+0x204>
 8004f02:	2300      	movs	r3, #0
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	f002 0203 	and.w	r2, r2, #3
 8004f0a:	0092      	lsls	r2, r2, #2
 8004f0c:	4093      	lsls	r3, r2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f14:	4935      	ldr	r1, [pc, #212]	; (8004fec <HAL_GPIO_Init+0x2ec>)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f22:	4b38      	ldr	r3, [pc, #224]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f46:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	43db      	mvns	r3, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4013      	ands	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f70:	4a24      	ldr	r2, [pc, #144]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f76:	4b23      	ldr	r3, [pc, #140]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9a:	4a1a      	ldr	r2, [pc, #104]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa0:	4b18      	ldr	r3, [pc, #96]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc4:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <HAL_GPIO_Init+0x304>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	f67f aea2 	bls.w	8004d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	3724      	adds	r7, #36	; 0x24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	40021000 	.word	0x40021000
 8005004:	40013c00 	.word	0x40013c00

08005008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	887b      	ldrh	r3, [r7, #2]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
 8005024:	e001      	b.n	800502a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800502a:	7bfb      	ldrb	r3, [r7, #15]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	807b      	strh	r3, [r7, #2]
 8005044:	4613      	mov	r3, r2
 8005046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005048:	787b      	ldrb	r3, [r7, #1]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800504e:	887a      	ldrh	r2, [r7, #2]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005054:	e003      	b.n	800505e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	041a      	lsls	r2, r3, #16
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	619a      	str	r2, [r3, #24]
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e12b      	b.n	80052d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fa2c 	bl	80044f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2224      	movs	r2, #36	; 0x24
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80050d0:	f001 fb92 	bl	80067f8 <HAL_RCC_GetPCLK1Freq>
 80050d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4a81      	ldr	r2, [pc, #516]	; (80052e0 <HAL_I2C_Init+0x274>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d807      	bhi.n	80050f0 <HAL_I2C_Init+0x84>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4a80      	ldr	r2, [pc, #512]	; (80052e4 <HAL_I2C_Init+0x278>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	bf94      	ite	ls
 80050e8:	2301      	movls	r3, #1
 80050ea:	2300      	movhi	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	e006      	b.n	80050fe <HAL_I2C_Init+0x92>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a7d      	ldr	r2, [pc, #500]	; (80052e8 <HAL_I2C_Init+0x27c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	bf94      	ite	ls
 80050f8:	2301      	movls	r3, #1
 80050fa:	2300      	movhi	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0e7      	b.n	80052d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4a78      	ldr	r2, [pc, #480]	; (80052ec <HAL_I2C_Init+0x280>)
 800510a:	fba2 2303 	umull	r2, r3, r2, r3
 800510e:	0c9b      	lsrs	r3, r3, #18
 8005110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	4a6a      	ldr	r2, [pc, #424]	; (80052e0 <HAL_I2C_Init+0x274>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d802      	bhi.n	8005140 <HAL_I2C_Init+0xd4>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	3301      	adds	r3, #1
 800513e:	e009      	b.n	8005154 <HAL_I2C_Init+0xe8>
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	4a69      	ldr	r2, [pc, #420]	; (80052f0 <HAL_I2C_Init+0x284>)
 800514c:	fba2 2303 	umull	r2, r3, r2, r3
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	3301      	adds	r3, #1
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	430b      	orrs	r3, r1
 800515a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	495c      	ldr	r1, [pc, #368]	; (80052e0 <HAL_I2C_Init+0x274>)
 8005170:	428b      	cmp	r3, r1
 8005172:	d819      	bhi.n	80051a8 <HAL_I2C_Init+0x13c>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	1e59      	subs	r1, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005188:	400b      	ands	r3, r1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_I2C_Init+0x138>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1e59      	subs	r1, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	fbb1 f3f3 	udiv	r3, r1, r3
 800519c:	3301      	adds	r3, #1
 800519e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a2:	e051      	b.n	8005248 <HAL_I2C_Init+0x1dc>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e04f      	b.n	8005248 <HAL_I2C_Init+0x1dc>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d111      	bne.n	80051d4 <HAL_I2C_Init+0x168>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1e58      	subs	r0, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6859      	ldr	r1, [r3, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	440b      	add	r3, r1
 80051be:	fbb0 f3f3 	udiv	r3, r0, r3
 80051c2:	3301      	adds	r3, #1
 80051c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e012      	b.n	80051fa <HAL_I2C_Init+0x18e>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1e58      	subs	r0, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6859      	ldr	r1, [r3, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	0099      	lsls	r1, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ea:	3301      	adds	r3, #1
 80051ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Init+0x196>
 80051fe:	2301      	movs	r3, #1
 8005200:	e022      	b.n	8005248 <HAL_I2C_Init+0x1dc>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10e      	bne.n	8005228 <HAL_I2C_Init+0x1bc>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1e58      	subs	r0, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	460b      	mov	r3, r1
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	440b      	add	r3, r1
 8005218:	fbb0 f3f3 	udiv	r3, r0, r3
 800521c:	3301      	adds	r3, #1
 800521e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005226:	e00f      	b.n	8005248 <HAL_I2C_Init+0x1dc>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1e58      	subs	r0, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6859      	ldr	r1, [r3, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	0099      	lsls	r1, r3, #2
 8005238:	440b      	add	r3, r1
 800523a:	fbb0 f3f3 	udiv	r3, r0, r3
 800523e:	3301      	adds	r3, #1
 8005240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	6809      	ldr	r1, [r1, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6911      	ldr	r1, [r2, #16]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68d2      	ldr	r2, [r2, #12]
 8005282:	4311      	orrs	r1, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	430b      	orrs	r3, r1
 800528a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	430a      	orrs	r2, r1
 80052a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	000186a0 	.word	0x000186a0
 80052e4:	001e847f 	.word	0x001e847f
 80052e8:	003d08ff 	.word	0x003d08ff
 80052ec:	431bde83 	.word	0x431bde83
 80052f0:	10624dd3 	.word	0x10624dd3

080052f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	461a      	mov	r2, r3
 8005300:	460b      	mov	r3, r1
 8005302:	817b      	strh	r3, [r7, #10]
 8005304:	4613      	mov	r3, r2
 8005306:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005308:	f7ff fc0c 	bl	8004b24 <HAL_GetTick>
 800530c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b20      	cmp	r3, #32
 8005318:	f040 80e0 	bne.w	80054dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2319      	movs	r3, #25
 8005322:	2201      	movs	r2, #1
 8005324:	4970      	ldr	r1, [pc, #448]	; (80054e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fc58 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
 8005334:	e0d3      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_I2C_Master_Transmit+0x50>
 8005340:	2302      	movs	r3, #2
 8005342:	e0cc      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d007      	beq.n	800536a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0201 	orr.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005378:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2221      	movs	r2, #33	; 0x21
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2210      	movs	r2, #16
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	893a      	ldrh	r2, [r7, #8]
 800539a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a50      	ldr	r2, [pc, #320]	; (80054ec <HAL_I2C_Master_Transmit+0x1f8>)
 80053aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80053ac:	8979      	ldrh	r1, [r7, #10]
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a3a      	ldr	r2, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fac2 	bl	800593c <I2C_MasterRequestWrite>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e08d      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c2:	2300      	movs	r3, #0
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80053d8:	e066      	b.n	80054a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fcd2 	bl	8005d88 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06b      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	781a      	ldrb	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b04      	cmp	r3, #4
 8005442:	d11b      	bne.n	800547c <HAL_I2C_Master_Transmit+0x188>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	781a      	ldrb	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	6a39      	ldr	r1, [r7, #32]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fcc2 	bl	8005e0a <I2C_WaitOnBTFFlagUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00d      	beq.n	80054a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	2b04      	cmp	r3, #4
 8005492:	d107      	bne.n	80054a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e01a      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d194      	bne.n	80053da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054d8:	2300      	movs	r3, #0
 80054da:	e000      	b.n	80054de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	00100002 	.word	0x00100002
 80054ec:	ffff0000 	.word	0xffff0000

080054f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af02      	add	r7, sp, #8
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	461a      	mov	r2, r3
 80054fc:	460b      	mov	r3, r1
 80054fe:	817b      	strh	r3, [r7, #10]
 8005500:	4613      	mov	r3, r2
 8005502:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005504:	f7ff fb0e 	bl	8004b24 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b20      	cmp	r3, #32
 8005514:	f040 820b 	bne.w	800592e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	2319      	movs	r3, #25
 800551e:	2201      	movs	r2, #1
 8005520:	497c      	ldr	r1, [pc, #496]	; (8005714 <HAL_I2C_Master_Receive+0x224>)
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fb5a 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800552e:	2302      	movs	r3, #2
 8005530:	e1fe      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_I2C_Master_Receive+0x50>
 800553c:	2302      	movs	r3, #2
 800553e:	e1f7      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b01      	cmp	r3, #1
 8005554:	d007      	beq.n	8005566 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005574:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2222      	movs	r2, #34	; 0x22
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2210      	movs	r2, #16
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	893a      	ldrh	r2, [r7, #8]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a5c      	ldr	r2, [pc, #368]	; (8005718 <HAL_I2C_Master_Receive+0x228>)
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055a8:	8979      	ldrh	r1, [r7, #10]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa46 	bl	8005a40 <I2C_MasterRequestRead>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e1b8      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d113      	bne.n	80055ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	623b      	str	r3, [r7, #32]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e18c      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d11b      	bne.n	800562e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e16c      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005632:	2b02      	cmp	r3, #2
 8005634:	d11b      	bne.n	800566e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005644:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005654:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	e14c      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005694:	e138      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800569a:	2b03      	cmp	r3, #3
 800569c:	f200 80f1 	bhi.w	8005882 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d123      	bne.n	80056f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 fbed 	bl	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e139      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056ee:	e10b      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d14e      	bne.n	8005796 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2200      	movs	r2, #0
 8005700:	4906      	ldr	r1, [pc, #24]	; (800571c <HAL_I2C_Master_Receive+0x22c>)
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fa6a 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e10e      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
 8005712:	bf00      	nop
 8005714:	00100002 	.word	0x00100002
 8005718:	ffff0000 	.word	0xffff0000
 800571c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	3b01      	subs	r3, #1
 8005780:	b29a      	uxth	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005794:	e0b8      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579c:	2200      	movs	r2, #0
 800579e:	4966      	ldr	r1, [pc, #408]	; (8005938 <HAL_I2C_Master_Receive+0x448>)
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fa1b 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0bf      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691a      	ldr	r2, [r3, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	2200      	movs	r2, #0
 80057fa:	494f      	ldr	r1, [pc, #316]	; (8005938 <HAL_I2C_Master_Receive+0x448>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f9ed 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e091      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691a      	ldr	r2, [r3, #16]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005880:	e042      	b.n	8005908 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fb00 	bl	8005e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e04c      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d118      	bne.n	8005908 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691a      	ldr	r2, [r3, #16]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f aec2 	bne.w	8005696 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	e000      	b.n	8005930 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800592e:	2302      	movs	r3, #2
  }
}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	00010004 	.word	0x00010004

0800593c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	460b      	mov	r3, r1
 800594a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d006      	beq.n	8005966 <I2C_MasterRequestWrite+0x2a>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d003      	beq.n	8005966 <I2C_MasterRequestWrite+0x2a>
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005964:	d108      	bne.n	8005978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e00b      	b.n	8005990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	2b12      	cmp	r3, #18
 800597e:	d107      	bne.n	8005990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800598e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f91d 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d103      	bne.n	80059c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e035      	b.n	8005a30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059cc:	d108      	bne.n	80059e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059ce:	897b      	ldrh	r3, [r7, #10]
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059dc:	611a      	str	r2, [r3, #16]
 80059de:	e01b      	b.n	8005a18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059e0:	897b      	ldrh	r3, [r7, #10]
 80059e2:	11db      	asrs	r3, r3, #7
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	f003 0306 	and.w	r3, r3, #6
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	f063 030f 	orn	r3, r3, #15
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	490e      	ldr	r1, [pc, #56]	; (8005a38 <I2C_MasterRequestWrite+0xfc>)
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 f943 	bl	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e010      	b.n	8005a30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a0e:	897b      	ldrh	r3, [r7, #10]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	4907      	ldr	r1, [pc, #28]	; (8005a3c <I2C_MasterRequestWrite+0x100>)
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f933 	bl	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	00010008 	.word	0x00010008
 8005a3c:	00010002 	.word	0x00010002

08005a40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d006      	beq.n	8005a7a <I2C_MasterRequestRead+0x3a>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d003      	beq.n	8005a7a <I2C_MasterRequestRead+0x3a>
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a78:	d108      	bne.n	8005a8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e00b      	b.n	8005aa4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	2b11      	cmp	r3, #17
 8005a92:	d107      	bne.n	8005aa4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f893 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00d      	beq.n	8005ad8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aca:	d103      	bne.n	8005ad4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e079      	b.n	8005bcc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae0:	d108      	bne.n	8005af4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ae2:	897b      	ldrh	r3, [r7, #10]
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	611a      	str	r2, [r3, #16]
 8005af2:	e05f      	b.n	8005bb4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005af4:	897b      	ldrh	r3, [r7, #10]
 8005af6:	11db      	asrs	r3, r3, #7
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0306 	and.w	r3, r3, #6
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f063 030f 	orn	r3, r3, #15
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	4930      	ldr	r1, [pc, #192]	; (8005bd4 <I2C_MasterRequestRead+0x194>)
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8b9 	bl	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e054      	b.n	8005bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b22:	897b      	ldrh	r3, [r7, #10]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4929      	ldr	r1, [pc, #164]	; (8005bd8 <I2C_MasterRequestRead+0x198>)
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f8a9 	bl	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e044      	b.n	8005bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	613b      	str	r3, [r7, #16]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f831 	bl	8005bdc <I2C_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00d      	beq.n	8005b9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d103      	bne.n	8005b98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e017      	b.n	8005bcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b9c:	897b      	ldrh	r3, [r7, #10]
 8005b9e:	11db      	asrs	r3, r3, #7
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0306 	and.w	r3, r3, #6
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f063 030e 	orn	r3, r3, #14
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	4907      	ldr	r1, [pc, #28]	; (8005bd8 <I2C_MasterRequestRead+0x198>)
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f865 	bl	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	00010008 	.word	0x00010008
 8005bd8:	00010002 	.word	0x00010002

08005bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bec:	e025      	b.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d021      	beq.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf6:	f7fe ff95 	bl	8004b24 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d302      	bcc.n	8005c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d116      	bne.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e023      	b.n	8005c82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	0c1b      	lsrs	r3, r3, #16
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d10d      	bne.n	8005c60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	e00c      	b.n	8005c7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	43da      	mvns	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bf0c      	ite	eq
 8005c72:	2301      	moveq	r3, #1
 8005c74:	2300      	movne	r3, #0
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d0b6      	beq.n	8005bee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c98:	e051      	b.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca8:	d123      	bne.n	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cc2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f043 0204 	orr.w	r2, r3, #4
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e046      	b.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf8:	d021      	beq.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfa:	f7fe ff13 	bl	8004b24 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d302      	bcc.n	8005d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d116      	bne.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e020      	b.n	8005d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d10c      	bne.n	8005d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	43da      	mvns	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4013      	ands	r3, r2
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e00b      	b.n	8005d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	43da      	mvns	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bf14      	ite	ne
 8005d74:	2301      	movne	r3, #1
 8005d76:	2300      	moveq	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d18d      	bne.n	8005c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d94:	e02d      	b.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f8ce 	bl	8005f38 <I2C_IsAcknowledgeFailed>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e02d      	b.n	8005e02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d021      	beq.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fe feb9 	bl	8004b24 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d116      	bne.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e007      	b.n	8005e02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b80      	cmp	r3, #128	; 0x80
 8005dfe:	d1ca      	bne.n	8005d96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e16:	e02d      	b.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 f88d 	bl	8005f38 <I2C_IsAcknowledgeFailed>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e02d      	b.n	8005e84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d021      	beq.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e30:	f7fe fe78 	bl	8004b24 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d116      	bne.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e007      	b.n	8005e84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d1ca      	bne.n	8005e18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e98:	e042      	b.n	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f003 0310 	and.w	r3, r3, #16
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d119      	bne.n	8005edc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0210 	mvn.w	r2, #16
 8005eb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e029      	b.n	8005f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7fe fe22 	bl	8004b24 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d116      	bne.n	8005f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e007      	b.n	8005f30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2a:	2b40      	cmp	r3, #64	; 0x40
 8005f2c:	d1b5      	bne.n	8005e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4e:	d11b      	bne.n	8005f88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	f043 0204 	orr.w	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
	...

08005f98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e267      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d075      	beq.n	80060a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fb6:	4b88      	ldr	r3, [pc, #544]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d00c      	beq.n	8005fdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fc2:	4b85      	ldr	r3, [pc, #532]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d112      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fce:	4b82      	ldr	r3, [pc, #520]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fda:	d10b      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fdc:	4b7e      	ldr	r3, [pc, #504]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05b      	beq.n	80060a0 <HAL_RCC_OscConfig+0x108>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d157      	bne.n	80060a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e242      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ffc:	d106      	bne.n	800600c <HAL_RCC_OscConfig+0x74>
 8005ffe:	4b76      	ldr	r3, [pc, #472]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a75      	ldr	r2, [pc, #468]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e01d      	b.n	8006048 <HAL_RCC_OscConfig+0xb0>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006014:	d10c      	bne.n	8006030 <HAL_RCC_OscConfig+0x98>
 8006016:	4b70      	ldr	r3, [pc, #448]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a6f      	ldr	r2, [pc, #444]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 800601c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b6d      	ldr	r3, [pc, #436]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a6c      	ldr	r2, [pc, #432]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	e00b      	b.n	8006048 <HAL_RCC_OscConfig+0xb0>
 8006030:	4b69      	ldr	r3, [pc, #420]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a68      	ldr	r2, [pc, #416]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	4b66      	ldr	r3, [pc, #408]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a65      	ldr	r2, [pc, #404]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d013      	beq.n	8006078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fe fd68 	bl	8004b24 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006058:	f7fe fd64 	bl	8004b24 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b64      	cmp	r3, #100	; 0x64
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e207      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606a:	4b5b      	ldr	r3, [pc, #364]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0xc0>
 8006076:	e014      	b.n	80060a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006078:	f7fe fd54 	bl	8004b24 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006080:	f7fe fd50 	bl	8004b24 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1f3      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006092:	4b51      	ldr	r3, [pc, #324]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0xe8>
 800609e:	e000      	b.n	80060a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d063      	beq.n	8006176 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ae:	4b4a      	ldr	r3, [pc, #296]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 030c 	and.w	r3, r3, #12
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ba:	4b47      	ldr	r3, [pc, #284]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d11c      	bne.n	8006100 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060c6:	4b44      	ldr	r3, [pc, #272]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d116      	bne.n	8006100 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	4b41      	ldr	r3, [pc, #260]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_RCC_OscConfig+0x152>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d001      	beq.n	80060ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e1c7      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060ea:	4b3b      	ldr	r3, [pc, #236]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	4937      	ldr	r1, [pc, #220]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fe:	e03a      	b.n	8006176 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d020      	beq.n	800614a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006108:	4b34      	ldr	r3, [pc, #208]	; (80061dc <HAL_RCC_OscConfig+0x244>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610e:	f7fe fd09 	bl	8004b24 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006116:	f7fe fd05 	bl	8004b24 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e1a8      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006128:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006134:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	00db      	lsls	r3, r3, #3
 8006142:	4925      	ldr	r1, [pc, #148]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 8006144:	4313      	orrs	r3, r2
 8006146:	600b      	str	r3, [r1, #0]
 8006148:	e015      	b.n	8006176 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800614a:	4b24      	ldr	r3, [pc, #144]	; (80061dc <HAL_RCC_OscConfig+0x244>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fe fce8 	bl	8004b24 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006158:	f7fe fce4 	bl	8004b24 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e187      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616a:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1f0      	bne.n	8006158 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b00      	cmp	r3, #0
 8006180:	d036      	beq.n	80061f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d016      	beq.n	80061b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800618a:	4b15      	ldr	r3, [pc, #84]	; (80061e0 <HAL_RCC_OscConfig+0x248>)
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fe fcc8 	bl	8004b24 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006198:	f7fe fcc4 	bl	8004b24 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e167      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <HAL_RCC_OscConfig+0x240>)
 80061ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d0f0      	beq.n	8006198 <HAL_RCC_OscConfig+0x200>
 80061b6:	e01b      	b.n	80061f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b8:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <HAL_RCC_OscConfig+0x248>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061be:	f7fe fcb1 	bl	8004b24 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c4:	e00e      	b.n	80061e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061c6:	f7fe fcad 	bl	8004b24 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d907      	bls.n	80061e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e150      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
 80061d8:	40023800 	.word	0x40023800
 80061dc:	42470000 	.word	0x42470000
 80061e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e4:	4b88      	ldr	r3, [pc, #544]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80061e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1ea      	bne.n	80061c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8097 	beq.w	800632c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006202:	4b81      	ldr	r3, [pc, #516]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10f      	bne.n	800622e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	4b7d      	ldr	r3, [pc, #500]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800621c:	6413      	str	r3, [r2, #64]	; 0x40
 800621e:	4b7a      	ldr	r3, [pc, #488]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800622a:	2301      	movs	r3, #1
 800622c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622e:	4b77      	ldr	r3, [pc, #476]	; (800640c <HAL_RCC_OscConfig+0x474>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006236:	2b00      	cmp	r3, #0
 8006238:	d118      	bne.n	800626c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623a:	4b74      	ldr	r3, [pc, #464]	; (800640c <HAL_RCC_OscConfig+0x474>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a73      	ldr	r2, [pc, #460]	; (800640c <HAL_RCC_OscConfig+0x474>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006246:	f7fe fc6d 	bl	8004b24 <HAL_GetTick>
 800624a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624c:	e008      	b.n	8006260 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624e:	f7fe fc69 	bl	8004b24 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e10c      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	4b6a      	ldr	r3, [pc, #424]	; (800640c <HAL_RCC_OscConfig+0x474>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d0f0      	beq.n	800624e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d106      	bne.n	8006282 <HAL_RCC_OscConfig+0x2ea>
 8006274:	4b64      	ldr	r3, [pc, #400]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006278:	4a63      	ldr	r2, [pc, #396]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	6713      	str	r3, [r2, #112]	; 0x70
 8006280:	e01c      	b.n	80062bc <HAL_RCC_OscConfig+0x324>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b05      	cmp	r3, #5
 8006288:	d10c      	bne.n	80062a4 <HAL_RCC_OscConfig+0x30c>
 800628a:	4b5f      	ldr	r3, [pc, #380]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	4a5e      	ldr	r2, [pc, #376]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006290:	f043 0304 	orr.w	r3, r3, #4
 8006294:	6713      	str	r3, [r2, #112]	; 0x70
 8006296:	4b5c      	ldr	r3, [pc, #368]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	4a5b      	ldr	r2, [pc, #364]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6713      	str	r3, [r2, #112]	; 0x70
 80062a2:	e00b      	b.n	80062bc <HAL_RCC_OscConfig+0x324>
 80062a4:	4b58      	ldr	r3, [pc, #352]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80062a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a8:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	6713      	str	r3, [r2, #112]	; 0x70
 80062b0:	4b55      	ldr	r3, [pc, #340]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80062b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b4:	4a54      	ldr	r2, [pc, #336]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80062b6:	f023 0304 	bic.w	r3, r3, #4
 80062ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d015      	beq.n	80062f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c4:	f7fe fc2e 	bl	8004b24 <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ca:	e00a      	b.n	80062e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062cc:	f7fe fc2a 	bl	8004b24 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e0cb      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e2:	4b49      	ldr	r3, [pc, #292]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80062e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0ee      	beq.n	80062cc <HAL_RCC_OscConfig+0x334>
 80062ee:	e014      	b.n	800631a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f0:	f7fe fc18 	bl	8004b24 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f6:	e00a      	b.n	800630e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f8:	f7fe fc14 	bl	8004b24 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	; 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e0b5      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800630e:	4b3e      	ldr	r3, [pc, #248]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1ee      	bne.n	80062f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d105      	bne.n	800632c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006320:	4b39      	ldr	r3, [pc, #228]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	4a38      	ldr	r2, [pc, #224]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a1 	beq.w	8006478 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006336:	4b34      	ldr	r3, [pc, #208]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 030c 	and.w	r3, r3, #12
 800633e:	2b08      	cmp	r3, #8
 8006340:	d05c      	beq.n	80063fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d141      	bne.n	80063ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_RCC_OscConfig+0x478>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006350:	f7fe fbe8 	bl	8004b24 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006358:	f7fe fbe4 	bl	8004b24 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e087      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800636a:	4b27      	ldr	r3, [pc, #156]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	019b      	lsls	r3, r3, #6
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	3b01      	subs	r3, #1
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	061b      	lsls	r3, r3, #24
 800639a:	491b      	ldr	r1, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 800639c:	4313      	orrs	r3, r2
 800639e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCC_OscConfig+0x478>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a6:	f7fe fbbd 	bl	8004b24 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ae:	f7fe fbb9 	bl	8004b24 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e05c      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c0:	4b11      	ldr	r3, [pc, #68]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x416>
 80063cc:	e054      	b.n	8006478 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_RCC_OscConfig+0x478>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7fe fba6 	bl	8004b24 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fe fba2 	bl	8004b24 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e045      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_OscConfig+0x470>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x444>
 80063fa:	e03d      	b.n	8006478 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d107      	bne.n	8006414 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e038      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
 8006408:	40023800 	.word	0x40023800
 800640c:	40007000 	.word	0x40007000
 8006410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <HAL_RCC_OscConfig+0x4ec>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d028      	beq.n	8006474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d121      	bne.n	8006474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d11a      	bne.n	8006474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800644a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800644c:	4293      	cmp	r3, r2
 800644e:	d111      	bne.n	8006474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	3b01      	subs	r3, #1
 800645e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d107      	bne.n	8006474 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d001      	beq.n	8006478 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023800 	.word	0x40023800

08006488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0cc      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800649c:	4b68      	ldr	r3, [pc, #416]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d90c      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b2:	4b63      	ldr	r3, [pc, #396]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0b8      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d020      	beq.n	8006512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064dc:	4b59      	ldr	r3, [pc, #356]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064f4:	4b53      	ldr	r3, [pc, #332]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	4a52      	ldr	r2, [pc, #328]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006500:	4b50      	ldr	r3, [pc, #320]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	494d      	ldr	r1, [pc, #308]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d044      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d107      	bne.n	8006536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d119      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e07f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d003      	beq.n	8006546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006542:	2b03      	cmp	r3, #3
 8006544:	d107      	bne.n	8006556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006546:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e06f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006556:	4b3b      	ldr	r3, [pc, #236]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e067      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006566:	4b37      	ldr	r3, [pc, #220]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 0203 	bic.w	r2, r3, #3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4934      	ldr	r1, [pc, #208]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	4313      	orrs	r3, r2
 8006576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006578:	f7fe fad4 	bl	8004b24 <HAL_GetTick>
 800657c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657e:	e00a      	b.n	8006596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006580:	f7fe fad0 	bl	8004b24 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f241 3288 	movw	r2, #5000	; 0x1388
 800658e:	4293      	cmp	r3, r2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e04f      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 020c 	and.w	r2, r3, #12
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d1eb      	bne.n	8006580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a8:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d20c      	bcs.n	80065d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b6:	4b22      	ldr	r3, [pc, #136]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_RCC_ClockConfig+0x1b8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d001      	beq.n	80065d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e032      	b.n	8006636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	4916      	ldr	r1, [pc, #88]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d009      	beq.n	800660e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	490e      	ldr	r1, [pc, #56]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	4313      	orrs	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800660e:	f000 f821 	bl	8006654 <HAL_RCC_GetSysClockFreq>
 8006612:	4602      	mov	r2, r0
 8006614:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	091b      	lsrs	r3, r3, #4
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	490a      	ldr	r1, [pc, #40]	; (8006648 <HAL_RCC_ClockConfig+0x1c0>)
 8006620:	5ccb      	ldrb	r3, [r1, r3]
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <HAL_RCC_ClockConfig+0x1c4>)
 8006628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800662a:	4b09      	ldr	r3, [pc, #36]	; (8006650 <HAL_RCC_ClockConfig+0x1c8>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe f8ae 	bl	8004790 <HAL_InitTick>

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40023c00 	.word	0x40023c00
 8006644:	40023800 	.word	0x40023800
 8006648:	08010bc8 	.word	0x08010bc8
 800664c:	20000004 	.word	0x20000004
 8006650:	20000008 	.word	0x20000008

08006654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006658:	b090      	sub	sp, #64	; 0x40
 800665a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006664:	2300      	movs	r3, #0
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800666c:	4b59      	ldr	r3, [pc, #356]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b08      	cmp	r3, #8
 8006676:	d00d      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0x40>
 8006678:	2b08      	cmp	r3, #8
 800667a:	f200 80a1 	bhi.w	80067c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_RCC_GetSysClockFreq+0x34>
 8006682:	2b04      	cmp	r3, #4
 8006684:	d003      	beq.n	800668e <HAL_RCC_GetSysClockFreq+0x3a>
 8006686:	e09b      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006688:	4b53      	ldr	r3, [pc, #332]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800668c:	e09b      	b.n	80067c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800668e:	4b53      	ldr	r3, [pc, #332]	; (80067dc <HAL_RCC_GetSysClockFreq+0x188>)
 8006690:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006692:	e098      	b.n	80067c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006694:	4b4f      	ldr	r3, [pc, #316]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800669e:	4b4d      	ldr	r3, [pc, #308]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d028      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066aa:	4b4a      	ldr	r3, [pc, #296]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	099b      	lsrs	r3, r3, #6
 80066b0:	2200      	movs	r2, #0
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	627a      	str	r2, [r7, #36]	; 0x24
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066bc:	2100      	movs	r1, #0
 80066be:	4b47      	ldr	r3, [pc, #284]	; (80067dc <HAL_RCC_GetSysClockFreq+0x188>)
 80066c0:	fb03 f201 	mul.w	r2, r3, r1
 80066c4:	2300      	movs	r3, #0
 80066c6:	fb00 f303 	mul.w	r3, r0, r3
 80066ca:	4413      	add	r3, r2
 80066cc:	4a43      	ldr	r2, [pc, #268]	; (80067dc <HAL_RCC_GetSysClockFreq+0x188>)
 80066ce:	fba0 1202 	umull	r1, r2, r0, r2
 80066d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066d4:	460a      	mov	r2, r1
 80066d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80066d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066da:	4413      	add	r3, r2
 80066dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e0:	2200      	movs	r2, #0
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	61fa      	str	r2, [r7, #28]
 80066e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066ee:	f7fa fad3 	bl	8000c98 <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4613      	mov	r3, r2
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fa:	e053      	b.n	80067a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066fc:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	2200      	movs	r2, #0
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	617a      	str	r2, [r7, #20]
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800670e:	f04f 0b00 	mov.w	fp, #0
 8006712:	4652      	mov	r2, sl
 8006714:	465b      	mov	r3, fp
 8006716:	f04f 0000 	mov.w	r0, #0
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	0159      	lsls	r1, r3, #5
 8006720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006724:	0150      	lsls	r0, r2, #5
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	ebb2 080a 	subs.w	r8, r2, sl
 800672e:	eb63 090b 	sbc.w	r9, r3, fp
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800673e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006742:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006746:	ebb2 0408 	subs.w	r4, r2, r8
 800674a:	eb63 0509 	sbc.w	r5, r3, r9
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	00eb      	lsls	r3, r5, #3
 8006758:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800675c:	00e2      	lsls	r2, r4, #3
 800675e:	4614      	mov	r4, r2
 8006760:	461d      	mov	r5, r3
 8006762:	eb14 030a 	adds.w	r3, r4, sl
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	eb45 030b 	adc.w	r3, r5, fp
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800677a:	4629      	mov	r1, r5
 800677c:	028b      	lsls	r3, r1, #10
 800677e:	4621      	mov	r1, r4
 8006780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006784:	4621      	mov	r1, r4
 8006786:	028a      	lsls	r2, r1, #10
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	2200      	movs	r2, #0
 8006790:	60bb      	str	r3, [r7, #8]
 8006792:	60fa      	str	r2, [r7, #12]
 8006794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006798:	f7fa fa7e 	bl	8000c98 <__aeabi_uldivmod>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4613      	mov	r3, r2
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	3301      	adds	r3, #1
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80067b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067be:	e002      	b.n	80067c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067c0:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80067c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3740      	adds	r7, #64	; 0x40
 80067cc:	46bd      	mov	sp, r7
 80067ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800
 80067d8:	00f42400 	.word	0x00f42400
 80067dc:	017d7840 	.word	0x017d7840

080067e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000004 	.word	0x20000004

080067f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067fc:	f7ff fff0 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	0a9b      	lsrs	r3, r3, #10
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	4903      	ldr	r1, [pc, #12]	; (800681c <HAL_RCC_GetPCLK1Freq+0x24>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006814:	4618      	mov	r0, r3
 8006816:	bd80      	pop	{r7, pc}
 8006818:	40023800 	.word	0x40023800
 800681c:	08010bd8 	.word	0x08010bd8

08006820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006824:	f7ff ffdc 	bl	80067e0 <HAL_RCC_GetHCLKFreq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b05      	ldr	r3, [pc, #20]	; (8006840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	0b5b      	lsrs	r3, r3, #13
 8006830:	f003 0307 	and.w	r3, r3, #7
 8006834:	4903      	ldr	r1, [pc, #12]	; (8006844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006836:	5ccb      	ldrb	r3, [r1, r3]
 8006838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	bd80      	pop	{r7, pc}
 8006840:	40023800 	.word	0x40023800
 8006844:	08010bd8 	.word	0x08010bd8

08006848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	220f      	movs	r2, #15
 8006856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006858:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <HAL_RCC_GetClockConfig+0x5c>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 0203 	and.w	r2, r3, #3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006864:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006870:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <HAL_RCC_GetClockConfig+0x5c>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800687c:	4b09      	ldr	r3, [pc, #36]	; (80068a4 <HAL_RCC_GetClockConfig+0x5c>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	08db      	lsrs	r3, r3, #3
 8006882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_RCC_GetClockConfig+0x60>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	601a      	str	r2, [r3, #0]
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40023c00 	.word	0x40023c00

080068ac <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80068b2:	f7fe f937 	bl	8004b24 <HAL_GetTick>
 80068b6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80068b8:	4b5d      	ldr	r3, [pc, #372]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5c      	ldr	r2, [pc, #368]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068be:	f043 0301 	orr.w	r3, r3, #1
 80068c2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80068c4:	e008      	b.n	80068d8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068c6:	f7fe f92d 	bl	8004b24 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e0a7      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80068d8:	4b55      	ldr	r3, [pc, #340]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0f0      	beq.n	80068c6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80068e4:	4b52      	ldr	r3, [pc, #328]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a51      	ldr	r2, [pc, #324]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80068f0:	f7fe f918 	bl	8004b24 <HAL_GetTick>
 80068f4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80068f6:	4b4e      	ldr	r3, [pc, #312]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80068fc:	e00a      	b.n	8006914 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fe:	f7fe f911 	bl	8004b24 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e089      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8006914:	4b46      	ldr	r3, [pc, #280]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 030c 	and.w	r3, r3, #12
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1ee      	bne.n	80068fe <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006920:	f7fe f900 	bl	8004b24 <HAL_GetTick>
 8006924:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a41      	ldr	r2, [pc, #260]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 800692c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8006930:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006932:	e008      	b.n	8006946 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006934:	f7fe f8f6 	bl	8004b24 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b64      	cmp	r3, #100	; 0x64
 8006940:	d901      	bls.n	8006946 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e070      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8006946:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006952:	f7fe f8e7 	bl	8004b24 <HAL_GetTick>
 8006956:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006958:	4b35      	ldr	r3, [pc, #212]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a34      	ldr	r2, [pc, #208]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 800695e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006962:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006964:	e008      	b.n	8006978 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006966:	f7fe f8dd 	bl	8004b24 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e057      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8006978:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8006984:	f7fe f8ce 	bl	8004b24 <HAL_GetTick>
 8006988:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 800698a:	4b29      	ldr	r3, [pc, #164]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a28      	ldr	r2, [pc, #160]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006990:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006994:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006998:	f7fe f8c4 	bl	8004b24 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e03e      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80069aa:	4b21      	ldr	r3, [pc, #132]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80069b6:	4b1e      	ldr	r3, [pc, #120]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_RCC_DeInit+0x188>)
 80069ba:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80069bc:	4b1c      	ldr	r3, [pc, #112]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069be:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <HAL_RCC_DeInit+0x18c>)
 80069c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80069c4:	4b1a      	ldr	r3, [pc, #104]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4a19      	ldr	r2, [pc, #100]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80069ce:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069da:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80069dc:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069e2:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80069e6:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80069e8:	4b11      	ldr	r3, [pc, #68]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	4a10      	ldr	r2, [pc, #64]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069f2:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80069f4:	4b0e      	ldr	r3, [pc, #56]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f8:	4a0d      	ldr	r2, [pc, #52]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a04:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <HAL_RCC_DeInit+0x184>)
 8006a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a0a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <HAL_RCC_DeInit+0x190>)
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <HAL_RCC_DeInit+0x194>)
 8006a10:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a12:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <HAL_RCC_DeInit+0x198>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fd feba 	bl	8004790 <HAL_InitTick>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	40023800 	.word	0x40023800
 8006a34:	04003010 	.word	0x04003010
 8006a38:	20003000 	.word	0x20003000
 8006a3c:	20000004 	.word	0x20000004
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	20000008 	.word	0x20000008

08006a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e041      	b.n	8006ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d106      	bne.n	8006a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f839 	bl	8006ae6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	4610      	mov	r0, r2
 8006a88:	f000 f9ca 	bl	8006e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b083      	sub	sp, #12
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d001      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e044      	b.n	8006b9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <HAL_TIM_Base_Start_IT+0xb0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d018      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d013      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a19      	ldr	r2, [pc, #100]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d009      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d004      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x6c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a16      	ldr	r2, [pc, #88]	; (8006bbc <HAL_TIM_Base_Start_IT+0xc0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d111      	bne.n	8006b8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b06      	cmp	r3, #6
 8006b78:	d010      	beq.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	e007      	b.n	8006b9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0201 	orr.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40014000 	.word	0x40014000

08006bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0302 	and.w	r3, r3, #2
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d122      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d11b      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0202 	mvn.w	r2, #2
 8006bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f8ee 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8e0 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8f1 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d122      	bne.n	8006c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d11b      	bne.n	8006c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0204 	mvn.w	r2, #4
 8006c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2202      	movs	r2, #2
 8006c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f8c4 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006c5c:	e005      	b.n	8006c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8b6 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f8c7 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d122      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f003 0308 	and.w	r3, r3, #8
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d11b      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0208 	mvn.w	r2, #8
 8006c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2204      	movs	r2, #4
 8006c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f89a 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006cb0:	e005      	b.n	8006cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f88c 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f89d 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0310 	and.w	r3, r3, #16
 8006cce:	2b10      	cmp	r3, #16
 8006cd0:	d122      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b10      	cmp	r3, #16
 8006cde:	d11b      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0210 	mvn.w	r2, #16
 8006ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2208      	movs	r2, #8
 8006cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f870 	bl	8006de4 <HAL_TIM_IC_CaptureCallback>
 8006d04:	e005      	b.n	8006d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f862 	bl	8006dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f873 	bl	8006df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d10e      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d107      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0201 	mvn.w	r2, #1
 8006d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fd fce2 	bl	8004708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d10e      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	d107      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f8e2 	bl	8006f34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d10e      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d107      	bne.n	8006d9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f838 	bl	8006e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b20      	cmp	r3, #32
 8006da8:	d10e      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d107      	bne.n	8006dc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0220 	mvn.w	r2, #32
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f8ac 	bl	8006f20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a34      	ldr	r2, [pc, #208]	; (8006f04 <TIM_Base_SetConfig+0xe4>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00f      	beq.n	8006e58 <TIM_Base_SetConfig+0x38>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3e:	d00b      	beq.n	8006e58 <TIM_Base_SetConfig+0x38>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a31      	ldr	r2, [pc, #196]	; (8006f08 <TIM_Base_SetConfig+0xe8>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d007      	beq.n	8006e58 <TIM_Base_SetConfig+0x38>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <TIM_Base_SetConfig+0xec>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_Base_SetConfig+0x38>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a2f      	ldr	r2, [pc, #188]	; (8006f10 <TIM_Base_SetConfig+0xf0>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d108      	bne.n	8006e6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a25      	ldr	r2, [pc, #148]	; (8006f04 <TIM_Base_SetConfig+0xe4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d01b      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e78:	d017      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <TIM_Base_SetConfig+0xe8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <TIM_Base_SetConfig+0xec>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00f      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <TIM_Base_SetConfig+0xf0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00b      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <TIM_Base_SetConfig+0xf4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d007      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a1e      	ldr	r2, [pc, #120]	; (8006f18 <TIM_Base_SetConfig+0xf8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d003      	beq.n	8006eaa <TIM_Base_SetConfig+0x8a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <TIM_Base_SetConfig+0xfc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <TIM_Base_SetConfig+0xe4>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d103      	bne.n	8006ef0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	615a      	str	r2, [r3, #20]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <__NVIC_SetPriority>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db0a      	blt.n	8006f72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	490c      	ldr	r1, [pc, #48]	; (8006f94 <__NVIC_SetPriority+0x4c>)
 8006f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f66:	0112      	lsls	r2, r2, #4
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f70:	e00a      	b.n	8006f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4908      	ldr	r1, [pc, #32]	; (8006f98 <__NVIC_SetPriority+0x50>)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	3b04      	subs	r3, #4
 8006f80:	0112      	lsls	r2, r2, #4
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	440b      	add	r3, r1
 8006f86:	761a      	strb	r2, [r3, #24]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	e000e100 	.word	0xe000e100
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fa0:	4b05      	ldr	r3, [pc, #20]	; (8006fb8 <SysTick_Handler+0x1c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fa4:	f001 fd28 	bl	80089f8 <xTaskGetSchedulerState>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d001      	beq.n	8006fb2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fae:	f002 fb13 	bl	80095d8 <xPortSysTickHandler>
  }
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	e000e010 	.word	0xe000e010

08006fbc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f06f 0004 	mvn.w	r0, #4
 8006fc6:	f7ff ffbf 	bl	8006f48 <__NVIC_SetPriority>
#endif
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fd6:	f3ef 8305 	mrs	r3, IPSR
 8006fda:	603b      	str	r3, [r7, #0]
  return(result);
 8006fdc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fe2:	f06f 0305 	mvn.w	r3, #5
 8006fe6:	607b      	str	r3, [r7, #4]
 8006fe8:	e00c      	b.n	8007004 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fea:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <osKernelInitialize+0x44>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <osKernelInitialize+0x44>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	e002      	b.n	8007004 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8007002:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007004:	687b      	ldr	r3, [r7, #4]
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	20000740 	.word	0x20000740

08007018 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800701e:	f3ef 8305 	mrs	r3, IPSR
 8007022:	603b      	str	r3, [r7, #0]
  return(result);
 8007024:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <osKernelStart+0x1a>
    stat = osErrorISR;
 800702a:	f06f 0305 	mvn.w	r3, #5
 800702e:	607b      	str	r3, [r7, #4]
 8007030:	e010      	b.n	8007054 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <osKernelStart+0x48>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d109      	bne.n	800704e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800703a:	f7ff ffbf 	bl	8006fbc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800703e:	4b08      	ldr	r3, [pc, #32]	; (8007060 <osKernelStart+0x48>)
 8007040:	2202      	movs	r2, #2
 8007042:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007044:	f001 f87c 	bl	8008140 <vTaskStartScheduler>
      stat = osOK;
 8007048:	2300      	movs	r3, #0
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e002      	b.n	8007054 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800704e:	f04f 33ff 	mov.w	r3, #4294967295
 8007052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007054:	687b      	ldr	r3, [r7, #4]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	20000740 	.word	0x20000740

08007064 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b08e      	sub	sp, #56	; 0x38
 8007068:	af04      	add	r7, sp, #16
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007074:	f3ef 8305 	mrs	r3, IPSR
 8007078:	617b      	str	r3, [r7, #20]
  return(result);
 800707a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800707c:	2b00      	cmp	r3, #0
 800707e:	d17e      	bne.n	800717e <osThreadNew+0x11a>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d07b      	beq.n	800717e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007086:	2380      	movs	r3, #128	; 0x80
 8007088:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800708a:	2318      	movs	r3, #24
 800708c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800708e:	2300      	movs	r3, #0
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007092:	f04f 33ff 	mov.w	r3, #4294967295
 8007096:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d045      	beq.n	800712a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d002      	beq.n	80070ac <osThreadNew+0x48>
        name = attr->name;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <osThreadNew+0x6e>
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	2b38      	cmp	r3, #56	; 0x38
 80070c4:	d805      	bhi.n	80070d2 <osThreadNew+0x6e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <osThreadNew+0x72>
        return (NULL);
 80070d2:	2300      	movs	r3, #0
 80070d4:	e054      	b.n	8007180 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	089b      	lsrs	r3, r3, #2
 80070e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00e      	beq.n	800710c <osThreadNew+0xa8>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2bbb      	cmp	r3, #187	; 0xbb
 80070f4:	d90a      	bls.n	800710c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d006      	beq.n	800710c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <osThreadNew+0xa8>
        mem = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	e010      	b.n	800712e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10c      	bne.n	800712e <osThreadNew+0xca>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <osThreadNew+0xca>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d104      	bne.n	800712e <osThreadNew+0xca>
          mem = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	61bb      	str	r3, [r7, #24]
 8007128:	e001      	b.n	800712e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d110      	bne.n	8007156 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800713c:	9202      	str	r2, [sp, #8]
 800713e:	9301      	str	r3, [sp, #4]
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6a3a      	ldr	r2, [r7, #32]
 8007148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fe0c 	bl	8007d68 <xTaskCreateStatic>
 8007150:	4603      	mov	r3, r0
 8007152:	613b      	str	r3, [r7, #16]
 8007154:	e013      	b.n	800717e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d110      	bne.n	800717e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	b29a      	uxth	r2, r3
 8007160:	f107 0310 	add.w	r3, r7, #16
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fe57 	bl	8007e22 <xTaskCreate>
 8007174:	4603      	mov	r3, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	d001      	beq.n	800717e <osThreadNew+0x11a>
            hTask = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800717e:	693b      	ldr	r3, [r7, #16]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3728      	adds	r7, #40	; 0x28
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007190:	f3ef 8305 	mrs	r3, IPSR
 8007194:	60bb      	str	r3, [r7, #8]
  return(result);
 8007196:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <osDelay+0x1c>
    stat = osErrorISR;
 800719c:	f06f 0305 	mvn.w	r3, #5
 80071a0:	60fb      	str	r3, [r7, #12]
 80071a2:	e007      	b.n	80071b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 ff92 	bl	80080d8 <vTaskDelay>
    }
  }

  return (stat);
 80071b4:	68fb      	ldr	r3, [r7, #12]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a07      	ldr	r2, [pc, #28]	; (80071ec <vApplicationGetIdleTaskMemory+0x2c>)
 80071d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <vApplicationGetIdleTaskMemory+0x30>)
 80071d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	601a      	str	r2, [r3, #0]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	20000744 	.word	0x20000744
 80071f0:	20000800 	.word	0x20000800

080071f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a07      	ldr	r2, [pc, #28]	; (8007220 <vApplicationGetTimerTaskMemory+0x2c>)
 8007204:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4a06      	ldr	r2, [pc, #24]	; (8007224 <vApplicationGetTimerTaskMemory+0x30>)
 800720a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000a00 	.word	0x20000a00
 8007224:	20000abc 	.word	0x20000abc

08007228 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f103 0208 	add.w	r2, r3, #8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f04f 32ff 	mov.w	r2, #4294967295
 8007240:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f103 0208 	add.w	r2, r3, #8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0208 	add.w	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007282:	b480      	push	{r7}
 8007284:	b085      	sub	sp, #20
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	601a      	str	r2, [r3, #0]
}
 80072be:	bf00      	nop
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d103      	bne.n	80072ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e00c      	b.n	8007304 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	3308      	adds	r3, #8
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e002      	b.n	80072f8 <vListInsert+0x2e>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	429a      	cmp	r2, r3
 8007302:	d2f6      	bcs.n	80072f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	601a      	str	r2, [r3, #0]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6892      	ldr	r2, [r2, #8]
 8007352:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6852      	ldr	r2, [r2, #4]
 800735c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d103      	bne.n	8007370 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	1e5a      	subs	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3714      	adds	r7, #20
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073ba:	f002 f87b 	bl	80094b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073ca:	fb01 f303 	mul.w	r3, r1, r3
 80073ce:	441a      	add	r2, r3
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ea:	3b01      	subs	r3, #1
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	441a      	add	r2, r3
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	22ff      	movs	r2, #255	; 0xff
 80073fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d114      	bne.n	800743a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3310      	adds	r3, #16
 800741c:	4618      	mov	r0, r3
 800741e:	f001 f929 	bl	8008674 <xTaskRemoveFromEventList>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d012      	beq.n	800744e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <xQueueGenericReset+0xcc>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	e009      	b.n	800744e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3310      	adds	r3, #16
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fef2 	bl	8007228 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3324      	adds	r3, #36	; 0x24
 8007448:	4618      	mov	r0, r3
 800744a:	f7ff feed 	bl	8007228 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800744e:	f002 f861 	bl	8009514 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007452:	2301      	movs	r3, #1
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10a      	bne.n	800748a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007486:	bf00      	nop
 8007488:	e7fe      	b.n	8007488 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <xQueueGenericCreateStatic+0x52>
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <xQueueGenericCreateStatic+0x56>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <xQueueGenericCreateStatic+0x58>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	623b      	str	r3, [r7, #32]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <xQueueGenericCreateStatic+0x7e>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <xQueueGenericCreateStatic+0x82>
 80074de:	2301      	movs	r3, #1
 80074e0:	e000      	b.n	80074e4 <xQueueGenericCreateStatic+0x84>
 80074e2:	2300      	movs	r3, #0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	61fb      	str	r3, [r7, #28]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074fe:	2350      	movs	r3, #80	; 0x50
 8007500:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d00a      	beq.n	800751e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	61bb      	str	r3, [r7, #24]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800751e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007532:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	4613      	mov	r3, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f805 	bl	8007550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007548:	4618      	mov	r0, r3
 800754a:	3730      	adds	r7, #48	; 0x30
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e002      	b.n	8007572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800757e:	2101      	movs	r1, #1
 8007580:	69b8      	ldr	r0, [r7, #24]
 8007582:	f7ff ff05 	bl	8007390 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075a6:	2300      	movs	r3, #0
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10a      	bne.n	80075ca <xQueueGenericSend+0x32>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d103      	bne.n	80075d8 <xQueueGenericSend+0x40>
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <xQueueGenericSend+0x44>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <xQueueGenericSend+0x46>
 80075dc:	2300      	movs	r3, #0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10a      	bne.n	80075f8 <xQueueGenericSend+0x60>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d103      	bne.n	8007606 <xQueueGenericSend+0x6e>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <xQueueGenericSend+0x72>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <xQueueGenericSend+0x74>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xQueueGenericSend+0x8e>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	623b      	str	r3, [r7, #32]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007626:	f001 f9e7 	bl	80089f8 <xTaskGetSchedulerState>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d102      	bne.n	8007636 <xQueueGenericSend+0x9e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <xQueueGenericSend+0xa2>
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <xQueueGenericSend+0xa4>
 800763a:	2300      	movs	r3, #0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xQueueGenericSend+0xbe>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	61fb      	str	r3, [r7, #28]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007656:	f001 ff2d 	bl	80094b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007662:	429a      	cmp	r2, r3
 8007664:	d302      	bcc.n	800766c <xQueueGenericSend+0xd4>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d129      	bne.n	80076c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800766c:	683a      	ldr	r2, [r7, #0]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007672:	f000 fa0b 	bl	8007a8c <prvCopyDataToQueue>
 8007676:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	3324      	adds	r3, #36	; 0x24
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fff5 	bl	8008674 <xTaskRemoveFromEventList>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d013      	beq.n	80076b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007690:	4b3f      	ldr	r3, [pc, #252]	; (8007790 <xQueueGenericSend+0x1f8>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	e00a      	b.n	80076b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076a8:	4b39      	ldr	r3, [pc, #228]	; (8007790 <xQueueGenericSend+0x1f8>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076b8:	f001 ff2c 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 80076bc:	2301      	movs	r3, #1
 80076be:	e063      	b.n	8007788 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d103      	bne.n	80076ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076c6:	f001 ff25 	bl	8009514 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e05c      	b.n	8007788 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d106      	bne.n	80076e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 f82f 	bl	800873c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076de:	2301      	movs	r3, #1
 80076e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076e2:	f001 ff17 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076e6:	f000 fd9b 	bl	8008220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076ea:	f001 fee3 	bl	80094b4 <vPortEnterCritical>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076f4:	b25b      	sxtb	r3, r3
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d103      	bne.n	8007704 <xQueueGenericSend+0x16c>
 80076fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800770a:	b25b      	sxtb	r3, r3
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d103      	bne.n	800771a <xQueueGenericSend+0x182>
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800771a:	f001 fefb 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800771e:	1d3a      	adds	r2, r7, #4
 8007720:	f107 0314 	add.w	r3, r7, #20
 8007724:	4611      	mov	r1, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f001 f81e 	bl	8008768 <xTaskCheckForTimeOut>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d124      	bne.n	800777c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007734:	f000 faa2 	bl	8007c7c <prvIsQueueFull>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d018      	beq.n	8007770 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	3310      	adds	r3, #16
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f000 ff44 	bl	80085d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800774c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800774e:	f000 fa2d 	bl	8007bac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007752:	f000 fd73 	bl	800823c <xTaskResumeAll>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	f47f af7c 	bne.w	8007656 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <xQueueGenericSend+0x1f8>)
 8007760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	e772      	b.n	8007656 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007772:	f000 fa1b 	bl	8007bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007776:	f000 fd61 	bl	800823c <xTaskResumeAll>
 800777a:	e76c      	b.n	8007656 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800777c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800777e:	f000 fa15 	bl	8007bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007782:	f000 fd5b 	bl	800823c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007788:	4618      	mov	r0, r3
 800778a:	3738      	adds	r7, #56	; 0x38
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	e000ed04 	.word	0xe000ed04

08007794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b090      	sub	sp, #64	; 0x40
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <xQueueGenericSendFromISR+0x3c>
 80077c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <xQueueGenericSendFromISR+0x40>
 80077d0:	2301      	movs	r3, #1
 80077d2:	e000      	b.n	80077d6 <xQueueGenericSendFromISR+0x42>
 80077d4:	2300      	movs	r3, #0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10a      	bne.n	80077f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80077da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077de:	f383 8811 	msr	BASEPRI, r3
 80077e2:	f3bf 8f6f 	isb	sy
 80077e6:	f3bf 8f4f 	dsb	sy
 80077ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077ec:	bf00      	nop
 80077ee:	e7fe      	b.n	80077ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d103      	bne.n	80077fe <xQueueGenericSendFromISR+0x6a>
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <xQueueGenericSendFromISR+0x6e>
 80077fe:	2301      	movs	r3, #1
 8007800:	e000      	b.n	8007804 <xQueueGenericSendFromISR+0x70>
 8007802:	2300      	movs	r3, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	623b      	str	r3, [r7, #32]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800781e:	f001 ff2b 	bl	8009678 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007822:	f3ef 8211 	mrs	r2, BASEPRI
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	61fa      	str	r2, [r7, #28]
 8007838:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800783a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800783e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	429a      	cmp	r2, r3
 8007848:	d302      	bcc.n	8007850 <xQueueGenericSendFromISR+0xbc>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d12f      	bne.n	80078b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800785a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007866:	f000 f911 	bl	8007a8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800786a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d112      	bne.n	800789a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800787c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fef7 	bl	8008674 <xTaskRemoveFromEventList>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	e007      	b.n	80078aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800789a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800789e:	3301      	adds	r3, #1
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	b25a      	sxtb	r2, r3
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078aa:	2301      	movs	r3, #1
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80078ae:	e001      	b.n	80078b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3740      	adds	r7, #64	; 0x40
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08c      	sub	sp, #48	; 0x30
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078d8:	2300      	movs	r3, #0
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <xQueueReceive+0x30>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	623b      	str	r3, [r7, #32]
}
 80078f8:	bf00      	nop
 80078fa:	e7fe      	b.n	80078fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d103      	bne.n	800790a <xQueueReceive+0x3e>
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <xQueueReceive+0x42>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <xQueueReceive+0x44>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xQueueReceive+0x5e>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	61fb      	str	r3, [r7, #28]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800792a:	f001 f865 	bl	80089f8 <xTaskGetSchedulerState>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <xQueueReceive+0x6e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <xQueueReceive+0x72>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueReceive+0x74>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueReceive+0x8e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61bb      	str	r3, [r7, #24]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800795a:	f001 fdab 	bl	80094b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d01f      	beq.n	80079aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800796e:	f000 f8f7 	bl	8007b60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	1e5a      	subs	r2, r3, #1
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00f      	beq.n	80079a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	3310      	adds	r3, #16
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fe74 	bl	8008674 <xTaskRemoveFromEventList>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007992:	4b3d      	ldr	r3, [pc, #244]	; (8007a88 <xQueueReceive+0x1bc>)
 8007994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079a2:	f001 fdb7 	bl	8009514 <vPortExitCritical>
				return pdPASS;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e069      	b.n	8007a7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079b0:	f001 fdb0 	bl	8009514 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079b4:	2300      	movs	r3, #0
 80079b6:	e062      	b.n	8007a7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d106      	bne.n	80079cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079be:	f107 0310 	add.w	r3, r7, #16
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 feba 	bl	800873c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079cc:	f001 fda2 	bl	8009514 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079d0:	f000 fc26 	bl	8008220 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079d4:	f001 fd6e 	bl	80094b4 <vPortEnterCritical>
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079de:	b25b      	sxtb	r3, r3
 80079e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e4:	d103      	bne.n	80079ee <xQueueReceive+0x122>
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079f4:	b25b      	sxtb	r3, r3
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fa:	d103      	bne.n	8007a04 <xQueueReceive+0x138>
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a04:	f001 fd86 	bl	8009514 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a08:	1d3a      	adds	r2, r7, #4
 8007a0a:	f107 0310 	add.w	r3, r7, #16
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fea9 	bl	8008768 <xTaskCheckForTimeOut>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d123      	bne.n	8007a64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a1e:	f000 f917 	bl	8007c50 <prvIsQueueEmpty>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d017      	beq.n	8007a58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	3324      	adds	r3, #36	; 0x24
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fdcf 	bl	80085d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a38:	f000 f8b8 	bl	8007bac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a3c:	f000 fbfe 	bl	800823c <xTaskResumeAll>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d189      	bne.n	800795a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a46:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <xQueueReceive+0x1bc>)
 8007a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	e780      	b.n	800795a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a5a:	f000 f8a7 	bl	8007bac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a5e:	f000 fbed 	bl	800823c <xTaskResumeAll>
 8007a62:	e77a      	b.n	800795a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a66:	f000 f8a1 	bl	8007bac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a6a:	f000 fbe7 	bl	800823c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a70:	f000 f8ee 	bl	8007c50 <prvIsQueueEmpty>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f43f af6f 	beq.w	800795a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3730      	adds	r7, #48	; 0x30
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10d      	bne.n	8007ac6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d14d      	bne.n	8007b4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 ffbc 	bl	8008a34 <xTaskPriorityDisinherit>
 8007abc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	e043      	b.n	8007b4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d119      	bne.n	8007b00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6858      	ldr	r0, [r3, #4]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	68b9      	ldr	r1, [r7, #8]
 8007ad8:	f004 f9c8 	bl	800be6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d32b      	bcc.n	8007b4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	e026      	b.n	8007b4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	68d8      	ldr	r0, [r3, #12]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	f004 f9ae 	bl	800be6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	68da      	ldr	r2, [r3, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	425b      	negs	r3, r3
 8007b1a:	441a      	add	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d207      	bcs.n	8007b3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	425b      	negs	r3, r3
 8007b36:	441a      	add	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d105      	bne.n	8007b4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1c5a      	adds	r2, r3, #1
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b56:	697b      	ldr	r3, [r7, #20]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3718      	adds	r7, #24
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d018      	beq.n	8007ba4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	441a      	add	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d303      	bcc.n	8007b94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68d9      	ldr	r1, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6838      	ldr	r0, [r7, #0]
 8007ba0:	f004 f964 	bl	800be6c <memcpy>
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bb4:	f001 fc7e 	bl	80094b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bc0:	e011      	b.n	8007be6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d012      	beq.n	8007bf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3324      	adds	r3, #36	; 0x24
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fd50 	bl	8008674 <xTaskRemoveFromEventList>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bda:	f000 fe27 	bl	800882c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dce9      	bgt.n	8007bc2 <prvUnlockQueue+0x16>
 8007bee:	e000      	b.n	8007bf2 <prvUnlockQueue+0x46>
					break;
 8007bf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	22ff      	movs	r2, #255	; 0xff
 8007bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bfa:	f001 fc8b 	bl	8009514 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bfe:	f001 fc59 	bl	80094b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c0a:	e011      	b.n	8007c30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d012      	beq.n	8007c3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3310      	adds	r3, #16
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fd2b 	bl	8008674 <xTaskRemoveFromEventList>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c24:	f000 fe02 	bl	800882c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	dce9      	bgt.n	8007c0c <prvUnlockQueue+0x60>
 8007c38:	e000      	b.n	8007c3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	22ff      	movs	r2, #255	; 0xff
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c44:	f001 fc66 	bl	8009514 <vPortExitCritical>
}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c58:	f001 fc2c 	bl	80094b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c64:	2301      	movs	r3, #1
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	e001      	b.n	8007c6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c6e:	f001 fc51 	bl	8009514 <vPortExitCritical>

	return xReturn;
 8007c72:	68fb      	ldr	r3, [r7, #12]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c84:	f001 fc16 	bl	80094b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d102      	bne.n	8007c9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c94:	2301      	movs	r3, #1
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e001      	b.n	8007c9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c9e:	f001 fc39 	bl	8009514 <vPortExitCritical>

	return xReturn;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	e014      	b.n	8007ce6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cbc:	4a0f      	ldr	r2, [pc, #60]	; (8007cfc <vQueueAddToRegistry+0x50>)
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10b      	bne.n	8007ce0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cc8:	490c      	ldr	r1, [pc, #48]	; (8007cfc <vQueueAddToRegistry+0x50>)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	; (8007cfc <vQueueAddToRegistry+0x50>)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	00db      	lsls	r3, r3, #3
 8007cd8:	4413      	add	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cde:	e006      	b.n	8007cee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b07      	cmp	r3, #7
 8007cea:	d9e7      	bls.n	8007cbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	20000ebc 	.word	0x20000ebc

08007d00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d10:	f001 fbd0 	bl	80094b4 <vPortEnterCritical>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d1a:	b25b      	sxtb	r3, r3
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d20:	d103      	bne.n	8007d2a <vQueueWaitForMessageRestricted+0x2a>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d103      	bne.n	8007d40 <vQueueWaitForMessageRestricted+0x40>
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d40:	f001 fbe8 	bl	8009514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d106      	bne.n	8007d5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	3324      	adds	r3, #36	; 0x24
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fc61 	bl	800861c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d5a:	6978      	ldr	r0, [r7, #20]
 8007d5c:	f7ff ff26 	bl	8007bac <prvUnlockQueue>
	}
 8007d60:	bf00      	nop
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08e      	sub	sp, #56	; 0x38
 8007d6c:	af04      	add	r7, sp, #16
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	623b      	str	r3, [r7, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xTaskCreateStatic+0x46>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	61fb      	str	r3, [r7, #28]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dae:	23bc      	movs	r3, #188	; 0xbc
 8007db0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2bbc      	cmp	r3, #188	; 0xbc
 8007db6:	d00a      	beq.n	8007dce <xTaskCreateStatic+0x66>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61bb      	str	r3, [r7, #24]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01e      	beq.n	8007e14 <xTaskCreateStatic+0xac>
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01b      	beq.n	8007e14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007dee:	2300      	movs	r3, #0
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	f107 0314 	add.w	r3, r7, #20
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 f850 	bl	8007eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e0e:	f000 f8f3 	bl	8007ff8 <prvAddNewTaskToReadyList>
 8007e12:	e001      	b.n	8007e18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e18:	697b      	ldr	r3, [r7, #20]
	}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3728      	adds	r7, #40	; 0x28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b08c      	sub	sp, #48	; 0x30
 8007e26:	af04      	add	r7, sp, #16
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fc5e 	bl	80096f8 <pvPortMalloc>
 8007e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e44:	20bc      	movs	r0, #188	; 0xbc
 8007e46:	f001 fc57 	bl	80096f8 <pvPortMalloc>
 8007e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	631a      	str	r2, [r3, #48]	; 0x30
 8007e58:	e005      	b.n	8007e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e5a:	6978      	ldr	r0, [r7, #20]
 8007e5c:	f001 fd18 	bl	8009890 <vPortFree>
 8007e60:	e001      	b.n	8007e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d017      	beq.n	8007e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e74:	88fa      	ldrh	r2, [r7, #6]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9303      	str	r3, [sp, #12]
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	9302      	str	r3, [sp, #8]
 8007e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68b9      	ldr	r1, [r7, #8]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 f80e 	bl	8007eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e90:	69f8      	ldr	r0, [r7, #28]
 8007e92:	f000 f8b1 	bl	8007ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61bb      	str	r3, [r7, #24]
 8007e9a:	e002      	b.n	8007ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	21a5      	movs	r1, #165	; 0xa5
 8007ec6:	f003 fff9 	bl	800bebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00a      	beq.n	8007f04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	617b      	str	r3, [r7, #20]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01f      	beq.n	8007f4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	e012      	b.n	8007f36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	7819      	ldrb	r1, [r3, #0]
 8007f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	3334      	adds	r3, #52	; 0x34
 8007f20:	460a      	mov	r2, r1
 8007f22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d006      	beq.n	8007f3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	3301      	adds	r3, #1
 8007f34:	61fb      	str	r3, [r7, #28]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	2b0f      	cmp	r3, #15
 8007f3a:	d9e9      	bls.n	8007f10 <prvInitialiseNewTask+0x64>
 8007f3c:	e000      	b.n	8007f40 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f48:	e003      	b.n	8007f52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f54:	2b37      	cmp	r3, #55	; 0x37
 8007f56:	d901      	bls.n	8007f5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f58:	2337      	movs	r3, #55	; 0x37
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	3304      	adds	r3, #4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff f978 	bl	8007268 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	3318      	adds	r3, #24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff f973 	bl	8007268 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	3354      	adds	r3, #84	; 0x54
 8007fac:	2260      	movs	r2, #96	; 0x60
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f003 ff83 	bl	800bebc <memset>
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	4a0c      	ldr	r2, [pc, #48]	; (8007fec <prvInitialiseNewTask+0x140>)
 8007fba:	659a      	str	r2, [r3, #88]	; 0x58
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	4a0c      	ldr	r2, [pc, #48]	; (8007ff0 <prvInitialiseNewTask+0x144>)
 8007fc0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	4a0b      	ldr	r2, [pc, #44]	; (8007ff4 <prvInitialiseNewTask+0x148>)
 8007fc6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	68f9      	ldr	r1, [r7, #12]
 8007fcc:	69b8      	ldr	r0, [r7, #24]
 8007fce:	f001 f941 	bl	8009254 <pxPortInitialiseStack>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fe4:	bf00      	nop
 8007fe6:	3720      	adds	r7, #32
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	08010e10 	.word	0x08010e10
 8007ff0:	08010e30 	.word	0x08010e30
 8007ff4:	08010df0 	.word	0x08010df0

08007ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008000:	f001 fa58 	bl	80094b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008004:	4b2d      	ldr	r3, [pc, #180]	; (80080bc <prvAddNewTaskToReadyList+0xc4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3301      	adds	r3, #1
 800800a:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <prvAddNewTaskToReadyList+0xc4>)
 800800c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800800e:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <prvAddNewTaskToReadyList+0xc8>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d109      	bne.n	800802a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008016:	4a2a      	ldr	r2, [pc, #168]	; (80080c0 <prvAddNewTaskToReadyList+0xc8>)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800801c:	4b27      	ldr	r3, [pc, #156]	; (80080bc <prvAddNewTaskToReadyList+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d110      	bne.n	8008046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008024:	f000 fc26 	bl	8008874 <prvInitialiseTaskLists>
 8008028:	e00d      	b.n	8008046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800802a:	4b26      	ldr	r3, [pc, #152]	; (80080c4 <prvAddNewTaskToReadyList+0xcc>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008032:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <prvAddNewTaskToReadyList+0xc8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	429a      	cmp	r2, r3
 800803e:	d802      	bhi.n	8008046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008040:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <prvAddNewTaskToReadyList+0xc8>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008046:	4b20      	ldr	r3, [pc, #128]	; (80080c8 <prvAddNewTaskToReadyList+0xd0>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <prvAddNewTaskToReadyList+0xd0>)
 800804e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008050:	4b1d      	ldr	r3, [pc, #116]	; (80080c8 <prvAddNewTaskToReadyList+0xd0>)
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <prvAddNewTaskToReadyList+0xd4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d903      	bls.n	800806c <prvAddNewTaskToReadyList+0x74>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a18      	ldr	r2, [pc, #96]	; (80080cc <prvAddNewTaskToReadyList+0xd4>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <prvAddNewTaskToReadyList+0xd8>)
 800807a:	441a      	add	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7ff f8fd 	bl	8007282 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008088:	f001 fa44 	bl	8009514 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <prvAddNewTaskToReadyList+0xcc>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00e      	beq.n	80080b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <prvAddNewTaskToReadyList+0xc8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	429a      	cmp	r2, r3
 80080a0:	d207      	bcs.n	80080b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <prvAddNewTaskToReadyList+0xdc>)
 80080a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	200013d0 	.word	0x200013d0
 80080c0:	20000efc 	.word	0x20000efc
 80080c4:	200013dc 	.word	0x200013dc
 80080c8:	200013ec 	.word	0x200013ec
 80080cc:	200013d8 	.word	0x200013d8
 80080d0:	20000f00 	.word	0x20000f00
 80080d4:	e000ed04 	.word	0xe000ed04

080080d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080ea:	4b13      	ldr	r3, [pc, #76]	; (8008138 <vTaskDelay+0x60>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00a      	beq.n	8008108 <vTaskDelay+0x30>
	__asm volatile
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	60bb      	str	r3, [r7, #8]
}
 8008104:	bf00      	nop
 8008106:	e7fe      	b.n	8008106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008108:	f000 f88a 	bl	8008220 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800810c:	2100      	movs	r1, #0
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fcfe 	bl	8008b10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008114:	f000 f892 	bl	800823c <xTaskResumeAll>
 8008118:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d107      	bne.n	8008130 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008120:	4b06      	ldr	r3, [pc, #24]	; (800813c <vTaskDelay+0x64>)
 8008122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200013f8 	.word	0x200013f8
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08a      	sub	sp, #40	; 0x28
 8008144:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800814e:	463a      	mov	r2, r7
 8008150:	1d39      	adds	r1, r7, #4
 8008152:	f107 0308 	add.w	r3, r7, #8
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff f832 	bl	80071c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	9202      	str	r2, [sp, #8]
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	2300      	movs	r3, #0
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	2300      	movs	r3, #0
 800816c:	460a      	mov	r2, r1
 800816e:	4924      	ldr	r1, [pc, #144]	; (8008200 <vTaskStartScheduler+0xc0>)
 8008170:	4824      	ldr	r0, [pc, #144]	; (8008204 <vTaskStartScheduler+0xc4>)
 8008172:	f7ff fdf9 	bl	8007d68 <xTaskCreateStatic>
 8008176:	4603      	mov	r3, r0
 8008178:	4a23      	ldr	r2, [pc, #140]	; (8008208 <vTaskStartScheduler+0xc8>)
 800817a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800817c:	4b22      	ldr	r3, [pc, #136]	; (8008208 <vTaskStartScheduler+0xc8>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e001      	b.n	800818e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d102      	bne.n	800819a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008194:	f000 fd10 	bl	8008bb8 <xTimerCreateTimerTask>
 8008198:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d11b      	bne.n	80081d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	613b      	str	r3, [r7, #16]
}
 80081b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <vTaskStartScheduler+0xcc>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3354      	adds	r3, #84	; 0x54
 80081ba:	4a15      	ldr	r2, [pc, #84]	; (8008210 <vTaskStartScheduler+0xd0>)
 80081bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081be:	4b15      	ldr	r3, [pc, #84]	; (8008214 <vTaskStartScheduler+0xd4>)
 80081c0:	f04f 32ff 	mov.w	r2, #4294967295
 80081c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <vTaskStartScheduler+0xd8>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081cc:	4b13      	ldr	r3, [pc, #76]	; (800821c <vTaskStartScheduler+0xdc>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081d2:	f001 f8cd 	bl	8009370 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081d6:	e00e      	b.n	80081f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	d10a      	bne.n	80081f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	60fb      	str	r3, [r7, #12]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <vTaskStartScheduler+0xb4>
}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	080106d0 	.word	0x080106d0
 8008204:	08008845 	.word	0x08008845
 8008208:	200013f4 	.word	0x200013f4
 800820c:	20000efc 	.word	0x20000efc
 8008210:	20000018 	.word	0x20000018
 8008214:	200013f0 	.word	0x200013f0
 8008218:	200013dc 	.word	0x200013dc
 800821c:	200013d4 	.word	0x200013d4

08008220 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008224:	4b04      	ldr	r3, [pc, #16]	; (8008238 <vTaskSuspendAll+0x18>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3301      	adds	r3, #1
 800822a:	4a03      	ldr	r2, [pc, #12]	; (8008238 <vTaskSuspendAll+0x18>)
 800822c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800822e:	bf00      	nop
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	200013f8 	.word	0x200013f8

0800823c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008242:	2300      	movs	r3, #0
 8008244:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008246:	2300      	movs	r3, #0
 8008248:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800824a:	4b42      	ldr	r3, [pc, #264]	; (8008354 <xTaskResumeAll+0x118>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <xTaskResumeAll+0x2c>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	603b      	str	r3, [r7, #0]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008268:	f001 f924 	bl	80094b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800826c:	4b39      	ldr	r3, [pc, #228]	; (8008354 <xTaskResumeAll+0x118>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3b01      	subs	r3, #1
 8008272:	4a38      	ldr	r2, [pc, #224]	; (8008354 <xTaskResumeAll+0x118>)
 8008274:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008276:	4b37      	ldr	r3, [pc, #220]	; (8008354 <xTaskResumeAll+0x118>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d162      	bne.n	8008344 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800827e:	4b36      	ldr	r3, [pc, #216]	; (8008358 <xTaskResumeAll+0x11c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d05e      	beq.n	8008344 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008286:	e02f      	b.n	80082e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008288:	4b34      	ldr	r3, [pc, #208]	; (800835c <xTaskResumeAll+0x120>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3318      	adds	r3, #24
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff f851 	bl	800733c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	3304      	adds	r3, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f7ff f84c 	bl	800733c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4b2d      	ldr	r3, [pc, #180]	; (8008360 <xTaskResumeAll+0x124>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d903      	bls.n	80082b8 <xTaskResumeAll+0x7c>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	4a2a      	ldr	r2, [pc, #168]	; (8008360 <xTaskResumeAll+0x124>)
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4a27      	ldr	r2, [pc, #156]	; (8008364 <xTaskResumeAll+0x128>)
 80082c6:	441a      	add	r2, r3
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fe ffd7 	bl	8007282 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d8:	4b23      	ldr	r3, [pc, #140]	; (8008368 <xTaskResumeAll+0x12c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	429a      	cmp	r2, r3
 80082e0:	d302      	bcc.n	80082e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80082e2:	4b22      	ldr	r3, [pc, #136]	; (800836c <xTaskResumeAll+0x130>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082e8:	4b1c      	ldr	r3, [pc, #112]	; (800835c <xTaskResumeAll+0x120>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1cb      	bne.n	8008288 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082f6:	f000 fb5f 	bl	80089b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80082fa:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <xTaskResumeAll+0x134>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d010      	beq.n	8008328 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008306:	f000 f847 	bl	8008398 <xTaskIncrementTick>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008310:	4b16      	ldr	r3, [pc, #88]	; (800836c <xTaskResumeAll+0x130>)
 8008312:	2201      	movs	r2, #1
 8008314:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	3b01      	subs	r3, #1
 800831a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f1      	bne.n	8008306 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <xTaskResumeAll+0x134>)
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008328:	4b10      	ldr	r3, [pc, #64]	; (800836c <xTaskResumeAll+0x130>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d009      	beq.n	8008344 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008330:	2301      	movs	r3, #1
 8008332:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008334:	4b0f      	ldr	r3, [pc, #60]	; (8008374 <xTaskResumeAll+0x138>)
 8008336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008344:	f001 f8e6 	bl	8009514 <vPortExitCritical>

	return xAlreadyYielded;
 8008348:	68bb      	ldr	r3, [r7, #8]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	200013f8 	.word	0x200013f8
 8008358:	200013d0 	.word	0x200013d0
 800835c:	20001390 	.word	0x20001390
 8008360:	200013d8 	.word	0x200013d8
 8008364:	20000f00 	.word	0x20000f00
 8008368:	20000efc 	.word	0x20000efc
 800836c:	200013e4 	.word	0x200013e4
 8008370:	200013e0 	.word	0x200013e0
 8008374:	e000ed04 	.word	0xe000ed04

08008378 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800837e:	4b05      	ldr	r3, [pc, #20]	; (8008394 <xTaskGetTickCount+0x1c>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008384:	687b      	ldr	r3, [r7, #4]
}
 8008386:	4618      	mov	r0, r3
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	200013d4 	.word	0x200013d4

08008398 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083a2:	4b4f      	ldr	r3, [pc, #316]	; (80084e0 <xTaskIncrementTick+0x148>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 808f 	bne.w	80084ca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083ac:	4b4d      	ldr	r3, [pc, #308]	; (80084e4 <xTaskIncrementTick+0x14c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083b4:	4a4b      	ldr	r2, [pc, #300]	; (80084e4 <xTaskIncrementTick+0x14c>)
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d120      	bne.n	8008402 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083c0:	4b49      	ldr	r3, [pc, #292]	; (80084e8 <xTaskIncrementTick+0x150>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	603b      	str	r3, [r7, #0]
}
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <xTaskIncrementTick+0x46>
 80083e0:	4b41      	ldr	r3, [pc, #260]	; (80084e8 <xTaskIncrementTick+0x150>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	4b41      	ldr	r3, [pc, #260]	; (80084ec <xTaskIncrementTick+0x154>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a3f      	ldr	r2, [pc, #252]	; (80084e8 <xTaskIncrementTick+0x150>)
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	4a3f      	ldr	r2, [pc, #252]	; (80084ec <xTaskIncrementTick+0x154>)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	4b3e      	ldr	r3, [pc, #248]	; (80084f0 <xTaskIncrementTick+0x158>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	4a3d      	ldr	r2, [pc, #244]	; (80084f0 <xTaskIncrementTick+0x158>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	f000 fadb 	bl	80089b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008402:	4b3c      	ldr	r3, [pc, #240]	; (80084f4 <xTaskIncrementTick+0x15c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d349      	bcc.n	80084a0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800840c:	4b36      	ldr	r3, [pc, #216]	; (80084e8 <xTaskIncrementTick+0x150>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d104      	bne.n	8008420 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008416:	4b37      	ldr	r3, [pc, #220]	; (80084f4 <xTaskIncrementTick+0x15c>)
 8008418:	f04f 32ff 	mov.w	r2, #4294967295
 800841c:	601a      	str	r2, [r3, #0]
					break;
 800841e:	e03f      	b.n	80084a0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008420:	4b31      	ldr	r3, [pc, #196]	; (80084e8 <xTaskIncrementTick+0x150>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	429a      	cmp	r2, r3
 8008436:	d203      	bcs.n	8008440 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008438:	4a2e      	ldr	r2, [pc, #184]	; (80084f4 <xTaskIncrementTick+0x15c>)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800843e:	e02f      	b.n	80084a0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	3304      	adds	r3, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe ff79 	bl	800733c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844e:	2b00      	cmp	r3, #0
 8008450:	d004      	beq.n	800845c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	3318      	adds	r3, #24
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe ff70 	bl	800733c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <xTaskIncrementTick+0x160>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d903      	bls.n	8008470 <xTaskIncrementTick+0xd8>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	4a22      	ldr	r2, [pc, #136]	; (80084f8 <xTaskIncrementTick+0x160>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4a1f      	ldr	r2, [pc, #124]	; (80084fc <xTaskIncrementTick+0x164>)
 800847e:	441a      	add	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3304      	adds	r3, #4
 8008484:	4619      	mov	r1, r3
 8008486:	4610      	mov	r0, r2
 8008488:	f7fe fefb 	bl	8007282 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <xTaskIncrementTick+0x168>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	429a      	cmp	r2, r3
 8008498:	d3b8      	bcc.n	800840c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800849a:	2301      	movs	r3, #1
 800849c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800849e:	e7b5      	b.n	800840c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <xTaskIncrementTick+0x168>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a6:	4915      	ldr	r1, [pc, #84]	; (80084fc <xTaskIncrementTick+0x164>)
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d901      	bls.n	80084bc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084bc:	4b11      	ldr	r3, [pc, #68]	; (8008504 <xTaskIncrementTick+0x16c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d007      	beq.n	80084d4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80084c4:	2301      	movs	r3, #1
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	e004      	b.n	80084d4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084ca:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <xTaskIncrementTick+0x170>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3301      	adds	r3, #1
 80084d0:	4a0d      	ldr	r2, [pc, #52]	; (8008508 <xTaskIncrementTick+0x170>)
 80084d2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084d4:	697b      	ldr	r3, [r7, #20]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200013f8 	.word	0x200013f8
 80084e4:	200013d4 	.word	0x200013d4
 80084e8:	20001388 	.word	0x20001388
 80084ec:	2000138c 	.word	0x2000138c
 80084f0:	200013e8 	.word	0x200013e8
 80084f4:	200013f0 	.word	0x200013f0
 80084f8:	200013d8 	.word	0x200013d8
 80084fc:	20000f00 	.word	0x20000f00
 8008500:	20000efc 	.word	0x20000efc
 8008504:	200013e4 	.word	0x200013e4
 8008508:	200013e0 	.word	0x200013e0

0800850c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008512:	4b2a      	ldr	r3, [pc, #168]	; (80085bc <vTaskSwitchContext+0xb0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800851a:	4b29      	ldr	r3, [pc, #164]	; (80085c0 <vTaskSwitchContext+0xb4>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008520:	e046      	b.n	80085b0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008522:	4b27      	ldr	r3, [pc, #156]	; (80085c0 <vTaskSwitchContext+0xb4>)
 8008524:	2200      	movs	r2, #0
 8008526:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008528:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <vTaskSwitchContext+0xb8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	e010      	b.n	8008552 <vTaskSwitchContext+0x46>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <vTaskSwitchContext+0x40>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	607b      	str	r3, [r7, #4]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <vTaskSwitchContext+0x3e>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3b01      	subs	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	491d      	ldr	r1, [pc, #116]	; (80085c8 <vTaskSwitchContext+0xbc>)
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	440b      	add	r3, r1
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0e4      	beq.n	8008530 <vTaskSwitchContext+0x24>
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4a15      	ldr	r2, [pc, #84]	; (80085c8 <vTaskSwitchContext+0xbc>)
 8008572:	4413      	add	r3, r2
 8008574:	60bb      	str	r3, [r7, #8]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	605a      	str	r2, [r3, #4]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3308      	adds	r3, #8
 8008588:	429a      	cmp	r2, r3
 800858a:	d104      	bne.n	8008596 <vTaskSwitchContext+0x8a>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	4a0b      	ldr	r2, [pc, #44]	; (80085cc <vTaskSwitchContext+0xc0>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <vTaskSwitchContext+0xb8>)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085a6:	4b09      	ldr	r3, [pc, #36]	; (80085cc <vTaskSwitchContext+0xc0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3354      	adds	r3, #84	; 0x54
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <vTaskSwitchContext+0xc4>)
 80085ae:	6013      	str	r3, [r2, #0]
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	200013f8 	.word	0x200013f8
 80085c0:	200013e4 	.word	0x200013e4
 80085c4:	200013d8 	.word	0x200013d8
 80085c8:	20000f00 	.word	0x20000f00
 80085cc:	20000efc 	.word	0x20000efc
 80085d0:	20000018 	.word	0x20000018

080085d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	60fb      	str	r3, [r7, #12]
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <vTaskPlaceOnEventList+0x44>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3318      	adds	r3, #24
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe fe61 	bl	80072ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008608:	2101      	movs	r1, #1
 800860a:	6838      	ldr	r0, [r7, #0]
 800860c:	f000 fa80 	bl	8008b10 <prvAddCurrentTaskToDelayedList>
}
 8008610:	bf00      	nop
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000efc 	.word	0x20000efc

0800861c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	617b      	str	r3, [r7, #20]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008644:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <vTaskPlaceOnEventListRestricted+0x54>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3318      	adds	r3, #24
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7fe fe18 	bl	8007282 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008658:	f04f 33ff 	mov.w	r3, #4294967295
 800865c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	68b8      	ldr	r0, [r7, #8]
 8008662:	f000 fa55 	bl	8008b10 <prvAddCurrentTaskToDelayedList>
	}
 8008666:	bf00      	nop
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000efc 	.word	0x20000efc

08008674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10a      	bne.n	80086a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	60fb      	str	r3, [r7, #12]
}
 800869c:	bf00      	nop
 800869e:	e7fe      	b.n	800869e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3318      	adds	r3, #24
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fe49 	bl	800733c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086aa:	4b1e      	ldr	r3, [pc, #120]	; (8008724 <xTaskRemoveFromEventList+0xb0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d11d      	bne.n	80086ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fe40 	bl	800733c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b19      	ldr	r3, [pc, #100]	; (8008728 <xTaskRemoveFromEventList+0xb4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskRemoveFromEventList+0x5c>
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a16      	ldr	r2, [pc, #88]	; (8008728 <xTaskRemoveFromEventList+0xb4>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a13      	ldr	r2, [pc, #76]	; (800872c <xTaskRemoveFromEventList+0xb8>)
 80086de:	441a      	add	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe fdcb 	bl	8007282 <vListInsertEnd>
 80086ec:	e005      	b.n	80086fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3318      	adds	r3, #24
 80086f2:	4619      	mov	r1, r3
 80086f4:	480e      	ldr	r0, [pc, #56]	; (8008730 <xTaskRemoveFromEventList+0xbc>)
 80086f6:	f7fe fdc4 	bl	8007282 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <xTaskRemoveFromEventList+0xc0>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d905      	bls.n	8008714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008708:	2301      	movs	r3, #1
 800870a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <xTaskRemoveFromEventList+0xc4>)
 800870e:	2201      	movs	r2, #1
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e001      	b.n	8008718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008718:	697b      	ldr	r3, [r7, #20]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	200013f8 	.word	0x200013f8
 8008728:	200013d8 	.word	0x200013d8
 800872c:	20000f00 	.word	0x20000f00
 8008730:	20001390 	.word	0x20001390
 8008734:	20000efc 	.word	0x20000efc
 8008738:	200013e4 	.word	0x200013e4

0800873c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008744:	4b06      	ldr	r3, [pc, #24]	; (8008760 <vTaskInternalSetTimeOutState+0x24>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <vTaskInternalSetTimeOutState+0x28>)
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	605a      	str	r2, [r3, #4]
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	200013e8 	.word	0x200013e8
 8008764:	200013d4 	.word	0x200013d4

08008768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b088      	sub	sp, #32
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	613b      	str	r3, [r7, #16]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10a      	bne.n	80087aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	60fb      	str	r3, [r7, #12]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087aa:	f000 fe83 	bl	80094b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <xTaskCheckForTimeOut+0xbc>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	1ad3      	subs	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d102      	bne.n	80087ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	e023      	b.n	8008816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <xTaskCheckForTimeOut+0xc0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d007      	beq.n	80087ea <xTaskCheckForTimeOut+0x82>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d302      	bcc.n	80087ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087e4:	2301      	movs	r3, #1
 80087e6:	61fb      	str	r3, [r7, #28]
 80087e8:	e015      	b.n	8008816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d20b      	bcs.n	800880c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff ff9b 	bl	800873c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
 800880a:	e004      	b.n	8008816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008812:	2301      	movs	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008816:	f000 fe7d 	bl	8009514 <vPortExitCritical>

	return xReturn;
 800881a:	69fb      	ldr	r3, [r7, #28]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3720      	adds	r7, #32
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200013d4 	.word	0x200013d4
 8008828:	200013e8 	.word	0x200013e8

0800882c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008830:	4b03      	ldr	r3, [pc, #12]	; (8008840 <vTaskMissedYield+0x14>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
}
 8008836:	bf00      	nop
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	200013e4 	.word	0x200013e4

08008844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800884c:	f000 f852 	bl	80088f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <prvIdleTask+0x28>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d9f9      	bls.n	800884c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <prvIdleTask+0x2c>)
 800885a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885e:	601a      	str	r2, [r3, #0]
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008868:	e7f0      	b.n	800884c <prvIdleTask+0x8>
 800886a:	bf00      	nop
 800886c:	20000f00 	.word	0x20000f00
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800887a:	2300      	movs	r3, #0
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	e00c      	b.n	800889a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4a12      	ldr	r2, [pc, #72]	; (80088d4 <prvInitialiseTaskLists+0x60>)
 800888c:	4413      	add	r3, r2
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fcca 	bl	8007228 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	3301      	adds	r3, #1
 8008898:	607b      	str	r3, [r7, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b37      	cmp	r3, #55	; 0x37
 800889e:	d9ef      	bls.n	8008880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088a0:	480d      	ldr	r0, [pc, #52]	; (80088d8 <prvInitialiseTaskLists+0x64>)
 80088a2:	f7fe fcc1 	bl	8007228 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088a6:	480d      	ldr	r0, [pc, #52]	; (80088dc <prvInitialiseTaskLists+0x68>)
 80088a8:	f7fe fcbe 	bl	8007228 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088ac:	480c      	ldr	r0, [pc, #48]	; (80088e0 <prvInitialiseTaskLists+0x6c>)
 80088ae:	f7fe fcbb 	bl	8007228 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088b2:	480c      	ldr	r0, [pc, #48]	; (80088e4 <prvInitialiseTaskLists+0x70>)
 80088b4:	f7fe fcb8 	bl	8007228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088b8:	480b      	ldr	r0, [pc, #44]	; (80088e8 <prvInitialiseTaskLists+0x74>)
 80088ba:	f7fe fcb5 	bl	8007228 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <prvInitialiseTaskLists+0x78>)
 80088c0:	4a05      	ldr	r2, [pc, #20]	; (80088d8 <prvInitialiseTaskLists+0x64>)
 80088c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088c4:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <prvInitialiseTaskLists+0x7c>)
 80088c6:	4a05      	ldr	r2, [pc, #20]	; (80088dc <prvInitialiseTaskLists+0x68>)
 80088c8:	601a      	str	r2, [r3, #0]
}
 80088ca:	bf00      	nop
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000f00 	.word	0x20000f00
 80088d8:	20001360 	.word	0x20001360
 80088dc:	20001374 	.word	0x20001374
 80088e0:	20001390 	.word	0x20001390
 80088e4:	200013a4 	.word	0x200013a4
 80088e8:	200013bc 	.word	0x200013bc
 80088ec:	20001388 	.word	0x20001388
 80088f0:	2000138c 	.word	0x2000138c

080088f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088fa:	e019      	b.n	8008930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088fc:	f000 fdda 	bl	80094b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008900:	4b10      	ldr	r3, [pc, #64]	; (8008944 <prvCheckTasksWaitingTermination+0x50>)
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fd15 	bl	800733c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008912:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <prvCheckTasksWaitingTermination+0x54>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3b01      	subs	r3, #1
 8008918:	4a0b      	ldr	r2, [pc, #44]	; (8008948 <prvCheckTasksWaitingTermination+0x54>)
 800891a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800891c:	4b0b      	ldr	r3, [pc, #44]	; (800894c <prvCheckTasksWaitingTermination+0x58>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3b01      	subs	r3, #1
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <prvCheckTasksWaitingTermination+0x58>)
 8008924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008926:	f000 fdf5 	bl	8009514 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f810 	bl	8008950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008930:	4b06      	ldr	r3, [pc, #24]	; (800894c <prvCheckTasksWaitingTermination+0x58>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e1      	bne.n	80088fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	200013a4 	.word	0x200013a4
 8008948:	200013d0 	.word	0x200013d0
 800894c:	200013b8 	.word	0x200013b8

08008950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3354      	adds	r3, #84	; 0x54
 800895c:	4618      	mov	r0, r3
 800895e:	f004 fa25 	bl	800cdac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008970:	4618      	mov	r0, r3
 8008972:	f000 ff8d 	bl	8009890 <vPortFree>
				vPortFree( pxTCB );
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 ff8a 	bl	8009890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800897c:	e018      	b.n	80089b0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008984:	2b01      	cmp	r3, #1
 8008986:	d103      	bne.n	8008990 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 ff81 	bl	8009890 <vPortFree>
	}
 800898e:	e00f      	b.n	80089b0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008996:	2b02      	cmp	r3, #2
 8008998:	d00a      	beq.n	80089b0 <prvDeleteTCB+0x60>
	__asm volatile
 800899a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899e:	f383 8811 	msr	BASEPRI, r3
 80089a2:	f3bf 8f6f 	isb	sy
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	60fb      	str	r3, [r7, #12]
}
 80089ac:	bf00      	nop
 80089ae:	e7fe      	b.n	80089ae <prvDeleteTCB+0x5e>
	}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089d0:	e008      	b.n	80089e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a04      	ldr	r2, [pc, #16]	; (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20001388 	.word	0x20001388
 80089f4:	200013f0 	.word	0x200013f0

080089f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <xTaskGetSchedulerState+0x34>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a06:	2301      	movs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e008      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0c:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <xTaskGetSchedulerState+0x38>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a14:	2302      	movs	r3, #2
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e001      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a1e:	687b      	ldr	r3, [r7, #4]
	}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	200013dc 	.word	0x200013dc
 8008a30:	200013f8 	.word	0x200013f8

08008a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d056      	beq.n	8008af8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a4a:	4b2e      	ldr	r3, [pc, #184]	; (8008b04 <xTaskPriorityDisinherit+0xd0>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d00a      	beq.n	8008a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	60fb      	str	r3, [r7, #12]
}
 8008a66:	bf00      	nop
 8008a68:	e7fe      	b.n	8008a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	60bb      	str	r3, [r7, #8]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8c:	1e5a      	subs	r2, r3, #1
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d02c      	beq.n	8008af8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d128      	bne.n	8008af8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fc46 	bl	800733c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac8:	4b0f      	ldr	r3, [pc, #60]	; (8008b08 <xTaskPriorityDisinherit+0xd4>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d903      	bls.n	8008ad8 <xTaskPriorityDisinherit+0xa4>
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	4a0c      	ldr	r2, [pc, #48]	; (8008b08 <xTaskPriorityDisinherit+0xd4>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a09      	ldr	r2, [pc, #36]	; (8008b0c <xTaskPriorityDisinherit+0xd8>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe fbc7 	bl	8007282 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008af4:	2301      	movs	r3, #1
 8008af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008af8:	697b      	ldr	r3, [r7, #20]
	}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000efc 	.word	0x20000efc
 8008b08:	200013d8 	.word	0x200013d8
 8008b0c:	20000f00 	.word	0x20000f00

08008b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b1a:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b20:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	3304      	adds	r3, #4
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fc08 	bl	800733c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b32:	d10a      	bne.n	8008b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b3a:	4b1a      	ldr	r3, [pc, #104]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4619      	mov	r1, r3
 8008b42:	4819      	ldr	r0, [pc, #100]	; (8008ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b44:	f7fe fb9d 	bl	8007282 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b48:	e026      	b.n	8008b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4413      	add	r3, r2
 8008b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b52:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d209      	bcs.n	8008b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b62:	4b12      	ldr	r3, [pc, #72]	; (8008bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	f7fe fbab 	bl	80072ca <vListInsert>
}
 8008b74:	e010      	b.n	8008b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b76:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3304      	adds	r3, #4
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f7fe fba1 	bl	80072ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d202      	bcs.n	8008b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b92:	4a08      	ldr	r2, [pc, #32]	; (8008bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6013      	str	r3, [r2, #0]
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	200013d4 	.word	0x200013d4
 8008ba4:	20000efc 	.word	0x20000efc
 8008ba8:	200013bc 	.word	0x200013bc
 8008bac:	2000138c 	.word	0x2000138c
 8008bb0:	20001388 	.word	0x20001388
 8008bb4:	200013f0 	.word	0x200013f0

08008bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08a      	sub	sp, #40	; 0x28
 8008bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bc2:	f000 fb07 	bl	80091d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bc6:	4b1c      	ldr	r3, [pc, #112]	; (8008c38 <xTimerCreateTimerTask+0x80>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d021      	beq.n	8008c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bd6:	1d3a      	adds	r2, r7, #4
 8008bd8:	f107 0108 	add.w	r1, r7, #8
 8008bdc:	f107 030c 	add.w	r3, r7, #12
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7fe fb07 	bl	80071f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	9202      	str	r2, [sp, #8]
 8008bee:	9301      	str	r3, [sp, #4]
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	460a      	mov	r2, r1
 8008bf8:	4910      	ldr	r1, [pc, #64]	; (8008c3c <xTimerCreateTimerTask+0x84>)
 8008bfa:	4811      	ldr	r0, [pc, #68]	; (8008c40 <xTimerCreateTimerTask+0x88>)
 8008bfc:	f7ff f8b4 	bl	8007d68 <xTaskCreateStatic>
 8008c00:	4603      	mov	r3, r0
 8008c02:	4a10      	ldr	r2, [pc, #64]	; (8008c44 <xTimerCreateTimerTask+0x8c>)
 8008c04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c06:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <xTimerCreateTimerTask+0x8c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10a      	bne.n	8008c2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	613b      	str	r3, [r7, #16]
}
 8008c2a:	bf00      	nop
 8008c2c:	e7fe      	b.n	8008c2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c2e:	697b      	ldr	r3, [r7, #20]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	2000142c 	.word	0x2000142c
 8008c3c:	080106d8 	.word	0x080106d8
 8008c40:	08008d7d 	.word	0x08008d7d
 8008c44:	20001430 	.word	0x20001430

08008c48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	; 0x28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c56:	2300      	movs	r3, #0
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10a      	bne.n	8008c76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	f383 8811 	msr	BASEPRI, r3
 8008c68:	f3bf 8f6f 	isb	sy
 8008c6c:	f3bf 8f4f 	dsb	sy
 8008c70:	623b      	str	r3, [r7, #32]
}
 8008c72:	bf00      	nop
 8008c74:	e7fe      	b.n	8008c74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c76:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <xTimerGenericCommand+0x98>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d02a      	beq.n	8008cd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	2b05      	cmp	r3, #5
 8008c8e:	dc18      	bgt.n	8008cc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c90:	f7ff feb2 	bl	80089f8 <xTaskGetSchedulerState>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d109      	bne.n	8008cae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c9a:	4b11      	ldr	r3, [pc, #68]	; (8008ce0 <xTimerGenericCommand+0x98>)
 8008c9c:	6818      	ldr	r0, [r3, #0]
 8008c9e:	f107 0110 	add.w	r1, r7, #16
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ca6:	f7fe fc77 	bl	8007598 <xQueueGenericSend>
 8008caa:	6278      	str	r0, [r7, #36]	; 0x24
 8008cac:	e012      	b.n	8008cd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cae:	4b0c      	ldr	r3, [pc, #48]	; (8008ce0 <xTimerGenericCommand+0x98>)
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f107 0110 	add.w	r1, r7, #16
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f7fe fc6d 	bl	8007598 <xQueueGenericSend>
 8008cbe:	6278      	str	r0, [r7, #36]	; 0x24
 8008cc0:	e008      	b.n	8008cd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <xTimerGenericCommand+0x98>)
 8008cc4:	6818      	ldr	r0, [r3, #0]
 8008cc6:	f107 0110 	add.w	r1, r7, #16
 8008cca:	2300      	movs	r3, #0
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	f7fe fd61 	bl	8007794 <xQueueGenericSendFromISR>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3728      	adds	r7, #40	; 0x28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	2000142c 	.word	0x2000142c

08008ce4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cee:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <prvProcessExpiredTimer+0x94>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fe fb1d 	bl	800733c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d022      	beq.n	8008d56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	18d1      	adds	r1, r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	6978      	ldr	r0, [r7, #20]
 8008d1e:	f000 f8d1 	bl	8008ec4 <prvInsertTimerInActiveList>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01f      	beq.n	8008d68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	2100      	movs	r1, #0
 8008d32:	6978      	ldr	r0, [r7, #20]
 8008d34:	f7ff ff88 	bl	8008c48 <xTimerGenericCommand>
 8008d38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d113      	bne.n	8008d68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60fb      	str	r3, [r7, #12]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d5c:	f023 0301 	bic.w	r3, r3, #1
 8008d60:	b2da      	uxtb	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	6978      	ldr	r0, [r7, #20]
 8008d6e:	4798      	blx	r3
}
 8008d70:	bf00      	nop
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	20001424 	.word	0x20001424

08008d7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d84:	f107 0308 	add.w	r3, r7, #8
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f857 	bl	8008e3c <prvGetNextExpireTime>
 8008d8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4619      	mov	r1, r3
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f803 	bl	8008da0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d9a:	f000 f8d5 	bl	8008f48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d9e:	e7f1      	b.n	8008d84 <prvTimerTask+0x8>

08008da0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008daa:	f7ff fa39 	bl	8008220 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 f866 	bl	8008e84 <prvSampleTimeNow>
 8008db8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d130      	bne.n	8008e22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10a      	bne.n	8008ddc <prvProcessTimerOrBlockTask+0x3c>
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d806      	bhi.n	8008ddc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dce:	f7ff fa35 	bl	800823c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff85 	bl	8008ce4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dda:	e024      	b.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d008      	beq.n	8008df4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008de2:	4b13      	ldr	r3, [pc, #76]	; (8008e30 <prvProcessTimerOrBlockTask+0x90>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <prvProcessTimerOrBlockTask+0x50>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e000      	b.n	8008df2 <prvProcessTimerOrBlockTask+0x52>
 8008df0:	2300      	movs	r3, #0
 8008df2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <prvProcessTimerOrBlockTask+0x94>)
 8008df6:	6818      	ldr	r0, [r3, #0]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	4619      	mov	r1, r3
 8008e02:	f7fe ff7d 	bl	8007d00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e06:	f7ff fa19 	bl	800823c <xTaskResumeAll>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10a      	bne.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <prvProcessTimerOrBlockTask+0x98>)
 8008e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	f3bf 8f6f 	isb	sy
}
 8008e20:	e001      	b.n	8008e26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e22:	f7ff fa0b 	bl	800823c <xTaskResumeAll>
}
 8008e26:	bf00      	nop
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20001428 	.word	0x20001428
 8008e34:	2000142c 	.word	0x2000142c
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <prvGetNextExpireTime+0x44>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <prvGetNextExpireTime+0x16>
 8008e4e:	2201      	movs	r2, #1
 8008e50:	e000      	b.n	8008e54 <prvGetNextExpireTime+0x18>
 8008e52:	2200      	movs	r2, #0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d105      	bne.n	8008e6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <prvGetNextExpireTime+0x44>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e001      	b.n	8008e70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e70:	68fb      	ldr	r3, [r7, #12]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20001424 	.word	0x20001424

08008e84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e8c:	f7ff fa74 	bl	8008378 <xTaskGetTickCount>
 8008e90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e92:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <prvSampleTimeNow+0x3c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d205      	bcs.n	8008ea8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e9c:	f000 f936 	bl	800910c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	e002      	b.n	8008eae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008eae:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <prvSampleTimeNow+0x3c>)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20001434 	.word	0x20001434

08008ec4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d812      	bhi.n	8008f10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d302      	bcc.n	8008efe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	e01b      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <prvInsertTimerInActiveList+0x7c>)
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3304      	adds	r3, #4
 8008f06:	4619      	mov	r1, r3
 8008f08:	4610      	mov	r0, r2
 8008f0a:	f7fe f9de 	bl	80072ca <vListInsert>
 8008f0e:	e012      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d206      	bcs.n	8008f26 <prvInsertTimerInActiveList+0x62>
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f20:	2301      	movs	r3, #1
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e007      	b.n	8008f36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <prvInsertTimerInActiveList+0x80>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4610      	mov	r0, r2
 8008f32:	f7fe f9ca 	bl	80072ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f36:	697b      	ldr	r3, [r7, #20]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	20001428 	.word	0x20001428
 8008f44:	20001424 	.word	0x20001424

08008f48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08e      	sub	sp, #56	; 0x38
 8008f4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f4e:	e0ca      	b.n	80090e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	da18      	bge.n	8008f88 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f56:	1d3b      	adds	r3, r7, #4
 8008f58:	3304      	adds	r3, #4
 8008f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	61fb      	str	r3, [r7, #28]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f7e:	6850      	ldr	r0, [r2, #4]
 8008f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f82:	6892      	ldr	r2, [r2, #8]
 8008f84:	4611      	mov	r1, r2
 8008f86:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f2c0 80aa 	blt.w	80090e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fe f9cb 	bl	800733c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fa6:	463b      	mov	r3, r7
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff ff6b 	bl	8008e84 <prvSampleTimeNow>
 8008fae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b09      	cmp	r3, #9
 8008fb4:	f200 8097 	bhi.w	80090e6 <prvProcessReceivedCommands+0x19e>
 8008fb8:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <prvProcessReceivedCommands+0x78>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08008fe9 	.word	0x08008fe9
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008fe9 	.word	0x08008fe9
 8008fcc:	0800905d 	.word	0x0800905d
 8008fd0:	08009071 	.word	0x08009071
 8008fd4:	080090bb 	.word	0x080090bb
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008fe9 	.word	0x08008fe9
 8008fe0:	0800905d 	.word	0x0800905d
 8008fe4:	08009071 	.word	0x08009071
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	18d1      	adds	r1, r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009008:	f7ff ff5c 	bl	8008ec4 <prvInsertTimerInActiveList>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d069      	beq.n	80090e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009018:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d05e      	beq.n	80090e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	441a      	add	r2, r3
 8009030:	2300      	movs	r3, #0
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	2300      	movs	r3, #0
 8009036:	2100      	movs	r1, #0
 8009038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800903a:	f7ff fe05 	bl	8008c48 <xTimerGenericCommand>
 800903e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d14f      	bne.n	80090e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	61bb      	str	r3, [r7, #24]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009062:	f023 0301 	bic.w	r3, r3, #1
 8009066:	b2da      	uxtb	r2, r3
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800906e:	e03a      	b.n	80090e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009076:	f043 0301 	orr.w	r3, r3, #1
 800907a:	b2da      	uxtb	r2, r3
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	617b      	str	r3, [r7, #20]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	18d1      	adds	r1, r2, r3
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b4:	f7ff ff06 	bl	8008ec4 <prvInsertTimerInActiveList>
					break;
 80090b8:	e015      	b.n	80090e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ca:	f000 fbe1 	bl	8009890 <vPortFree>
 80090ce:	e00a      	b.n	80090e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d6:	f023 0301 	bic.w	r3, r3, #1
 80090da:	b2da      	uxtb	r2, r3
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80090e2:	e000      	b.n	80090e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80090e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090e6:	4b08      	ldr	r3, [pc, #32]	; (8009108 <prvProcessReceivedCommands+0x1c0>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	1d39      	adds	r1, r7, #4
 80090ec:	2200      	movs	r2, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fe fbec 	bl	80078cc <xQueueReceive>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f47f af2a 	bne.w	8008f50 <prvProcessReceivedCommands+0x8>
	}
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	3730      	adds	r7, #48	; 0x30
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	2000142c 	.word	0x2000142c

0800910c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009112:	e048      	b.n	80091a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009114:	4b2d      	ldr	r3, [pc, #180]	; (80091cc <prvSwitchTimerLists+0xc0>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911e:	4b2b      	ldr	r3, [pc, #172]	; (80091cc <prvSwitchTimerLists+0xc0>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe f905 	bl	800733c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d02e      	beq.n	80091a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	693a      	ldr	r2, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009152:	68ba      	ldr	r2, [r7, #8]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d90e      	bls.n	8009178 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68ba      	ldr	r2, [r7, #8]
 800915e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009166:	4b19      	ldr	r3, [pc, #100]	; (80091cc <prvSwitchTimerLists+0xc0>)
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f7fe f8aa 	bl	80072ca <vListInsert>
 8009176:	e016      	b.n	80091a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009178:	2300      	movs	r3, #0
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	2300      	movs	r3, #0
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	2100      	movs	r1, #0
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fd60 	bl	8008c48 <xTimerGenericCommand>
 8009188:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10a      	bne.n	80091a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	603b      	str	r3, [r7, #0]
}
 80091a2:	bf00      	nop
 80091a4:	e7fe      	b.n	80091a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <prvSwitchTimerLists+0xc0>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1b1      	bne.n	8009114 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091b0:	4b06      	ldr	r3, [pc, #24]	; (80091cc <prvSwitchTimerLists+0xc0>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091b6:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a04      	ldr	r2, [pc, #16]	; (80091cc <prvSwitchTimerLists+0xc0>)
 80091bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091be:	4a04      	ldr	r2, [pc, #16]	; (80091d0 <prvSwitchTimerLists+0xc4>)
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20001424 	.word	0x20001424
 80091d0:	20001428 	.word	0x20001428

080091d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091da:	f000 f96b 	bl	80094b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091de:	4b15      	ldr	r3, [pc, #84]	; (8009234 <prvCheckForValidListAndQueue+0x60>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d120      	bne.n	8009228 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091e6:	4814      	ldr	r0, [pc, #80]	; (8009238 <prvCheckForValidListAndQueue+0x64>)
 80091e8:	f7fe f81e 	bl	8007228 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091ec:	4813      	ldr	r0, [pc, #76]	; (800923c <prvCheckForValidListAndQueue+0x68>)
 80091ee:	f7fe f81b 	bl	8007228 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <prvCheckForValidListAndQueue+0x6c>)
 80091f4:	4a10      	ldr	r2, [pc, #64]	; (8009238 <prvCheckForValidListAndQueue+0x64>)
 80091f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091f8:	4b12      	ldr	r3, [pc, #72]	; (8009244 <prvCheckForValidListAndQueue+0x70>)
 80091fa:	4a10      	ldr	r2, [pc, #64]	; (800923c <prvCheckForValidListAndQueue+0x68>)
 80091fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091fe:	2300      	movs	r3, #0
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	4b11      	ldr	r3, [pc, #68]	; (8009248 <prvCheckForValidListAndQueue+0x74>)
 8009204:	4a11      	ldr	r2, [pc, #68]	; (800924c <prvCheckForValidListAndQueue+0x78>)
 8009206:	2110      	movs	r1, #16
 8009208:	200a      	movs	r0, #10
 800920a:	f7fe f929 	bl	8007460 <xQueueGenericCreateStatic>
 800920e:	4603      	mov	r3, r0
 8009210:	4a08      	ldr	r2, [pc, #32]	; (8009234 <prvCheckForValidListAndQueue+0x60>)
 8009212:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009214:	4b07      	ldr	r3, [pc, #28]	; (8009234 <prvCheckForValidListAndQueue+0x60>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <prvCheckForValidListAndQueue+0x60>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	490b      	ldr	r1, [pc, #44]	; (8009250 <prvCheckForValidListAndQueue+0x7c>)
 8009222:	4618      	mov	r0, r3
 8009224:	f7fe fd42 	bl	8007cac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009228:	f000 f974 	bl	8009514 <vPortExitCritical>
}
 800922c:	bf00      	nop
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	2000142c 	.word	0x2000142c
 8009238:	200013fc 	.word	0x200013fc
 800923c:	20001410 	.word	0x20001410
 8009240:	20001424 	.word	0x20001424
 8009244:	20001428 	.word	0x20001428
 8009248:	200014d8 	.word	0x200014d8
 800924c:	20001438 	.word	0x20001438
 8009250:	080106e0 	.word	0x080106e0

08009254 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3b04      	subs	r3, #4
 8009264:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800926c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3b04      	subs	r3, #4
 8009272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f023 0201 	bic.w	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3b04      	subs	r3, #4
 8009282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009284:	4a0c      	ldr	r2, [pc, #48]	; (80092b8 <pxPortInitialiseStack+0x64>)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3b14      	subs	r3, #20
 800928e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3b04      	subs	r3, #4
 800929a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f06f 0202 	mvn.w	r2, #2
 80092a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3b20      	subs	r3, #32
 80092a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092aa:	68fb      	ldr	r3, [r7, #12]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	080092bd 	.word	0x080092bd

080092bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092c6:	4b12      	ldr	r3, [pc, #72]	; (8009310 <prvTaskExitError+0x54>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d00a      	beq.n	80092e6 <prvTaskExitError+0x2a>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
 80092e0:	60fb      	str	r3, [r7, #12]
}
 80092e2:	bf00      	nop
 80092e4:	e7fe      	b.n	80092e4 <prvTaskExitError+0x28>
	__asm volatile
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	60bb      	str	r3, [r7, #8]
}
 80092f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092fa:	bf00      	nop
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0fc      	beq.n	80092fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009302:	bf00      	nop
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	20000010 	.word	0x20000010
	...

08009320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009320:	4b07      	ldr	r3, [pc, #28]	; (8009340 <pxCurrentTCBConst2>)
 8009322:	6819      	ldr	r1, [r3, #0]
 8009324:	6808      	ldr	r0, [r1, #0]
 8009326:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932a:	f380 8809 	msr	PSP, r0
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f04f 0000 	mov.w	r0, #0
 8009336:	f380 8811 	msr	BASEPRI, r0
 800933a:	4770      	bx	lr
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst2>:
 8009340:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop

08009348 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009348:	4808      	ldr	r0, [pc, #32]	; (800936c <prvPortStartFirstTask+0x24>)
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	6800      	ldr	r0, [r0, #0]
 800934e:	f380 8808 	msr	MSP, r0
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8814 	msr	CONTROL, r0
 800935a:	b662      	cpsie	i
 800935c:	b661      	cpsie	f
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	df00      	svc	0
 8009368:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800936a:	bf00      	nop
 800936c:	e000ed08 	.word	0xe000ed08

08009370 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009376:	4b46      	ldr	r3, [pc, #280]	; (8009490 <xPortStartScheduler+0x120>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a46      	ldr	r2, [pc, #280]	; (8009494 <xPortStartScheduler+0x124>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d10a      	bne.n	8009396 <xPortStartScheduler+0x26>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	613b      	str	r3, [r7, #16]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009396:	4b3e      	ldr	r3, [pc, #248]	; (8009490 <xPortStartScheduler+0x120>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a3f      	ldr	r2, [pc, #252]	; (8009498 <xPortStartScheduler+0x128>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d10a      	bne.n	80093b6 <xPortStartScheduler+0x46>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	60fb      	str	r3, [r7, #12]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093b6:	4b39      	ldr	r3, [pc, #228]	; (800949c <xPortStartScheduler+0x12c>)
 80093b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	22ff      	movs	r2, #255	; 0xff
 80093c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	4b31      	ldr	r3, [pc, #196]	; (80094a0 <xPortStartScheduler+0x130>)
 80093dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093de:	4b31      	ldr	r3, [pc, #196]	; (80094a4 <xPortStartScheduler+0x134>)
 80093e0:	2207      	movs	r2, #7
 80093e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093e4:	e009      	b.n	80093fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80093e6:	4b2f      	ldr	r3, [pc, #188]	; (80094a4 <xPortStartScheduler+0x134>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	4a2d      	ldr	r2, [pc, #180]	; (80094a4 <xPortStartScheduler+0x134>)
 80093ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	005b      	lsls	r3, r3, #1
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d0ef      	beq.n	80093e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009406:	4b27      	ldr	r3, [pc, #156]	; (80094a4 <xPortStartScheduler+0x134>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f1c3 0307 	rsb	r3, r3, #7
 800940e:	2b04      	cmp	r3, #4
 8009410:	d00a      	beq.n	8009428 <xPortStartScheduler+0xb8>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60bb      	str	r3, [r7, #8]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009428:	4b1e      	ldr	r3, [pc, #120]	; (80094a4 <xPortStartScheduler+0x134>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <xPortStartScheduler+0x134>)
 8009430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009432:	4b1c      	ldr	r3, [pc, #112]	; (80094a4 <xPortStartScheduler+0x134>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800943a:	4a1a      	ldr	r2, [pc, #104]	; (80094a4 <xPortStartScheduler+0x134>)
 800943c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	b2da      	uxtb	r2, r3
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009446:	4b18      	ldr	r3, [pc, #96]	; (80094a8 <xPortStartScheduler+0x138>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a17      	ldr	r2, [pc, #92]	; (80094a8 <xPortStartScheduler+0x138>)
 800944c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009450:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009452:	4b15      	ldr	r3, [pc, #84]	; (80094a8 <xPortStartScheduler+0x138>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a14      	ldr	r2, [pc, #80]	; (80094a8 <xPortStartScheduler+0x138>)
 8009458:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800945c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800945e:	f000 f8dd 	bl	800961c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009462:	4b12      	ldr	r3, [pc, #72]	; (80094ac <xPortStartScheduler+0x13c>)
 8009464:	2200      	movs	r2, #0
 8009466:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009468:	f000 f8fc 	bl	8009664 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800946c:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <xPortStartScheduler+0x140>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a0f      	ldr	r2, [pc, #60]	; (80094b0 <xPortStartScheduler+0x140>)
 8009472:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009476:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009478:	f7ff ff66 	bl	8009348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800947c:	f7ff f846 	bl	800850c <vTaskSwitchContext>
	prvTaskExitError();
 8009480:	f7ff ff1c 	bl	80092bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	e000ed00 	.word	0xe000ed00
 8009494:	410fc271 	.word	0x410fc271
 8009498:	410fc270 	.word	0x410fc270
 800949c:	e000e400 	.word	0xe000e400
 80094a0:	20001528 	.word	0x20001528
 80094a4:	2000152c 	.word	0x2000152c
 80094a8:	e000ed20 	.word	0xe000ed20
 80094ac:	20000010 	.word	0x20000010
 80094b0:	e000ef34 	.word	0xe000ef34

080094b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	607b      	str	r3, [r7, #4]
}
 80094cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ce:	4b0f      	ldr	r3, [pc, #60]	; (800950c <vPortEnterCritical+0x58>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	4a0d      	ldr	r2, [pc, #52]	; (800950c <vPortEnterCritical+0x58>)
 80094d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094d8:	4b0c      	ldr	r3, [pc, #48]	; (800950c <vPortEnterCritical+0x58>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d10f      	bne.n	8009500 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094e0:	4b0b      	ldr	r3, [pc, #44]	; (8009510 <vPortEnterCritical+0x5c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <vPortEnterCritical+0x4c>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	603b      	str	r3, [r7, #0]
}
 80094fc:	bf00      	nop
 80094fe:	e7fe      	b.n	80094fe <vPortEnterCritical+0x4a>
	}
}
 8009500:	bf00      	nop
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	20000010 	.word	0x20000010
 8009510:	e000ed04 	.word	0xe000ed04

08009514 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <vPortExitCritical+0x50>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10a      	bne.n	8009538 <vPortExitCritical+0x24>
	__asm volatile
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	607b      	str	r3, [r7, #4]
}
 8009534:	bf00      	nop
 8009536:	e7fe      	b.n	8009536 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <vPortExitCritical+0x50>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3b01      	subs	r3, #1
 800953e:	4a09      	ldr	r2, [pc, #36]	; (8009564 <vPortExitCritical+0x50>)
 8009540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009542:	4b08      	ldr	r3, [pc, #32]	; (8009564 <vPortExitCritical+0x50>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d105      	bne.n	8009556 <vPortExitCritical+0x42>
 800954a:	2300      	movs	r3, #0
 800954c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	f383 8811 	msr	BASEPRI, r3
}
 8009554:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	20000010 	.word	0x20000010
	...

08009570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009570:	f3ef 8009 	mrs	r0, PSP
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <pxCurrentTCBConst>)
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	f01e 0f10 	tst.w	lr, #16
 8009580:	bf08      	it	eq
 8009582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958a:	6010      	str	r0, [r2, #0]
 800958c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009590:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009594:	f380 8811 	msr	BASEPRI, r0
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f7fe ffb4 	bl	800850c <vTaskSwitchContext>
 80095a4:	f04f 0000 	mov.w	r0, #0
 80095a8:	f380 8811 	msr	BASEPRI, r0
 80095ac:	bc09      	pop	{r0, r3}
 80095ae:	6819      	ldr	r1, [r3, #0]
 80095b0:	6808      	ldr	r0, [r1, #0]
 80095b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b6:	f01e 0f10 	tst.w	lr, #16
 80095ba:	bf08      	it	eq
 80095bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095c0:	f380 8809 	msr	PSP, r0
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w

080095d0 <pxCurrentTCBConst>:
 80095d0:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
	__asm volatile
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	607b      	str	r3, [r7, #4]
}
 80095f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095f2:	f7fe fed1 	bl	8008398 <xTaskIncrementTick>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <xPortSysTickHandler+0x40>)
 80095fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	2300      	movs	r3, #0
 8009606:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f383 8811 	msr	BASEPRI, r3
}
 800960e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800961c:	b480      	push	{r7}
 800961e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <vPortSetupTimerInterrupt+0x34>)
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009626:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <vPortSetupTimerInterrupt+0x38>)
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800962c:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <vPortSetupTimerInterrupt+0x3c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a0a      	ldr	r2, [pc, #40]	; (800965c <vPortSetupTimerInterrupt+0x40>)
 8009632:	fba2 2303 	umull	r2, r3, r2, r3
 8009636:	099b      	lsrs	r3, r3, #6
 8009638:	4a09      	ldr	r2, [pc, #36]	; (8009660 <vPortSetupTimerInterrupt+0x44>)
 800963a:	3b01      	subs	r3, #1
 800963c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800963e:	4b04      	ldr	r3, [pc, #16]	; (8009650 <vPortSetupTimerInterrupt+0x34>)
 8009640:	2207      	movs	r2, #7
 8009642:	601a      	str	r2, [r3, #0]
}
 8009644:	bf00      	nop
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	e000e010 	.word	0xe000e010
 8009654:	e000e018 	.word	0xe000e018
 8009658:	20000004 	.word	0x20000004
 800965c:	10624dd3 	.word	0x10624dd3
 8009660:	e000e014 	.word	0xe000e014

08009664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009664:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009674 <vPortEnableVFP+0x10>
 8009668:	6801      	ldr	r1, [r0, #0]
 800966a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800966e:	6001      	str	r1, [r0, #0]
 8009670:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009672:	bf00      	nop
 8009674:	e000ed88 	.word	0xe000ed88

08009678 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800967e:	f3ef 8305 	mrs	r3, IPSR
 8009682:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2b0f      	cmp	r3, #15
 8009688:	d914      	bls.n	80096b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800968a:	4a17      	ldr	r2, [pc, #92]	; (80096e8 <vPortValidateInterruptPriority+0x70>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009694:	4b15      	ldr	r3, [pc, #84]	; (80096ec <vPortValidateInterruptPriority+0x74>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	7afa      	ldrb	r2, [r7, #11]
 800969a:	429a      	cmp	r2, r3
 800969c:	d20a      	bcs.n	80096b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	607b      	str	r3, [r7, #4]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <vPortValidateInterruptPriority+0x78>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <vPortValidateInterruptPriority+0x7c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d90a      	bls.n	80096da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c8:	f383 8811 	msr	BASEPRI, r3
 80096cc:	f3bf 8f6f 	isb	sy
 80096d0:	f3bf 8f4f 	dsb	sy
 80096d4:	603b      	str	r3, [r7, #0]
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <vPortValidateInterruptPriority+0x60>
	}
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	e000e3f0 	.word	0xe000e3f0
 80096ec:	20001528 	.word	0x20001528
 80096f0:	e000ed0c 	.word	0xe000ed0c
 80096f4:	2000152c 	.word	0x2000152c

080096f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08a      	sub	sp, #40	; 0x28
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009700:	2300      	movs	r3, #0
 8009702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009704:	f7fe fd8c 	bl	8008220 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009708:	4b5b      	ldr	r3, [pc, #364]	; (8009878 <pvPortMalloc+0x180>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009710:	f000 f920 	bl	8009954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009714:	4b59      	ldr	r3, [pc, #356]	; (800987c <pvPortMalloc+0x184>)
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	f040 8093 	bne.w	8009848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01d      	beq.n	8009764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009728:	2208      	movs	r2, #8
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4413      	add	r3, r2
 800972e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	2b00      	cmp	r3, #0
 8009738:	d014      	beq.n	8009764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f023 0307 	bic.w	r3, r3, #7
 8009740:	3308      	adds	r3, #8
 8009742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00a      	beq.n	8009764 <pvPortMalloc+0x6c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	617b      	str	r3, [r7, #20]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d06e      	beq.n	8009848 <pvPortMalloc+0x150>
 800976a:	4b45      	ldr	r3, [pc, #276]	; (8009880 <pvPortMalloc+0x188>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d869      	bhi.n	8009848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009774:	4b43      	ldr	r3, [pc, #268]	; (8009884 <pvPortMalloc+0x18c>)
 8009776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009778:	4b42      	ldr	r3, [pc, #264]	; (8009884 <pvPortMalloc+0x18c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800977e:	e004      	b.n	800978a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d903      	bls.n	800979c <pvPortMalloc+0xa4>
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1f1      	bne.n	8009780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800979c:	4b36      	ldr	r3, [pc, #216]	; (8009878 <pvPortMalloc+0x180>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d050      	beq.n	8009848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2208      	movs	r2, #8
 80097ac:	4413      	add	r3, r2
 80097ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	2308      	movs	r3, #8
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d91f      	bls.n	8009808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <pvPortMalloc+0xf8>
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	613b      	str	r3, [r7, #16]
}
 80097ec:	bf00      	nop
 80097ee:	e7fe      	b.n	80097ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	1ad2      	subs	r2, r2, r3
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009802:	69b8      	ldr	r0, [r7, #24]
 8009804:	f000 f908 	bl	8009a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009808:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <pvPortMalloc+0x188>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	4a1b      	ldr	r2, [pc, #108]	; (8009880 <pvPortMalloc+0x188>)
 8009814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009816:	4b1a      	ldr	r3, [pc, #104]	; (8009880 <pvPortMalloc+0x188>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	4b1b      	ldr	r3, [pc, #108]	; (8009888 <pvPortMalloc+0x190>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d203      	bcs.n	800982a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009822:	4b17      	ldr	r3, [pc, #92]	; (8009880 <pvPortMalloc+0x188>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a18      	ldr	r2, [pc, #96]	; (8009888 <pvPortMalloc+0x190>)
 8009828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	4b13      	ldr	r3, [pc, #76]	; (800987c <pvPortMalloc+0x184>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	431a      	orrs	r2, r3
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <pvPortMalloc+0x194>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	4a11      	ldr	r2, [pc, #68]	; (800988c <pvPortMalloc+0x194>)
 8009846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009848:	f7fe fcf8 	bl	800823c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00a      	beq.n	800986c <pvPortMalloc+0x174>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	60fb      	str	r3, [r7, #12]
}
 8009868:	bf00      	nop
 800986a:	e7fe      	b.n	800986a <pvPortMalloc+0x172>
	return pvReturn;
 800986c:	69fb      	ldr	r3, [r7, #28]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3728      	adds	r7, #40	; 0x28
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20005138 	.word	0x20005138
 800987c:	2000514c 	.word	0x2000514c
 8009880:	2000513c 	.word	0x2000513c
 8009884:	20005130 	.word	0x20005130
 8009888:	20005140 	.word	0x20005140
 800988c:	20005144 	.word	0x20005144

08009890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d04d      	beq.n	800993e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098a2:	2308      	movs	r3, #8
 80098a4:	425b      	negs	r3, r3
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	4413      	add	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <vPortFree+0xb8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4013      	ands	r3, r2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <vPortFree+0x44>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	60fb      	str	r3, [r7, #12]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00a      	beq.n	80098f2 <vPortFree+0x62>
	__asm volatile
 80098dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	60bb      	str	r3, [r7, #8]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	4b14      	ldr	r3, [pc, #80]	; (8009948 <vPortFree+0xb8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01e      	beq.n	800993e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d11a      	bne.n	800993e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <vPortFree+0xb8>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	43db      	mvns	r3, r3
 8009912:	401a      	ands	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009918:	f7fe fc82 	bl	8008220 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	685a      	ldr	r2, [r3, #4]
 8009920:	4b0a      	ldr	r3, [pc, #40]	; (800994c <vPortFree+0xbc>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4413      	add	r3, r2
 8009926:	4a09      	ldr	r2, [pc, #36]	; (800994c <vPortFree+0xbc>)
 8009928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800992a:	6938      	ldr	r0, [r7, #16]
 800992c:	f000 f874 	bl	8009a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009930:	4b07      	ldr	r3, [pc, #28]	; (8009950 <vPortFree+0xc0>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3301      	adds	r3, #1
 8009936:	4a06      	ldr	r2, [pc, #24]	; (8009950 <vPortFree+0xc0>)
 8009938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800993a:	f7fe fc7f 	bl	800823c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800993e:	bf00      	nop
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	2000514c 	.word	0x2000514c
 800994c:	2000513c 	.word	0x2000513c
 8009950:	20005148 	.word	0x20005148

08009954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800995a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800995e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009960:	4b27      	ldr	r3, [pc, #156]	; (8009a00 <prvHeapInit+0xac>)
 8009962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00c      	beq.n	8009988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3307      	adds	r3, #7
 8009972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0307 	bic.w	r3, r3, #7
 800997a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	4a1f      	ldr	r2, [pc, #124]	; (8009a00 <prvHeapInit+0xac>)
 8009984:	4413      	add	r3, r2
 8009986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800998c:	4a1d      	ldr	r2, [pc, #116]	; (8009a04 <prvHeapInit+0xb0>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <prvHeapInit+0xb0>)
 8009994:	2200      	movs	r2, #0
 8009996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	4413      	add	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099a0:	2208      	movs	r2, #8
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0307 	bic.w	r3, r3, #7
 80099ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a15      	ldr	r2, [pc, #84]	; (8009a08 <prvHeapInit+0xb4>)
 80099b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099b6:	4b14      	ldr	r3, [pc, #80]	; (8009a08 <prvHeapInit+0xb4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2200      	movs	r2, #0
 80099bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099be:	4b12      	ldr	r3, [pc, #72]	; (8009a08 <prvHeapInit+0xb4>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099d4:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <prvHeapInit+0xb4>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <prvHeapInit+0xb8>)
 80099e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <prvHeapInit+0xbc>)
 80099ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099ec:	4b09      	ldr	r3, [pc, #36]	; (8009a14 <prvHeapInit+0xc0>)
 80099ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	20001530 	.word	0x20001530
 8009a04:	20005130 	.word	0x20005130
 8009a08:	20005138 	.word	0x20005138
 8009a0c:	20005140 	.word	0x20005140
 8009a10:	2000513c 	.word	0x2000513c
 8009a14:	2000514c 	.word	0x2000514c

08009a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a20:	4b28      	ldr	r3, [pc, #160]	; (8009ac4 <prvInsertBlockIntoFreeList+0xac>)
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e002      	b.n	8009a2c <prvInsertBlockIntoFreeList+0x14>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d8f7      	bhi.n	8009a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	4413      	add	r3, r2
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d108      	bne.n	8009a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	441a      	add	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	441a      	add	r2, r3
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d118      	bne.n	8009aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b15      	ldr	r3, [pc, #84]	; (8009ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d00d      	beq.n	8009a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	441a      	add	r2, r3
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e008      	b.n	8009aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a96:	4b0c      	ldr	r3, [pc, #48]	; (8009ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	e003      	b.n	8009aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d002      	beq.n	8009ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ab6:	bf00      	nop
 8009ab8:	3714      	adds	r7, #20
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20005130 	.word	0x20005130
 8009ac8:	20005138 	.word	0x20005138

08009acc <_ZN5PrintC1Ev>:
    Print() :
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
        write_error(0)
 8009ad4:	4a06      	ldr	r2, [pc, #24]	; (8009af0 <_ZN5PrintC1Ev+0x24>)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	605a      	str	r2, [r3, #4]
    }
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	080107c8 	.word	0x080107c8

08009af4 <_ZN4U8G2C1Ev>:
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
public:
    u8g2_uint_t tx, ty;

    U8G2(void)
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    {
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7ff ffe4 	bl	8009acc <_ZN5PrintC1Ev>
 8009b04:	4a07      	ldr	r2, [pc, #28]	; (8009b24 <_ZN4U8G2C1Ev+0x30>)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	601a      	str	r2, [r3, #0]
        cpp_next_cb = u8x8_ascii_next;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a06      	ldr	r2, [pc, #24]	; (8009b28 <_ZN4U8G2C1Ev+0x34>)
 8009b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        home();
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f925 	bl	8009d62 <_ZN4U8G24homeEv>
    }
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	08010c04 	.word	0x08010c04
 8009b28:	08002c59 	.word	0x08002c59

08009b2c <_ZN4U8G211initDisplayEv>:
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void)
    { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void)
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
    {
        u8g2_InitDisplay(&u8g2);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3308      	adds	r3, #8
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7f9 fb8f 	bl	800325c <u8x8_InitDisplay>
    }
 8009b3e:	bf00      	nop
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <_ZN4U8G212clearDisplayEv>:

    void clearDisplay(void)
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
    {
        u8g2_ClearDisplay(&u8g2);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3308      	adds	r3, #8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f7 fe49 	bl	80017ea <u8g2_ClearDisplay>
    }
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <_ZN4U8G212setPowerSaveEh>:

    void setPowerSave(uint8_t is_enable)
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
    {
        u8g2_SetPowerSave(&u8g2, is_enable);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3308      	adds	r3, #8
 8009b70:	78fa      	ldrb	r2, [r7, #3]
 8009b72:	4611      	mov	r1, r2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7f9 fb80 	bl	800327a <u8x8_SetPowerSave>
    }
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <_ZN4U8G24InitEv>:
    {
        u8g2_SetDisplayRotation(&u8g2, u8g2_cb);
    }


    bool Init()
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
    {
        if (U8G2_I2C_HANDLE->Instance == I2C_SOFT)
 8009b8c:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <_ZN4U8G24InitEv+0x44>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <_ZN4U8G24InitEv+0x16>
            Soft_I2C_Init();
 8009b96:	f7fa fafb 	bl	8004190 <Soft_I2C_Init>

        /* note: call to u8x8_utf8_init is not required here, this is done in the setup procedures before */
        setPowerSave(1);
 8009b9a:	2101      	movs	r1, #1
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7ff ffdf 	bl	8009b60 <_ZN4U8G212setPowerSaveEh>
        initDisplay();
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff ffc2 	bl	8009b2c <_ZN4U8G211initDisplayEv>
        clearDisplay();
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ffcc 	bl	8009b46 <_ZN4U8G212clearDisplayEv>
        clearBuffer();
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f819 	bl	8009be6 <_ZN4U8G211clearBufferEv>
        setPowerSave(0);
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff ffd2 	bl	8009b60 <_ZN4U8G212setPowerSaveEh>

        return 1;
 8009bbc:	2301      	movs	r3, #1
    }
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000614 	.word	0x20000614

08009bcc <_ZN4U8G210sendBufferEv>:
    u8g2_uint_t getDisplayWidth(void)
    { return u8g2_GetDisplayWidth(&u8g2); }


    /* u8g2_buffer.c */
    void sendBuffer(void)
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
    { u8g2_SendBuffer(&u8g2); }
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3308      	adds	r3, #8
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7f7 fd9e 	bl	800171a <u8g2_SendBuffer>
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <_ZN4U8G211clearBufferEv>:

    void clearBuffer(void)
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
    { u8g2_ClearBuffer(&u8g2); }
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7f7 fd1e 	bl	8001634 <u8g2_ClearBuffer>
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <_ZN4U8G28drawLineEtttt>:

    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL)
    { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af02      	add	r7, sp, #8
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4603      	mov	r3, r0
 8009c10:	817b      	strh	r3, [r7, #10]
 8009c12:	460b      	mov	r3, r1
 8009c14:	813b      	strh	r3, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
    { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f103 0008 	add.w	r0, r3, #8
 8009c20:	88fc      	ldrh	r4, [r7, #6]
 8009c22:	893a      	ldrh	r2, [r7, #8]
 8009c24:	8979      	ldrh	r1, [r7, #10]
 8009c26:	8c3b      	ldrh	r3, [r7, #32]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	f7f8 fce1 	bl	80025f2 <u8g2_DrawLine>
 8009c30:	bf00      	nop
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd90      	pop	{r4, r7, pc}

08009c38 <_ZN4U8G27setFontEPKh>:
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);

    /* u8g2_font.c */

    void setFont(const uint8_t *font)
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
    { u8g2_SetFont(&u8g2, font); }
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3308      	adds	r3, #8
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f8 fb2d 	bl	80022a8 <u8g2_SetFont>
 8009c4e:	bf00      	nop
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <_ZN4U8G25writeEh>:
    void writeBufferPBM2(Print &p);

    void writeBufferXBM2(Print &p);

    /* virtual function for print base class */
    size_t write(uint8_t v)
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
    {
        uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	3208      	adds	r2, #8
 8009c6e:	78f9      	ldrb	r1, [r7, #3]
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	4603      	mov	r3, r0
 8009c76:	81fb      	strh	r3, [r7, #14]

        if (e < 0x0fffe)
 8009c78:	89fb      	ldrh	r3, [r7, #14]
 8009c7a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d846      	bhi.n	8009d10 <_ZN4U8G25writeEh+0xb8>
        {
            u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f103 0008 	add.w	r0, r3, #8
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 10a0 	ldrh.w	r1, [r3, #160]	; 0xa0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8009c94:	89fb      	ldrh	r3, [r7, #14]
 8009c96:	f7f8 fa2d 	bl	80020f4 <u8g2_DrawGlyph>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	81bb      	strh	r3, [r7, #12]

#ifdef U8G2_WITH_FONT_ROTATION
            switch (u8g2.font_decode.dir)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d833      	bhi.n	8009d10 <_ZN4U8G25writeEh+0xb8>
 8009ca8:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <_ZN4U8G25writeEh+0x58>)
 8009caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cae:	bf00      	nop
 8009cb0:	08009cc1 	.word	0x08009cc1
 8009cb4:	08009cd5 	.word	0x08009cd5
 8009cb8:	08009ce9 	.word	0x08009ce9
 8009cbc:	08009cfd 	.word	0x08009cfd
            {
                case 0:
                    tx += delta;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8009cc6:	89bb      	ldrh	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
                    break;
 8009cd2:	e01d      	b.n	8009d10 <_ZN4U8G25writeEh+0xb8>
                case 1:
                    ty += delta;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8009cda:	89bb      	ldrh	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    break;
 8009ce6:	e013      	b.n	8009d10 <_ZN4U8G25writeEh+0xb8>
                case 2:
                    tx -= delta;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 8009cee:	89bb      	ldrh	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
                    break;
 8009cfa:	e009      	b.n	8009d10 <_ZN4U8G25writeEh+0xb8>
                case 3:
                    ty -= delta;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 8009d02:	89bb      	ldrh	r3, [r7, #12]
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    break;
 8009d0e:	bf00      	nop
#else
            tx += delta;
#endif

        }
        return 1;
 8009d10:	2301      	movs	r3, #1
    }
 8009d12:	4618      	mov	r0, r3
 8009d14:	3710      	adds	r7, #16
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop

08009d1c <_ZN4U8G25writeEPKhj>:

    size_t write(const uint8_t *buffer, size_t size)
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
    {
        size_t cnt = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	617b      	str	r3, [r7, #20]
        while (size > 0)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d012      	beq.n	8009d58 <_ZN4U8G25writeEPKhj+0x3c>
        {
            cnt += write(*buffer++);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3308      	adds	r3, #8
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	1c59      	adds	r1, r3, #1
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	4790      	blx	r2
 8009d48:	4602      	mov	r2, r0
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	617b      	str	r3, [r7, #20]
            size--;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	607b      	str	r3, [r7, #4]
        while (size > 0)
 8009d56:	e7e9      	b.n	8009d2c <_ZN4U8G25writeEPKhj+0x10>
        }
        return cnt;
 8009d58:	697b      	ldr	r3, [r7, #20]
    }
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <_ZN4U8G24homeEv>:
        return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post);
    }


    /* LiquidCrystal compatible functions */
    void home(void)
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
    {
        tx = 0;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        ty = 0;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        u8x8_utf8_init(u8g2_GetU8x8(&u8g2));
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f8 ff5c 	bl	8002c3c <u8x8_utf8_init>
    }
 8009d84:	bf00      	nop
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <_ZN4U8G29setCursorEtt>:
    { u8g2_SetPowerSave(&u8g2, 1); }

    void display(void)
    { u8g2_SetPowerSave(&u8g2, 0); }

    void setCursor(u8g2_uint_t x, u8g2_uint_t y)
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	807b      	strh	r3, [r7, #2]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	803b      	strh	r3, [r7, #0]
    {
        tx = x;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	887a      	ldrh	r2, [r7, #2]
 8009da0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        ty = y;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	883a      	ldrh	r2, [r7, #0]
 8009da8:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
    }
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <_ZN4U8G2D1Ev>:
class U8G2 : public Print
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	4a05      	ldr	r2, [pc, #20]	; (8009dd8 <_ZN4U8G2D1Ev+0x20>)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f7 f9d7 	bl	800117c <_ZN5PrintD1Ev>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	08010c04 	.word	0x08010c04

08009ddc <_ZN4U8G2D0Ev>:
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7ff ffe7 	bl	8009db8 <_ZN4U8G2D1Ev>
 8009dea:	21a4      	movs	r1, #164	; 0xa4
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fdff 	bl	800a9f0 <_ZdlPvj>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct>:
class SSD1306 : public U8G2
{
private:

public:
    explicit SSD1306(I2C_HandleTypeDef *_hi2c, const u8g2_cb_t *rotation = U8G2_R0) : U8G2()
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff fe72 	bl	8009af4 <_ZN4U8G2C1Ev>
 8009e10:	4a09      	ldr	r2, [pc, #36]	; (8009e38 <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct+0x3c>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	601a      	str	r2, [r3, #0]
    {
        U8G2_I2C_HANDLE = _hi2c;
 8009e16:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct+0x40>)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6013      	str	r3, [r2, #0]
        u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, rotation, u8x8_byte_stm32_hw_i2c, u8x8_stm32_gpio_and_delay);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f103 0008 	add.w	r0, r3, #8
 8009e22:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct+0x44>)
 8009e24:	4a07      	ldr	r2, [pc, #28]	; (8009e44 <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct+0x48>)
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	f7f7 fd04 	bl	8001834 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    }
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	08010be8 	.word	0x08010be8
 8009e3c:	20000614 	.word	0x20000614
 8009e40:	08002b2f 	.word	0x08002b2f
 8009e44:	08002b61 	.word	0x08002b61

08009e48 <_Z16ThreadOledUpdatePv>:



osThreadId_t oledTaskHandle;
void ThreadOledUpdate(void *argument)
{
 8009e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e4c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8009e50:	af02      	add	r7, sp, #8
 8009e52:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009e56:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8009e5a:	6018      	str	r0, [r3, #0]
	int points[8][2]={
 8009e5c:	4bb9      	ldr	r3, [pc, #740]	; (800a144 <_Z16ThreadOledUpdatePv+0x2fc>)
 8009e5e:	f507 7408 	add.w	r4, r7, #544	; 0x220
 8009e62:	461d      	mov	r5, r3
 8009e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{	61	,	46	},
			{	84	,	43	},

	};

	float origi_points[8][3]={
 8009e78:	4ab3      	ldr	r2, [pc, #716]	; (800a148 <_Z16ThreadOledUpdatePv+0x300>)
 8009e7a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8009e7e:	4611      	mov	r1, r2
 8009e80:	2260      	movs	r2, #96	; 0x60
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 fff2 	bl	800be6c <memcpy>
			{1,-1,-1},
			{-1,-1,-1}
	};
	double rotated_3dpoint[8][3];
	//double rotationxy[8][3];
	float z_offset = -4.0;
 8009e88:	4bb0      	ldr	r3, [pc, #704]	; (800a14c <_Z16ThreadOledUpdatePv+0x304>)
 8009e8a:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	float cube_size = 60.0;
 8009e8e:	4bb0      	ldr	r3, [pc, #704]	; (800a150 <_Z16ThreadOledUpdatePv+0x308>)
 8009e90:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	double rotx;
	double rotz;

	for(;;)
	{
		mpu6050.Update(true);
 8009e94:	2101      	movs	r1, #1
 8009e96:	48af      	ldr	r0, [pc, #700]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009e98:	f7f9 fc0a 	bl	80036b0 <_ZN7MPU60506UpdateEb>
		oled.clearBuffer();
 8009e9c:	48ae      	ldr	r0, [pc, #696]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009e9e:	f7ff fea2 	bl	8009be6 <_ZN4U8G211clearBufferEv>
		oled.setFont(u8g2_font_5x7_tr);
 8009ea2:	49ae      	ldr	r1, [pc, #696]	; (800a15c <_Z16ThreadOledUpdatePv+0x314>)
 8009ea4:	48ac      	ldr	r0, [pc, #688]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009ea6:	f7ff fec7 	bl	8009c38 <_ZN4U8G27setFontEPKh>
		oled.setCursor(0, 6);
 8009eaa:	2206      	movs	r2, #6
 8009eac:	2100      	movs	r1, #0
 8009eae:	48aa      	ldr	r0, [pc, #680]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009eb0:	f7ff ff6c 	bl	8009d8c <_ZN4U8G29setCursorEtt>
		oled.printf("GX: %.2f",mpu6050.data.ax);
 8009eb4:	4ba7      	ldr	r3, [pc, #668]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f6 fb4c 	bl	8000558 <__aeabi_f2d>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	49a6      	ldr	r1, [pc, #664]	; (800a160 <_Z16ThreadOledUpdatePv+0x318>)
 8009ec6:	48a4      	ldr	r0, [pc, #656]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009ec8:	f7f7 f90c 	bl	80010e4 <_ZN5Print6printfEPKcz>
		oled.setCursor(0, 13);
 8009ecc:	220d      	movs	r2, #13
 8009ece:	2100      	movs	r1, #0
 8009ed0:	48a1      	ldr	r0, [pc, #644]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009ed2:	f7ff ff5b 	bl	8009d8c <_ZN4U8G29setCursorEtt>
		oled.printf("GY: %.2f",mpu6050.data.ay);
 8009ed6:	4b9f      	ldr	r3, [pc, #636]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7f6 fb3b 	bl	8000558 <__aeabi_f2d>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	499f      	ldr	r1, [pc, #636]	; (800a164 <_Z16ThreadOledUpdatePv+0x31c>)
 8009ee8:	489b      	ldr	r0, [pc, #620]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009eea:	f7f7 f8fb 	bl	80010e4 <_ZN5Print6printfEPKcz>
		oled.setCursor(0, 19);
 8009eee:	2213      	movs	r2, #19
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4899      	ldr	r0, [pc, #612]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009ef4:	f7ff ff4a 	bl	8009d8c <_ZN4U8G29setCursorEtt>
		oled.printf("GZ: %.2f",mpu6050.data.az);
 8009ef8:	4b96      	ldr	r3, [pc, #600]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009efa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7f6 fb2a 	bl	8000558 <__aeabi_f2d>
 8009f04:	4602      	mov	r2, r0
 8009f06:	460b      	mov	r3, r1
 8009f08:	4997      	ldr	r1, [pc, #604]	; (800a168 <_Z16ThreadOledUpdatePv+0x320>)
 8009f0a:	4893      	ldr	r0, [pc, #588]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 8009f0c:	f7f7 f8ea 	bl	80010e4 <_ZN5Print6printfEPKcz>
		roty = mpu6050.data.ay;
 8009f10:	4b90      	ldr	r3, [pc, #576]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7f6 fb1e 	bl	8000558 <__aeabi_f2d>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
		rotx = mpu6050.data.ax;
 8009f24:	4b8b      	ldr	r3, [pc, #556]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 fb14 	bl	8000558 <__aeabi_f2d>
 8009f30:	4602      	mov	r2, r0
 8009f32:	460b      	mov	r3, r1
 8009f34:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
		rotz = mpu6050.data.az;
 8009f38:	4b86      	ldr	r3, [pc, #536]	; (800a154 <_Z16ThreadOledUpdatePv+0x30c>)
 8009f3a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f6 fb0a 	bl	8000558 <__aeabi_f2d>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260

		double Mrotx[3][3] = {
 8009f4c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009f50:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009f54:	4618      	mov	r0, r3
 8009f56:	2348      	movs	r3, #72	; 0x48
 8009f58:	461a      	mov	r2, r3
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	f001 ffae 	bl	800bebc <memset>
 8009f60:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009f64:	f5a3 7118 	sub.w	r1, r3, #608	; 0x260
 8009f68:	f04f 0200 	mov.w	r2, #0
 8009f6c:	4b7f      	ldr	r3, [pc, #508]	; (800a16c <_Z16ThreadOledUpdatePv+0x324>)
 8009f6e:	e9c1 2300 	strd	r2, r3, [r1]
				{1, 	0 , 		0},
				{0, cos(rotx), -sin(rotx)},
 8009f72:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8009f76:	f000 fd57 	bl	800aa28 <cos>
 8009f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8009f7e:	eef0 7a60 	vmov.f32	s15, s1
				{0, sin(rotx), cos(rotx)}

		};
 8009f82:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009f86:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009f8a:	ed83 7b08 	vstr	d7, [r3, #32]
				{0, cos(rotx), -sin(rotx)},
 8009f8e:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8009f92:	f000 fde5 	bl	800ab60 <sin>
 8009f96:	ec53 2b10 	vmov	r2, r3, d0
 8009f9a:	61ba      	str	r2, [r7, #24]
 8009f9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009fa0:	61fb      	str	r3, [r7, #28]
		};
 8009fa2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009fa6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009faa:	ed97 7b06 	vldr	d7, [r7, #24]
 8009fae:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
				{0, sin(rotx), cos(rotx)}
 8009fb2:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8009fb6:	f000 fdd3 	bl	800ab60 <sin>
 8009fba:	eeb0 7a40 	vmov.f32	s14, s0
 8009fbe:	eef0 7a60 	vmov.f32	s15, s1
		};
 8009fc2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009fc6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009fca:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
				{0, sin(rotx), cos(rotx)}
 8009fce:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 8009fd2:	f000 fd29 	bl	800aa28 <cos>
 8009fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8009fda:	eef0 7a60 	vmov.f32	s15, s1
		};
 8009fde:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009fe2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8009fe6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		double Mroty[3][3] = {
 8009fea:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8009fee:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	2348      	movs	r3, #72	; 0x48
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	f001 ff5f 	bl	800bebc <memset>
 8009ffe:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a002:	f5a3 7106 	sub.w	r1, r3, #536	; 0x218
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	4b58      	ldr	r3, [pc, #352]	; (800a16c <_Z16ThreadOledUpdatePv+0x324>)
 800a00c:	e9c1 2308 	strd	r2, r3, [r1, #32]
				{cos(roty),  0    , sin(roty)},
 800a010:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a014:	f000 fd08 	bl	800aa28 <cos>
 800a018:	eeb0 7a40 	vmov.f32	s14, s0
 800a01c:	eef0 7a60 	vmov.f32	s15, s1
				{     0,     1,   	    0    },
				{-sin(roty), 0    , cos(roty)}

		};
 800a020:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a024:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a028:	ed83 7b00 	vstr	d7, [r3]
				{cos(roty),  0    , sin(roty)},
 800a02c:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a030:	f000 fd96 	bl	800ab60 <sin>
 800a034:	eeb0 7a40 	vmov.f32	s14, s0
 800a038:	eef0 7a60 	vmov.f32	s15, s1
		};
 800a03c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a040:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a044:	ed83 7b04 	vstr	d7, [r3, #16]
				{-sin(roty), 0    , cos(roty)}
 800a048:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a04c:	f000 fd88 	bl	800ab60 <sin>
 800a050:	ec53 2b10 	vmov	r2, r3, d0
 800a054:	613a      	str	r2, [r7, #16]
 800a056:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a05a:	617b      	str	r3, [r7, #20]
		};
 800a05c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a060:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a064:	ed97 7b04 	vldr	d7, [r7, #16]
 800a068:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
				{-sin(roty), 0    , cos(roty)}
 800a06c:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a070:	f000 fcda 	bl	800aa28 <cos>
 800a074:	eeb0 7a40 	vmov.f32	s14, s0
 800a078:	eef0 7a60 	vmov.f32	s15, s1
		};
 800a07c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a080:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800a084:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
		double Mrotz[3][3] = {
 800a088:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a08c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a090:	4618      	mov	r0, r3
 800a092:	2348      	movs	r3, #72	; 0x48
 800a094:	461a      	mov	r2, r3
 800a096:	2100      	movs	r1, #0
 800a098:	f001 ff10 	bl	800bebc <memset>
 800a09c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a0a0:	f5a3 71e8 	sub.w	r1, r3, #464	; 0x1d0
 800a0a4:	f04f 0200 	mov.w	r2, #0
 800a0a8:	4b30      	ldr	r3, [pc, #192]	; (800a16c <_Z16ThreadOledUpdatePv+0x324>)
 800a0aa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				{cos(rotz), -sin(rotz) ,    0   },
 800a0ae:	ed97 0b98 	vldr	d0, [r7, #608]	; 0x260
 800a0b2:	f000 fcb9 	bl	800aa28 <cos>
 800a0b6:	eeb0 7a40 	vmov.f32	s14, s0
 800a0ba:	eef0 7a60 	vmov.f32	s15, s1
				{sin(rotz), cos(rotz) ,   	0	},
				{	 0,     	0    ,  	1   }
		};
 800a0be:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a0c2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a0c6:	ed83 7b00 	vstr	d7, [r3]
				{cos(rotz), -sin(rotz) ,    0   },
 800a0ca:	ed97 0b98 	vldr	d0, [r7, #608]	; 0x260
 800a0ce:	f000 fd47 	bl	800ab60 <sin>
 800a0d2:	ec53 2b10 	vmov	r2, r3, d0
 800a0d6:	60ba      	str	r2, [r7, #8]
 800a0d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	60fb      	str	r3, [r7, #12]
		};
 800a0de:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a0e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a0e6:	ed97 7b02 	vldr	d7, [r7, #8]
 800a0ea:	ed83 7b02 	vstr	d7, [r3, #8]
				{sin(rotz), cos(rotz) ,   	0	},
 800a0ee:	ed97 0b98 	vldr	d0, [r7, #608]	; 0x260
 800a0f2:	f000 fd35 	bl	800ab60 <sin>
 800a0f6:	eeb0 7a40 	vmov.f32	s14, s0
 800a0fa:	eef0 7a60 	vmov.f32	s15, s1
		};
 800a0fe:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a102:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a106:	ed83 7b06 	vstr	d7, [r3, #24]
				{sin(rotz), cos(rotz) ,   	0	},
 800a10a:	ed97 0b98 	vldr	d0, [r7, #608]	; 0x260
 800a10e:	f000 fc8b 	bl	800aa28 <cos>
 800a112:	eeb0 7a40 	vmov.f32	s14, s0
 800a116:	eef0 7a60 	vmov.f32	s15, s1
		};
 800a11a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a11e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800a122:	ed83 7b08 	vstr	d7, [r3, #32]


		oled.setCursor(0, 25);
 800a126:	2219      	movs	r2, #25
 800a128:	2100      	movs	r1, #0
 800a12a:	480b      	ldr	r0, [pc, #44]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 800a12c:	f7ff fe2e 	bl	8009d8c <_ZN4U8G29setCursorEtt>
		oled.printf("&:%.2f",rotx);
 800a130:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 800a134:	490e      	ldr	r1, [pc, #56]	; (800a170 <_Z16ThreadOledUpdatePv+0x328>)
 800a136:	4808      	ldr	r0, [pc, #32]	; (800a158 <_Z16ThreadOledUpdatePv+0x310>)
 800a138:	f7f6 ffd4 	bl	80010e4 <_ZN5Print6printfEPKcz>


		for (int i=0;i<8;i++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800a142:	e017      	b.n	800a174 <_Z16ThreadOledUpdatePv+0x32c>
 800a144:	08010714 	.word	0x08010714
 800a148:	08010754 	.word	0x08010754
 800a14c:	c0800000 	.word	0xc0800000
 800a150:	42700000 	.word	0x42700000
 800a154:	20005150 	.word	0x20005150
 800a158:	20005268 	.word	0x20005268
 800a15c:	080107dc 	.word	0x080107dc
 800a160:	080106e8 	.word	0x080106e8
 800a164:	080106f4 	.word	0x080106f4
 800a168:	08010700 	.word	0x08010700
 800a16c:	3ff00000 	.word	0x3ff00000
 800a170:	0801070c 	.word	0x0801070c
 800a174:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a178:	2b07      	cmp	r3, #7
 800a17a:	f300 82b6 	bgt.w	800a6ea <_Z16ThreadOledUpdatePv+0x8a2>
			//rotacion en z// x - y
			//rotated_3dpoint[i][0] = origi_points[i][0]*cos(rotz) - origi_points[i][1]*sin(rotz);
			//rotated_3dpoint[i][1] = origi_points[i][0]*sin(rotz) + origi_points[i][1]*cos(rotz);
			//rotated_3dpoint[i][2] = origi_points[i][2]+ z_offset;

			rotated_3dpoint[i][0] = origi_points[i][0]*cos(roty) + origi_points[i][2]*sin(roty);
 800a17e:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a182:	4613      	mov	r3, r2
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a18e:	f107 0220 	add.w	r2, r7, #32
 800a192:	4413      	add	r3, r2
 800a194:	3bc8      	subs	r3, #200	; 0xc8
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7f6 f9dd 	bl	8000558 <__aeabi_f2d>
 800a19e:	4604      	mov	r4, r0
 800a1a0:	460d      	mov	r5, r1
 800a1a2:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a1a6:	f000 fc3f 	bl	800aa28 <cos>
 800a1aa:	ec53 2b10 	vmov	r2, r3, d0
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	f7f6 fa29 	bl	8000608 <__aeabi_dmul>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4690      	mov	r8, r2
 800a1bc:	4699      	mov	r9, r3
 800a1be:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	005b      	lsls	r3, r3, #1
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a1ce:	f107 0220 	add.w	r2, r7, #32
 800a1d2:	4413      	add	r3, r2
 800a1d4:	3bc0      	subs	r3, #192	; 0xc0
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7f6 f9bd 	bl	8000558 <__aeabi_f2d>
 800a1de:	4604      	mov	r4, r0
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	ed97 0b9c 	vldr	d0, [r7, #624]	; 0x270
 800a1e6:	f000 fcbb 	bl	800ab60 <sin>
 800a1ea:	ec53 2b10 	vmov	r2, r3, d0
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 fa09 	bl	8000608 <__aeabi_dmul>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	4649      	mov	r1, r9
 800a1fe:	f7f6 f84d 	bl	800029c <__adddf3>
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	4610      	mov	r0, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a20e:	f5a3 74c4 	sub.w	r4, r3, #392	; 0x188
 800a212:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a216:	4613      	mov	r3, r2
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	4413      	add	r3, r2
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	4423      	add	r3, r4
 800a220:	e9c3 0100 	strd	r0, r1, [r3]
			rotated_3dpoint[i][1] = origi_points[i][0]*((-cos(rotx+roty)+cos(rotx-roty))/2)+origi_points[i][1]*cos(rotx)+origi_points[i][2]*((-sin(rotx+roty)-sin(rotx-roty))/2);
 800a224:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a228:	4613      	mov	r3, r2
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a234:	f107 0220 	add.w	r2, r7, #32
 800a238:	4413      	add	r3, r2
 800a23a:	3bc8      	subs	r3, #200	; 0xc8
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f6 f98a 	bl	8000558 <__aeabi_f2d>
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a24c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a250:	f7f6 f822 	bl	8000298 <__aeabi_dsub>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	ec43 2b17 	vmov	d7, r2, r3
 800a25c:	eeb0 0a47 	vmov.f32	s0, s14
 800a260:	eef0 0a67 	vmov.f32	s1, s15
 800a264:	f000 fbe0 	bl	800aa28 <cos>
 800a268:	ec59 8b10 	vmov	r8, r9, d0
 800a26c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a270:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a274:	f7f6 f812 	bl	800029c <__adddf3>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	ec43 2b17 	vmov	d7, r2, r3
 800a280:	eeb0 0a47 	vmov.f32	s0, s14
 800a284:	eef0 0a67 	vmov.f32	s1, s15
 800a288:	f000 fbce 	bl	800aa28 <cos>
 800a28c:	ec53 2b10 	vmov	r2, r3, d0
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f800 	bl	8000298 <__aeabi_dsub>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4610      	mov	r0, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2a8:	f7f6 fad8 	bl	800085c <__aeabi_ddiv>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f7f6 f9a8 	bl	8000608 <__aeabi_dmul>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4690      	mov	r8, r2
 800a2be:	4699      	mov	r9, r3
 800a2c0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a2c4:	4613      	mov	r3, r2
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	4413      	add	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a2d0:	f107 0220 	add.w	r2, r7, #32
 800a2d4:	4413      	add	r3, r2
 800a2d6:	3bc4      	subs	r3, #196	; 0xc4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7f6 f93c 	bl	8000558 <__aeabi_f2d>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 800a2e8:	f000 fb9e 	bl	800aa28 <cos>
 800a2ec:	ec53 2b10 	vmov	r2, r3, d0
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 f988 	bl	8000608 <__aeabi_dmul>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	4649      	mov	r1, r9
 800a300:	f7f5 ffcc 	bl	800029c <__adddf3>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4690      	mov	r8, r2
 800a30a:	4699      	mov	r9, r3
 800a30c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a310:	4613      	mov	r3, r2
 800a312:	005b      	lsls	r3, r3, #1
 800a314:	4413      	add	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a31c:	f107 0220 	add.w	r2, r7, #32
 800a320:	4413      	add	r3, r2
 800a322:	3bc0      	subs	r3, #192	; 0xc0
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4618      	mov	r0, r3
 800a328:	f7f6 f916 	bl	8000558 <__aeabi_f2d>
 800a32c:	4604      	mov	r4, r0
 800a32e:	460d      	mov	r5, r1
 800a330:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a334:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a338:	f7f5 ffb0 	bl	800029c <__adddf3>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	ec43 2b17 	vmov	d7, r2, r3
 800a344:	eeb0 0a47 	vmov.f32	s0, s14
 800a348:	eef0 0a67 	vmov.f32	s1, s15
 800a34c:	f000 fc08 	bl	800ab60 <sin>
 800a350:	ec53 2b10 	vmov	r2, r3, d0
 800a354:	603a      	str	r2, [r7, #0]
 800a356:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a35a:	607b      	str	r3, [r7, #4]
 800a35c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a360:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a364:	f7f5 ff98 	bl	8000298 <__aeabi_dsub>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	ec43 2b17 	vmov	d7, r2, r3
 800a370:	eeb0 0a47 	vmov.f32	s0, s14
 800a374:	eef0 0a67 	vmov.f32	s1, s15
 800a378:	f000 fbf2 	bl	800ab60 <sin>
 800a37c:	ec53 2b10 	vmov	r2, r3, d0
 800a380:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a384:	f7f5 ff88 	bl	8000298 <__aeabi_dsub>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4610      	mov	r0, r2
 800a38e:	4619      	mov	r1, r3
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a398:	f7f6 fa60 	bl	800085c <__aeabi_ddiv>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f6 f930 	bl	8000608 <__aeabi_dmul>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	4649      	mov	r1, r9
 800a3b0:	f7f5 ff74 	bl	800029c <__adddf3>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a3c0:	f5a3 74c4 	sub.w	r4, r3, #392	; 0x188
 800a3c4:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	4413      	add	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4423      	add	r3, r4
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	e9c3 0100 	strd	r0, r1, [r3]
			rotated_3dpoint[i][2] = (origi_points[i][0]*((-sin(rotx+roty)+sin(rotx-roty))/2)+origi_points[i][1]*sin(rotx)+origi_points[i][2]*((cos(rotx+roty)+cos(rotx-roty))/2))+z_offset;
 800a3d8:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a3dc:	4613      	mov	r3, r2
 800a3de:	005b      	lsls	r3, r3, #1
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a3e8:	f107 0220 	add.w	r2, r7, #32
 800a3ec:	4413      	add	r3, r2
 800a3ee:	3bc8      	subs	r3, #200	; 0xc8
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7f6 f8b0 	bl	8000558 <__aeabi_f2d>
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a400:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a404:	f7f5 ff48 	bl	8000298 <__aeabi_dsub>
 800a408:	4602      	mov	r2, r0
 800a40a:	460b      	mov	r3, r1
 800a40c:	ec43 2b17 	vmov	d7, r2, r3
 800a410:	eeb0 0a47 	vmov.f32	s0, s14
 800a414:	eef0 0a67 	vmov.f32	s1, s15
 800a418:	f000 fba2 	bl	800ab60 <sin>
 800a41c:	ec59 8b10 	vmov	r8, r9, d0
 800a420:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a424:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a428:	f7f5 ff38 	bl	800029c <__adddf3>
 800a42c:	4602      	mov	r2, r0
 800a42e:	460b      	mov	r3, r1
 800a430:	ec43 2b17 	vmov	d7, r2, r3
 800a434:	eeb0 0a47 	vmov.f32	s0, s14
 800a438:	eef0 0a67 	vmov.f32	s1, s15
 800a43c:	f000 fb90 	bl	800ab60 <sin>
 800a440:	ec53 2b10 	vmov	r2, r3, d0
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f5 ff26 	bl	8000298 <__aeabi_dsub>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4610      	mov	r0, r2
 800a452:	4619      	mov	r1, r3
 800a454:	f04f 0200 	mov.w	r2, #0
 800a458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a45c:	f7f6 f9fe 	bl	800085c <__aeabi_ddiv>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4690      	mov	r8, r2
 800a472:	4699      	mov	r9, r3
 800a474:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a478:	4613      	mov	r3, r2
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a484:	f107 0220 	add.w	r2, r7, #32
 800a488:	4413      	add	r3, r2
 800a48a:	3bc4      	subs	r3, #196	; 0xc4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4618      	mov	r0, r3
 800a490:	f7f6 f862 	bl	8000558 <__aeabi_f2d>
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	ed97 0b9a 	vldr	d0, [r7, #616]	; 0x268
 800a49c:	f000 fb60 	bl	800ab60 <sin>
 800a4a0:	ec53 2b10 	vmov	r2, r3, d0
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f7f6 f8ae 	bl	8000608 <__aeabi_dmul>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4640      	mov	r0, r8
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	f7f5 fef2 	bl	800029c <__adddf3>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4690      	mov	r8, r2
 800a4be:	4699      	mov	r9, r3
 800a4c0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	005b      	lsls	r3, r3, #1
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a4d0:	f107 0220 	add.w	r2, r7, #32
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3bc0      	subs	r3, #192	; 0xc0
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7f6 f83c 	bl	8000558 <__aeabi_f2d>
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a4e8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a4ec:	f7f5 fed6 	bl	800029c <__adddf3>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	ec43 2b17 	vmov	d7, r2, r3
 800a4f8:	eeb0 0a47 	vmov.f32	s0, s14
 800a4fc:	eef0 0a67 	vmov.f32	s1, s15
 800a500:	f000 fa92 	bl	800aa28 <cos>
 800a504:	ec5b ab10 	vmov	sl, fp, d0
 800a508:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 800a50c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 800a510:	f7f5 fec2 	bl	8000298 <__aeabi_dsub>
 800a514:	4602      	mov	r2, r0
 800a516:	460b      	mov	r3, r1
 800a518:	ec43 2b17 	vmov	d7, r2, r3
 800a51c:	eeb0 0a47 	vmov.f32	s0, s14
 800a520:	eef0 0a67 	vmov.f32	s1, s15
 800a524:	f000 fa80 	bl	800aa28 <cos>
 800a528:	ec53 2b10 	vmov	r2, r3, d0
 800a52c:	4650      	mov	r0, sl
 800a52e:	4659      	mov	r1, fp
 800a530:	f7f5 feb4 	bl	800029c <__adddf3>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	4610      	mov	r0, r2
 800a53a:	4619      	mov	r1, r3
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a544:	f7f6 f98a 	bl	800085c <__aeabi_ddiv>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4620      	mov	r0, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f6 f85a 	bl	8000608 <__aeabi_dmul>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4640      	mov	r0, r8
 800a55a:	4649      	mov	r1, r9
 800a55c:	f7f5 fe9e 	bl	800029c <__adddf3>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4614      	mov	r4, r2
 800a566:	461d      	mov	r5, r3
 800a568:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 800a56c:	f7f5 fff4 	bl	8000558 <__aeabi_f2d>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4620      	mov	r0, r4
 800a576:	4629      	mov	r1, r5
 800a578:	f7f5 fe90 	bl	800029c <__adddf3>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4610      	mov	r0, r2
 800a582:	4619      	mov	r1, r3
 800a584:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a588:	f5a3 74c4 	sub.w	r4, r3, #392	; 0x188
 800a58c:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a590:	4613      	mov	r3, r2
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	4413      	add	r3, r2
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	4423      	add	r3, r4
 800a59a:	3310      	adds	r3, #16
 800a59c:	e9c3 0100 	strd	r0, r1, [r3]

			points[i][0]= round(80+rotated_3dpoint[i][0]/rotated_3dpoint[i][2]*cube_size);
 800a5a0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a5a4:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800a5a8:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	4413      	add	r3, r2
 800a5b2:	00db      	lsls	r3, r3, #3
 800a5b4:	440b      	add	r3, r1
 800a5b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5ba:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a5be:	f5a3 74c4 	sub.w	r4, r3, #392	; 0x188
 800a5c2:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	4413      	add	r3, r2
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	4423      	add	r3, r4
 800a5d0:	3310      	adds	r3, #16
 800a5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d6:	f7f6 f941 	bl	800085c <__aeabi_ddiv>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4614      	mov	r4, r2
 800a5e0:	461d      	mov	r5, r3
 800a5e2:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 800a5e6:	f7f5 ffb7 	bl	8000558 <__aeabi_f2d>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	f7f6 f809 	bl	8000608 <__aeabi_dmul>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	4ba2      	ldr	r3, [pc, #648]	; (800a88c <_Z16ThreadOledUpdatePv+0xa44>)
 800a604:	f7f5 fe4a 	bl	800029c <__adddf3>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	ec43 2b17 	vmov	d7, r2, r3
 800a610:	eeb0 0a47 	vmov.f32	s0, s14
 800a614:	eef0 0a67 	vmov.f32	s1, s15
 800a618:	f000 fa5a 	bl	800aad0 <round>
 800a61c:	ec53 2b10 	vmov	r2, r3, d0
 800a620:	4610      	mov	r0, r2
 800a622:	4619      	mov	r1, r3
 800a624:	f7f6 faa0 	bl	8000b68 <__aeabi_d2iz>
 800a628:	4602      	mov	r2, r0
 800a62a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a634:	f107 0120 	add.w	r1, r7, #32
 800a638:	440b      	add	r3, r1
 800a63a:	f843 2c68 	str.w	r2, [r3, #-104]
			points[i][1] = round(32+rotated_3dpoint[i][1]/rotated_3dpoint[i][2]*cube_size);
 800a63e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a642:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800a646:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a64a:	4613      	mov	r3, r2
 800a64c:	005b      	lsls	r3, r3, #1
 800a64e:	4413      	add	r3, r2
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	440b      	add	r3, r1
 800a654:	3308      	adds	r3, #8
 800a656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a65a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 800a65e:	f5a3 74c4 	sub.w	r4, r3, #392	; 0x188
 800a662:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a666:	4613      	mov	r3, r2
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	4413      	add	r3, r2
 800a66c:	00db      	lsls	r3, r3, #3
 800a66e:	4423      	add	r3, r4
 800a670:	3310      	adds	r3, #16
 800a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a676:	f7f6 f8f1 	bl	800085c <__aeabi_ddiv>
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4614      	mov	r4, r2
 800a680:	461d      	mov	r5, r3
 800a682:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 800a686:	f7f5 ff67 	bl	8000558 <__aeabi_f2d>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f5 ffb9 	bl	8000608 <__aeabi_dmul>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	4b7b      	ldr	r3, [pc, #492]	; (800a890 <_Z16ThreadOledUpdatePv+0xa48>)
 800a6a4:	f7f5 fdfa 	bl	800029c <__adddf3>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	ec43 2b17 	vmov	d7, r2, r3
 800a6b0:	eeb0 0a47 	vmov.f32	s0, s14
 800a6b4:	eef0 0a67 	vmov.f32	s1, s15
 800a6b8:	f000 fa0a 	bl	800aad0 <round>
 800a6bc:	ec53 2b10 	vmov	r2, r3, d0
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f7f6 fa50 	bl	8000b68 <__aeabi_d2iz>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800a6d4:	f107 0120 	add.w	r1, r7, #32
 800a6d8:	440b      	add	r3, r1
 800a6da:	f843 2c64 	str.w	r2, [r3, #-100]
		for (int i=0;i<8;i++)
 800a6de:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800a6e8:	e544      	b.n	800a174 <_Z16ThreadOledUpdatePv+0x32c>

		//oled.drawLine(58, 10, 102,10);
		//oled.drawLine(58,10,58,54);
		//oled.drawLine(102,10,102,54);
		//oled.drawLine(102,54,58,54);
		oled.drawLine(points[0][0], points[0][1], points[1][0], points[1][1]);
 800a6ea:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a6ee:	b299      	uxth	r1, r3
 800a6f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a6fa:	b298      	uxth	r0, r3
 800a6fc:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a700:	b29b      	uxth	r3, r3
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4603      	mov	r3, r0
 800a706:	4863      	ldr	r0, [pc, #396]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a708:	f7ff fa7a 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[1][0], points[1][1], points[2][0], points[2][1]);
 800a70c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a710:	b299      	uxth	r1, r3
 800a712:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a716:	b29a      	uxth	r2, r3
 800a718:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800a71c:	b298      	uxth	r0, r3
 800a71e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800a722:	b29b      	uxth	r3, r3
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	4603      	mov	r3, r0
 800a728:	485a      	ldr	r0, [pc, #360]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a72a:	f7ff fa69 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[2][0], points[2][1], points[3][0], points[3][1]);
 800a72e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800a732:	b299      	uxth	r1, r3
 800a734:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a73e:	b298      	uxth	r0, r3
 800a740:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800a744:	b29b      	uxth	r3, r3
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	4603      	mov	r3, r0
 800a74a:	4852      	ldr	r0, [pc, #328]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a74c:	f7ff fa58 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[3][0], points[3][1], points[0][0], points[0][1]);
 800a750:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a754:	b299      	uxth	r1, r3
 800a756:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a760:	b298      	uxth	r0, r3
 800a762:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a766:	b29b      	uxth	r3, r3
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	4603      	mov	r3, r0
 800a76c:	4849      	ldr	r0, [pc, #292]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a76e:	f7ff fa47 	bl	8009c00 <_ZN4U8G28drawLineEtttt>

		oled.drawLine(points[4][0], points[4][1], points[5][0], points[5][1]);
 800a772:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800a776:	b299      	uxth	r1, r3
 800a778:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a782:	b298      	uxth	r0, r3
 800a784:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a788:	b29b      	uxth	r3, r3
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	4603      	mov	r3, r0
 800a78e:	4841      	ldr	r0, [pc, #260]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a790:	f7ff fa36 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[5][0], points[5][1], points[6][0], points[6][1]);
 800a794:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a798:	b299      	uxth	r1, r3
 800a79a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a7a4:	b298      	uxth	r0, r3
 800a7a6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4838      	ldr	r0, [pc, #224]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a7b2:	f7ff fa25 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[6][0], points[6][1], points[7][0], points[7][1]);
 800a7b6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a7ba:	b299      	uxth	r1, r3
 800a7bc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800a7c6:	b298      	uxth	r0, r3
 800a7c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4830      	ldr	r0, [pc, #192]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a7d4:	f7ff fa14 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[7][0], points[7][1], points[4][0], points[4][1]);
 800a7d8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800a7dc:	b299      	uxth	r1, r3
 800a7de:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800a7e8:	b298      	uxth	r0, r3
 800a7ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	4827      	ldr	r0, [pc, #156]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a7f6:	f7ff fa03 	bl	8009c00 <_ZN4U8G28drawLineEtttt>

		oled.drawLine(points[0][0], points[0][1], points[4][0], points[4][1]);
 800a7fa:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800a7fe:	b299      	uxth	r1, r3
 800a800:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800a804:	b29a      	uxth	r2, r3
 800a806:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800a80a:	b298      	uxth	r0, r3
 800a80c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a810:	b29b      	uxth	r3, r3
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4603      	mov	r3, r0
 800a816:	481f      	ldr	r0, [pc, #124]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a818:	f7ff f9f2 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[1][0], points[1][1], points[5][0], points[5][1]);
 800a81c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800a820:	b299      	uxth	r1, r3
 800a822:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800a826:	b29a      	uxth	r2, r3
 800a828:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a82c:	b298      	uxth	r0, r3
 800a82e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800a832:	b29b      	uxth	r3, r3
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4603      	mov	r3, r0
 800a838:	4816      	ldr	r0, [pc, #88]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a83a:	f7ff f9e1 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[2][0], points[2][1], points[6][0], points[6][1]);
 800a83e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 800a842:	b299      	uxth	r1, r3
 800a844:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800a848:	b29a      	uxth	r2, r3
 800a84a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800a84e:	b298      	uxth	r0, r3
 800a850:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800a854:	b29b      	uxth	r3, r3
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	4603      	mov	r3, r0
 800a85a:	480e      	ldr	r0, [pc, #56]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a85c:	f7ff f9d0 	bl	8009c00 <_ZN4U8G28drawLineEtttt>
		oled.drawLine(points[3][0], points[3][1], points[7][0], points[7][1]);
 800a860:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a864:	b299      	uxth	r1, r3
 800a866:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800a870:	b298      	uxth	r0, r3
 800a872:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800a876:	b29b      	uxth	r3, r3
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	4603      	mov	r3, r0
 800a87c:	4805      	ldr	r0, [pc, #20]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a87e:	f7ff f9bf 	bl	8009c00 <_ZN4U8G28drawLineEtttt>


		oled.sendBuffer();
 800a882:	4804      	ldr	r0, [pc, #16]	; (800a894 <_Z16ThreadOledUpdatePv+0xa4c>)
 800a884:	f7ff f9a2 	bl	8009bcc <_ZN4U8G210sendBufferEv>
	}
 800a888:	f7ff bb04 	b.w	8009e94 <_Z16ThreadOledUpdatePv+0x4c>
 800a88c:	40540000 	.word	0x40540000
 800a890:	40400000 	.word	0x40400000
 800a894:	20005268 	.word	0x20005268

0800a898 <Main>:
}



void Main(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08a      	sub	sp, #40	; 0x28
 800a89c:	af00      	add	r7, sp, #0

    do
    {
        mpu6050.Init();
 800a89e:	481b      	ldr	r0, [pc, #108]	; (800a90c <Main+0x74>)
 800a8a0:	f7f8 fda2 	bl	80033e8 <_ZN7MPU60504InitEv>
        osDelay(100);
 800a8a4:	2064      	movs	r0, #100	; 0x64
 800a8a6:	f7fc fc6f 	bl	8007188 <osDelay>
    } while (!mpu6050.testConnection());
 800a8aa:	4818      	ldr	r0, [pc, #96]	; (800a90c <Main+0x74>)
 800a8ac:	f7f8 fdb8 	bl	8003420 <_ZN7MPU605014testConnectionEv>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f083 0301 	eor.w	r3, r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d000      	beq.n	800a8be <Main+0x26>
    do
 800a8bc:	e7ef      	b.n	800a89e <Main+0x6>
    mpu6050.InitFilter(200, 100, 50);
 800a8be:	ed9f 1a14 	vldr	s2, [pc, #80]	; 800a910 <Main+0x78>
 800a8c2:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a914 <Main+0x7c>
 800a8c6:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a918 <Main+0x80>
 800a8ca:	4810      	ldr	r0, [pc, #64]	; (800a90c <Main+0x74>)
 800a8cc:	f7f8 ffce 	bl	800386c <_ZN7MPU605010InitFilterEfff>
    oled.Init();
 800a8d0:	4812      	ldr	r0, [pc, #72]	; (800a91c <Main+0x84>)
 800a8d2:	f7ff f957 	bl	8009b84 <_ZN4U8G24InitEv>
		//oled.setCursor(0, 10);
		//oled.printf("GX: %.3f/ %.3f/ %.3f",mpu6050.data.gx,mpu6050.data.gy,mpu6050.data.gz);
		//oled.setCursor(0, 30);
		//oled.printf("GA: %.3f/%.3f/%.3f",mpu6050.data.ax,mpu6050.data.ay,mpu6050.data.az);
		//oled.sendBuffer();
    const osThreadAttr_t oledTask_attributes = {
 800a8d6:	1d3b      	adds	r3, r7, #4
 800a8d8:	2224      	movs	r2, #36	; 0x24
 800a8da:	2100      	movs	r1, #0
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f001 faed 	bl	800bebc <memset>
 800a8e2:	4b0f      	ldr	r3, [pc, #60]	; (800a920 <Main+0x88>)
 800a8e4:	607b      	str	r3, [r7, #4]
 800a8e6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a8ea:	61bb      	str	r3, [r7, #24]
 800a8ec:	2330      	movs	r3, #48	; 0x30
 800a8ee:	61fb      	str	r3, [r7, #28]
      .name = "oledTask",
      .stack_size = 2000,
      .priority = (osPriority_t) osPriorityRealtime,
    };
    oledTaskHandle = osThreadNew(ThreadOledUpdate, nullptr, &oledTask_attributes);
 800a8f0:	1d3b      	adds	r3, r7, #4
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	480b      	ldr	r0, [pc, #44]	; (800a924 <Main+0x8c>)
 800a8f8:	f7fc fbb4 	bl	8007064 <osThreadNew>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	4a0a      	ldr	r2, [pc, #40]	; (800a928 <Main+0x90>)
 800a900:	6013      	str	r3, [r2, #0]
}
 800a902:	bf00      	nop
 800a904:	3728      	adds	r7, #40	; 0x28
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	20005150 	.word	0x20005150
 800a910:	42480000 	.word	0x42480000
 800a914:	42c80000 	.word	0x42c80000
 800a918:	43480000 	.word	0x43480000
 800a91c:	20005268 	.word	0x20005268
 800a920:	080107b4 	.word	0x080107b4
 800a924:	08009e49 	.word	0x08009e49
 800a928:	2000530c 	.word	0x2000530c

0800a92c <_ZN7SSD1306D1Ev>:
class SSD1306 : public U8G2
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	4a05      	ldr	r2, [pc, #20]	; (800a94c <_ZN7SSD1306D1Ev+0x20>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fa3b 	bl	8009db8 <_ZN4U8G2D1Ev>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	08010be8 	.word	0x08010be8

0800a950 <_ZN7SSD1306D0Ev>:
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffe7 	bl	800a92c <_ZN7SSD1306D1Ev>
 800a95e:	21a4      	movs	r1, #164	; 0xa4
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f845 	bl	800a9f0 <_ZdlPvj>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_Z41__static_initialization_and_destruction_0ii>:
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d10e      	bne.n	800a99e <_Z41__static_initialization_and_destruction_0ii+0x2e>
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a986:	4293      	cmp	r3, r2
 800a988:	d109      	bne.n	800a99e <_Z41__static_initialization_and_destruction_0ii+0x2e>
MPU6050 mpu6050(&hi2c2);
 800a98a:	2268      	movs	r2, #104	; 0x68
 800a98c:	490b      	ldr	r1, [pc, #44]	; (800a9bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800a98e:	480c      	ldr	r0, [pc, #48]	; (800a9c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800a990:	f7f8 fd02 	bl	8003398 <_ZN7MPU6050C1EP17I2C_HandleTypeDefh>
SSD1306 oled(&hi2c1);
 800a994:	4a0b      	ldr	r2, [pc, #44]	; (800a9c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800a996:	490c      	ldr	r1, [pc, #48]	; (800a9c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800a998:	480c      	ldr	r0, [pc, #48]	; (800a9cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a99a:	f7ff fa2f 	bl	8009dfc <_ZN7SSD1306C1EP17I2C_HandleTypeDefPK14u8g2_cb_struct>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d107      	bne.n	800a9b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d102      	bne.n	800a9b4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800a9ae:	4807      	ldr	r0, [pc, #28]	; (800a9cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800a9b0:	f7ff ffbc 	bl	800a92c <_ZN7SSD1306D1Ev>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	2000069c 	.word	0x2000069c
 800a9c0:	20005150 	.word	0x20005150
 800a9c4:	08010b28 	.word	0x08010b28
 800a9c8:	20000648 	.word	0x20000648
 800a9cc:	20005268 	.word	0x20005268

0800a9d0 <_GLOBAL__sub_I_mpu6050>:
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f7ff ffc9 	bl	800a970 <_Z41__static_initialization_and_destruction_0ii>
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <_GLOBAL__sub_D_mpu6050>:
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	f7ff ffc1 	bl	800a970 <_Z41__static_initialization_and_destruction_0ii>
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <_ZdlPvj>:
 800a9f0:	f000 b803 	b.w	800a9fa <_ZdlPv>

0800a9f4 <__cxa_pure_virtual>:
 800a9f4:	b508      	push	{r3, lr}
 800a9f6:	f000 f80f 	bl	800aa18 <_ZSt9terminatev>

0800a9fa <_ZdlPv>:
 800a9fa:	f001 ba2f 	b.w	800be5c <free>

0800a9fe <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a9fe:	b508      	push	{r3, lr}
 800aa00:	4780      	blx	r0
 800aa02:	f001 f8f7 	bl	800bbf4 <abort>
	...

0800aa08 <_ZSt13get_terminatev>:
 800aa08:	4b02      	ldr	r3, [pc, #8]	; (800aa14 <_ZSt13get_terminatev+0xc>)
 800aa0a:	6818      	ldr	r0, [r3, #0]
 800aa0c:	f3bf 8f5b 	dmb	ish
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	20000014 	.word	0x20000014

0800aa18 <_ZSt9terminatev>:
 800aa18:	b508      	push	{r3, lr}
 800aa1a:	f7ff fff5 	bl	800aa08 <_ZSt13get_terminatev>
 800aa1e:	f7ff ffee 	bl	800a9fe <_ZN10__cxxabiv111__terminateEPFvvE>
 800aa22:	0000      	movs	r0, r0
 800aa24:	0000      	movs	r0, r0
	...

0800aa28 <cos>:
 800aa28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa2a:	ec53 2b10 	vmov	r2, r3, d0
 800aa2e:	4826      	ldr	r0, [pc, #152]	; (800aac8 <cos+0xa0>)
 800aa30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa34:	4281      	cmp	r1, r0
 800aa36:	dc06      	bgt.n	800aa46 <cos+0x1e>
 800aa38:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800aac0 <cos+0x98>
 800aa3c:	b005      	add	sp, #20
 800aa3e:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa42:	f000 baf1 	b.w	800b028 <__kernel_cos>
 800aa46:	4821      	ldr	r0, [pc, #132]	; (800aacc <cos+0xa4>)
 800aa48:	4281      	cmp	r1, r0
 800aa4a:	dd09      	ble.n	800aa60 <cos+0x38>
 800aa4c:	ee10 0a10 	vmov	r0, s0
 800aa50:	4619      	mov	r1, r3
 800aa52:	f7f5 fc21 	bl	8000298 <__aeabi_dsub>
 800aa56:	ec41 0b10 	vmov	d0, r0, r1
 800aa5a:	b005      	add	sp, #20
 800aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa60:	4668      	mov	r0, sp
 800aa62:	f000 f8d5 	bl	800ac10 <__ieee754_rem_pio2>
 800aa66:	f000 0003 	and.w	r0, r0, #3
 800aa6a:	2801      	cmp	r0, #1
 800aa6c:	d00b      	beq.n	800aa86 <cos+0x5e>
 800aa6e:	2802      	cmp	r0, #2
 800aa70:	d016      	beq.n	800aaa0 <cos+0x78>
 800aa72:	b9e0      	cbnz	r0, 800aaae <cos+0x86>
 800aa74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa78:	ed9d 0b00 	vldr	d0, [sp]
 800aa7c:	f000 fad4 	bl	800b028 <__kernel_cos>
 800aa80:	ec51 0b10 	vmov	r0, r1, d0
 800aa84:	e7e7      	b.n	800aa56 <cos+0x2e>
 800aa86:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aa8a:	ed9d 0b00 	vldr	d0, [sp]
 800aa8e:	f000 fee3 	bl	800b858 <__kernel_sin>
 800aa92:	ec53 2b10 	vmov	r2, r3, d0
 800aa96:	ee10 0a10 	vmov	r0, s0
 800aa9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa9e:	e7da      	b.n	800aa56 <cos+0x2e>
 800aaa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aaa4:	ed9d 0b00 	vldr	d0, [sp]
 800aaa8:	f000 fabe 	bl	800b028 <__kernel_cos>
 800aaac:	e7f1      	b.n	800aa92 <cos+0x6a>
 800aaae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800aab2:	ed9d 0b00 	vldr	d0, [sp]
 800aab6:	2001      	movs	r0, #1
 800aab8:	f000 fece 	bl	800b858 <__kernel_sin>
 800aabc:	e7e0      	b.n	800aa80 <cos+0x58>
 800aabe:	bf00      	nop
	...
 800aac8:	3fe921fb 	.word	0x3fe921fb
 800aacc:	7fefffff 	.word	0x7fefffff

0800aad0 <round>:
 800aad0:	ec51 0b10 	vmov	r0, r1, d0
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800aada:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800aade:	2c13      	cmp	r4, #19
 800aae0:	ee10 2a10 	vmov	r2, s0
 800aae4:	460b      	mov	r3, r1
 800aae6:	dc19      	bgt.n	800ab1c <round+0x4c>
 800aae8:	2c00      	cmp	r4, #0
 800aaea:	da09      	bge.n	800ab00 <round+0x30>
 800aaec:	3401      	adds	r4, #1
 800aaee:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800aaf2:	d103      	bne.n	800aafc <round+0x2c>
 800aaf4:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aaf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aafc:	2200      	movs	r2, #0
 800aafe:	e028      	b.n	800ab52 <round+0x82>
 800ab00:	4d15      	ldr	r5, [pc, #84]	; (800ab58 <round+0x88>)
 800ab02:	4125      	asrs	r5, r4
 800ab04:	ea01 0605 	and.w	r6, r1, r5
 800ab08:	4332      	orrs	r2, r6
 800ab0a:	d00e      	beq.n	800ab2a <round+0x5a>
 800ab0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ab10:	fa42 f404 	asr.w	r4, r2, r4
 800ab14:	4423      	add	r3, r4
 800ab16:	ea23 0305 	bic.w	r3, r3, r5
 800ab1a:	e7ef      	b.n	800aafc <round+0x2c>
 800ab1c:	2c33      	cmp	r4, #51	; 0x33
 800ab1e:	dd07      	ble.n	800ab30 <round+0x60>
 800ab20:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ab24:	d101      	bne.n	800ab2a <round+0x5a>
 800ab26:	f7f5 fbb9 	bl	800029c <__adddf3>
 800ab2a:	ec41 0b10 	vmov	d0, r0, r1
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800ab34:	f04f 35ff 	mov.w	r5, #4294967295
 800ab38:	40f5      	lsrs	r5, r6
 800ab3a:	4228      	tst	r0, r5
 800ab3c:	d0f5      	beq.n	800ab2a <round+0x5a>
 800ab3e:	2101      	movs	r1, #1
 800ab40:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ab44:	fa01 f404 	lsl.w	r4, r1, r4
 800ab48:	1912      	adds	r2, r2, r4
 800ab4a:	bf28      	it	cs
 800ab4c:	185b      	addcs	r3, r3, r1
 800ab4e:	ea22 0205 	bic.w	r2, r2, r5
 800ab52:	4619      	mov	r1, r3
 800ab54:	4610      	mov	r0, r2
 800ab56:	e7e8      	b.n	800ab2a <round+0x5a>
 800ab58:	000fffff 	.word	0x000fffff
 800ab5c:	00000000 	.word	0x00000000

0800ab60 <sin>:
 800ab60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab62:	ec53 2b10 	vmov	r2, r3, d0
 800ab66:	4828      	ldr	r0, [pc, #160]	; (800ac08 <sin+0xa8>)
 800ab68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ab6c:	4281      	cmp	r1, r0
 800ab6e:	dc07      	bgt.n	800ab80 <sin+0x20>
 800ab70:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800ac00 <sin+0xa0>
 800ab74:	2000      	movs	r0, #0
 800ab76:	b005      	add	sp, #20
 800ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7c:	f000 be6c 	b.w	800b858 <__kernel_sin>
 800ab80:	4822      	ldr	r0, [pc, #136]	; (800ac0c <sin+0xac>)
 800ab82:	4281      	cmp	r1, r0
 800ab84:	dd09      	ble.n	800ab9a <sin+0x3a>
 800ab86:	ee10 0a10 	vmov	r0, s0
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f7f5 fb84 	bl	8000298 <__aeabi_dsub>
 800ab90:	ec41 0b10 	vmov	d0, r0, r1
 800ab94:	b005      	add	sp, #20
 800ab96:	f85d fb04 	ldr.w	pc, [sp], #4
 800ab9a:	4668      	mov	r0, sp
 800ab9c:	f000 f838 	bl	800ac10 <__ieee754_rem_pio2>
 800aba0:	f000 0003 	and.w	r0, r0, #3
 800aba4:	2801      	cmp	r0, #1
 800aba6:	d00c      	beq.n	800abc2 <sin+0x62>
 800aba8:	2802      	cmp	r0, #2
 800abaa:	d011      	beq.n	800abd0 <sin+0x70>
 800abac:	b9f0      	cbnz	r0, 800abec <sin+0x8c>
 800abae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abb2:	ed9d 0b00 	vldr	d0, [sp]
 800abb6:	2001      	movs	r0, #1
 800abb8:	f000 fe4e 	bl	800b858 <__kernel_sin>
 800abbc:	ec51 0b10 	vmov	r0, r1, d0
 800abc0:	e7e6      	b.n	800ab90 <sin+0x30>
 800abc2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abc6:	ed9d 0b00 	vldr	d0, [sp]
 800abca:	f000 fa2d 	bl	800b028 <__kernel_cos>
 800abce:	e7f5      	b.n	800abbc <sin+0x5c>
 800abd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abd4:	ed9d 0b00 	vldr	d0, [sp]
 800abd8:	2001      	movs	r0, #1
 800abda:	f000 fe3d 	bl	800b858 <__kernel_sin>
 800abde:	ec53 2b10 	vmov	r2, r3, d0
 800abe2:	ee10 0a10 	vmov	r0, s0
 800abe6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800abea:	e7d1      	b.n	800ab90 <sin+0x30>
 800abec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800abf0:	ed9d 0b00 	vldr	d0, [sp]
 800abf4:	f000 fa18 	bl	800b028 <__kernel_cos>
 800abf8:	e7f1      	b.n	800abde <sin+0x7e>
 800abfa:	bf00      	nop
 800abfc:	f3af 8000 	nop.w
	...
 800ac08:	3fe921fb 	.word	0x3fe921fb
 800ac0c:	7fefffff 	.word	0x7fefffff

0800ac10 <__ieee754_rem_pio2>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	ed2d 8b02 	vpush	{d8}
 800ac18:	ec55 4b10 	vmov	r4, r5, d0
 800ac1c:	4bca      	ldr	r3, [pc, #808]	; (800af48 <__ieee754_rem_pio2+0x338>)
 800ac1e:	b08b      	sub	sp, #44	; 0x2c
 800ac20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ac24:	4598      	cmp	r8, r3
 800ac26:	4682      	mov	sl, r0
 800ac28:	9502      	str	r5, [sp, #8]
 800ac2a:	dc08      	bgt.n	800ac3e <__ieee754_rem_pio2+0x2e>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	2300      	movs	r3, #0
 800ac30:	ed80 0b00 	vstr	d0, [r0]
 800ac34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ac38:	f04f 0b00 	mov.w	fp, #0
 800ac3c:	e028      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ac3e:	4bc3      	ldr	r3, [pc, #780]	; (800af4c <__ieee754_rem_pio2+0x33c>)
 800ac40:	4598      	cmp	r8, r3
 800ac42:	dc78      	bgt.n	800ad36 <__ieee754_rem_pio2+0x126>
 800ac44:	9b02      	ldr	r3, [sp, #8]
 800ac46:	4ec2      	ldr	r6, [pc, #776]	; (800af50 <__ieee754_rem_pio2+0x340>)
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	ee10 0a10 	vmov	r0, s0
 800ac4e:	a3b0      	add	r3, pc, #704	; (adr r3, 800af10 <__ieee754_rem_pio2+0x300>)
 800ac50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac54:	4629      	mov	r1, r5
 800ac56:	dd39      	ble.n	800accc <__ieee754_rem_pio2+0xbc>
 800ac58:	f7f5 fb1e 	bl	8000298 <__aeabi_dsub>
 800ac5c:	45b0      	cmp	r8, r6
 800ac5e:	4604      	mov	r4, r0
 800ac60:	460d      	mov	r5, r1
 800ac62:	d01b      	beq.n	800ac9c <__ieee754_rem_pio2+0x8c>
 800ac64:	a3ac      	add	r3, pc, #688	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ac66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6a:	f7f5 fb15 	bl	8000298 <__aeabi_dsub>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	e9ca 2300 	strd	r2, r3, [sl]
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fb0d 	bl	8000298 <__aeabi_dsub>
 800ac7e:	a3a6      	add	r3, pc, #664	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fb08 	bl	8000298 <__aeabi_dsub>
 800ac88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac8c:	f04f 0b01 	mov.w	fp, #1
 800ac90:	4658      	mov	r0, fp
 800ac92:	b00b      	add	sp, #44	; 0x2c
 800ac94:	ecbd 8b02 	vpop	{d8}
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	a3a0      	add	r3, pc, #640	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	f7f5 faf9 	bl	8000298 <__aeabi_dsub>
 800aca6:	a3a0      	add	r3, pc, #640	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	4604      	mov	r4, r0
 800acae:	460d      	mov	r5, r1
 800acb0:	f7f5 faf2 	bl	8000298 <__aeabi_dsub>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	e9ca 2300 	strd	r2, r3, [sl]
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 faea 	bl	8000298 <__aeabi_dsub>
 800acc4:	a398      	add	r3, pc, #608	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800acc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acca:	e7db      	b.n	800ac84 <__ieee754_rem_pio2+0x74>
 800accc:	f7f5 fae6 	bl	800029c <__adddf3>
 800acd0:	45b0      	cmp	r8, r6
 800acd2:	4604      	mov	r4, r0
 800acd4:	460d      	mov	r5, r1
 800acd6:	d016      	beq.n	800ad06 <__ieee754_rem_pio2+0xf6>
 800acd8:	a38f      	add	r3, pc, #572	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 fadd 	bl	800029c <__adddf3>
 800ace2:	4602      	mov	r2, r0
 800ace4:	460b      	mov	r3, r1
 800ace6:	e9ca 2300 	strd	r2, r3, [sl]
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fad3 	bl	8000298 <__aeabi_dsub>
 800acf2:	a389      	add	r3, pc, #548	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800acf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf8:	f7f5 fad0 	bl	800029c <__adddf3>
 800acfc:	f04f 3bff 	mov.w	fp, #4294967295
 800ad00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ad04:	e7c4      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ad06:	a386      	add	r3, pc, #536	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fac6 	bl	800029c <__adddf3>
 800ad10:	a385      	add	r3, pc, #532	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ad12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	f7f5 fabf 	bl	800029c <__adddf3>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	e9ca 2300 	strd	r2, r3, [sl]
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 fab5 	bl	8000298 <__aeabi_dsub>
 800ad2e:	a37e      	add	r3, pc, #504	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	e7e0      	b.n	800acf8 <__ieee754_rem_pio2+0xe8>
 800ad36:	4b87      	ldr	r3, [pc, #540]	; (800af54 <__ieee754_rem_pio2+0x344>)
 800ad38:	4598      	cmp	r8, r3
 800ad3a:	f300 80d9 	bgt.w	800aef0 <__ieee754_rem_pio2+0x2e0>
 800ad3e:	f000 fe49 	bl	800b9d4 <fabs>
 800ad42:	ec55 4b10 	vmov	r4, r5, d0
 800ad46:	ee10 0a10 	vmov	r0, s0
 800ad4a:	a379      	add	r3, pc, #484	; (adr r3, 800af30 <__ieee754_rem_pio2+0x320>)
 800ad4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fc59 	bl	8000608 <__aeabi_dmul>
 800ad56:	4b80      	ldr	r3, [pc, #512]	; (800af58 <__ieee754_rem_pio2+0x348>)
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f7f5 fa9f 	bl	800029c <__adddf3>
 800ad5e:	f7f5 ff03 	bl	8000b68 <__aeabi_d2iz>
 800ad62:	4683      	mov	fp, r0
 800ad64:	f7f5 fbe6 	bl	8000534 <__aeabi_i2d>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	ec43 2b18 	vmov	d8, r2, r3
 800ad70:	a367      	add	r3, pc, #412	; (adr r3, 800af10 <__ieee754_rem_pio2+0x300>)
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	f7f5 fc47 	bl	8000608 <__aeabi_dmul>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4620      	mov	r0, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	f7f5 fa89 	bl	8000298 <__aeabi_dsub>
 800ad86:	a364      	add	r3, pc, #400	; (adr r3, 800af18 <__ieee754_rem_pio2+0x308>)
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	ec51 0b18 	vmov	r0, r1, d8
 800ad94:	f7f5 fc38 	bl	8000608 <__aeabi_dmul>
 800ad98:	f1bb 0f1f 	cmp.w	fp, #31
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	460d      	mov	r5, r1
 800ada0:	dc0d      	bgt.n	800adbe <__ieee754_rem_pio2+0x1ae>
 800ada2:	4b6e      	ldr	r3, [pc, #440]	; (800af5c <__ieee754_rem_pio2+0x34c>)
 800ada4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ada8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adac:	4543      	cmp	r3, r8
 800adae:	d006      	beq.n	800adbe <__ieee754_rem_pio2+0x1ae>
 800adb0:	4622      	mov	r2, r4
 800adb2:	462b      	mov	r3, r5
 800adb4:	4630      	mov	r0, r6
 800adb6:	4639      	mov	r1, r7
 800adb8:	f7f5 fa6e 	bl	8000298 <__aeabi_dsub>
 800adbc:	e00f      	b.n	800adde <__ieee754_rem_pio2+0x1ce>
 800adbe:	462b      	mov	r3, r5
 800adc0:	4622      	mov	r2, r4
 800adc2:	4630      	mov	r0, r6
 800adc4:	4639      	mov	r1, r7
 800adc6:	f7f5 fa67 	bl	8000298 <__aeabi_dsub>
 800adca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800adce:	9303      	str	r3, [sp, #12]
 800add0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800add4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800add8:	f1b8 0f10 	cmp.w	r8, #16
 800addc:	dc02      	bgt.n	800ade4 <__ieee754_rem_pio2+0x1d4>
 800adde:	e9ca 0100 	strd	r0, r1, [sl]
 800ade2:	e039      	b.n	800ae58 <__ieee754_rem_pio2+0x248>
 800ade4:	a34e      	add	r3, pc, #312	; (adr r3, 800af20 <__ieee754_rem_pio2+0x310>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	ec51 0b18 	vmov	r0, r1, d8
 800adee:	f7f5 fc0b 	bl	8000608 <__aeabi_dmul>
 800adf2:	4604      	mov	r4, r0
 800adf4:	460d      	mov	r5, r1
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	f7f5 fa4b 	bl	8000298 <__aeabi_dsub>
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4680      	mov	r8, r0
 800ae08:	4689      	mov	r9, r1
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	4639      	mov	r1, r7
 800ae0e:	f7f5 fa43 	bl	8000298 <__aeabi_dsub>
 800ae12:	4622      	mov	r2, r4
 800ae14:	462b      	mov	r3, r5
 800ae16:	f7f5 fa3f 	bl	8000298 <__aeabi_dsub>
 800ae1a:	a343      	add	r3, pc, #268	; (adr r3, 800af28 <__ieee754_rem_pio2+0x318>)
 800ae1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae20:	4604      	mov	r4, r0
 800ae22:	460d      	mov	r5, r1
 800ae24:	ec51 0b18 	vmov	r0, r1, d8
 800ae28:	f7f5 fbee 	bl	8000608 <__aeabi_dmul>
 800ae2c:	4622      	mov	r2, r4
 800ae2e:	462b      	mov	r3, r5
 800ae30:	f7f5 fa32 	bl	8000298 <__aeabi_dsub>
 800ae34:	4602      	mov	r2, r0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4604      	mov	r4, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	4640      	mov	r0, r8
 800ae3e:	4649      	mov	r1, r9
 800ae40:	f7f5 fa2a 	bl	8000298 <__aeabi_dsub>
 800ae44:	9a03      	ldr	r2, [sp, #12]
 800ae46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b31      	cmp	r3, #49	; 0x31
 800ae4e:	dc24      	bgt.n	800ae9a <__ieee754_rem_pio2+0x28a>
 800ae50:	e9ca 0100 	strd	r0, r1, [sl]
 800ae54:	4646      	mov	r6, r8
 800ae56:	464f      	mov	r7, r9
 800ae58:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	4642      	mov	r2, r8
 800ae60:	464b      	mov	r3, r9
 800ae62:	4639      	mov	r1, r7
 800ae64:	f7f5 fa18 	bl	8000298 <__aeabi_dsub>
 800ae68:	462b      	mov	r3, r5
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	f7f5 fa14 	bl	8000298 <__aeabi_dsub>
 800ae70:	9b02      	ldr	r3, [sp, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae78:	f6bf af0a 	bge.w	800ac90 <__ieee754_rem_pio2+0x80>
 800ae7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae80:	f8ca 3004 	str.w	r3, [sl, #4]
 800ae84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae88:	f8ca 8000 	str.w	r8, [sl]
 800ae8c:	f8ca 0008 	str.w	r0, [sl, #8]
 800ae90:	f8ca 300c 	str.w	r3, [sl, #12]
 800ae94:	f1cb 0b00 	rsb	fp, fp, #0
 800ae98:	e6fa      	b.n	800ac90 <__ieee754_rem_pio2+0x80>
 800ae9a:	a327      	add	r3, pc, #156	; (adr r3, 800af38 <__ieee754_rem_pio2+0x328>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	ec51 0b18 	vmov	r0, r1, d8
 800aea4:	f7f5 fbb0 	bl	8000608 <__aeabi_dmul>
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 f9f0 	bl	8000298 <__aeabi_dsub>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4606      	mov	r6, r0
 800aebe:	460f      	mov	r7, r1
 800aec0:	4640      	mov	r0, r8
 800aec2:	4649      	mov	r1, r9
 800aec4:	f7f5 f9e8 	bl	8000298 <__aeabi_dsub>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	f7f5 f9e4 	bl	8000298 <__aeabi_dsub>
 800aed0:	a31b      	add	r3, pc, #108	; (adr r3, 800af40 <__ieee754_rem_pio2+0x330>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	4604      	mov	r4, r0
 800aed8:	460d      	mov	r5, r1
 800aeda:	ec51 0b18 	vmov	r0, r1, d8
 800aede:	f7f5 fb93 	bl	8000608 <__aeabi_dmul>
 800aee2:	4622      	mov	r2, r4
 800aee4:	462b      	mov	r3, r5
 800aee6:	f7f5 f9d7 	bl	8000298 <__aeabi_dsub>
 800aeea:	4604      	mov	r4, r0
 800aeec:	460d      	mov	r5, r1
 800aeee:	e75f      	b.n	800adb0 <__ieee754_rem_pio2+0x1a0>
 800aef0:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <__ieee754_rem_pio2+0x350>)
 800aef2:	4598      	cmp	r8, r3
 800aef4:	dd36      	ble.n	800af64 <__ieee754_rem_pio2+0x354>
 800aef6:	ee10 2a10 	vmov	r2, s0
 800aefa:	462b      	mov	r3, r5
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	f7f5 f9ca 	bl	8000298 <__aeabi_dsub>
 800af04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af08:	e9ca 0100 	strd	r0, r1, [sl]
 800af0c:	e694      	b.n	800ac38 <__ieee754_rem_pio2+0x28>
 800af0e:	bf00      	nop
 800af10:	54400000 	.word	0x54400000
 800af14:	3ff921fb 	.word	0x3ff921fb
 800af18:	1a626331 	.word	0x1a626331
 800af1c:	3dd0b461 	.word	0x3dd0b461
 800af20:	1a600000 	.word	0x1a600000
 800af24:	3dd0b461 	.word	0x3dd0b461
 800af28:	2e037073 	.word	0x2e037073
 800af2c:	3ba3198a 	.word	0x3ba3198a
 800af30:	6dc9c883 	.word	0x6dc9c883
 800af34:	3fe45f30 	.word	0x3fe45f30
 800af38:	2e000000 	.word	0x2e000000
 800af3c:	3ba3198a 	.word	0x3ba3198a
 800af40:	252049c1 	.word	0x252049c1
 800af44:	397b839a 	.word	0x397b839a
 800af48:	3fe921fb 	.word	0x3fe921fb
 800af4c:	4002d97b 	.word	0x4002d97b
 800af50:	3ff921fb 	.word	0x3ff921fb
 800af54:	413921fb 	.word	0x413921fb
 800af58:	3fe00000 	.word	0x3fe00000
 800af5c:	08010c18 	.word	0x08010c18
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	ea4f 5428 	mov.w	r4, r8, asr #20
 800af68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800af6c:	ee10 0a10 	vmov	r0, s0
 800af70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800af74:	ee10 6a10 	vmov	r6, s0
 800af78:	460f      	mov	r7, r1
 800af7a:	f7f5 fdf5 	bl	8000b68 <__aeabi_d2iz>
 800af7e:	f7f5 fad9 	bl	8000534 <__aeabi_i2d>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af8e:	f7f5 f983 	bl	8000298 <__aeabi_dsub>
 800af92:	4b23      	ldr	r3, [pc, #140]	; (800b020 <__ieee754_rem_pio2+0x410>)
 800af94:	2200      	movs	r2, #0
 800af96:	f7f5 fb37 	bl	8000608 <__aeabi_dmul>
 800af9a:	460f      	mov	r7, r1
 800af9c:	4606      	mov	r6, r0
 800af9e:	f7f5 fde3 	bl	8000b68 <__aeabi_d2iz>
 800afa2:	f7f5 fac7 	bl	8000534 <__aeabi_i2d>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4630      	mov	r0, r6
 800afac:	4639      	mov	r1, r7
 800afae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800afb2:	f7f5 f971 	bl	8000298 <__aeabi_dsub>
 800afb6:	4b1a      	ldr	r3, [pc, #104]	; (800b020 <__ieee754_rem_pio2+0x410>)
 800afb8:	2200      	movs	r2, #0
 800afba:	f7f5 fb25 	bl	8000608 <__aeabi_dmul>
 800afbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afc2:	ad04      	add	r5, sp, #16
 800afc4:	f04f 0803 	mov.w	r8, #3
 800afc8:	46a9      	mov	r9, r5
 800afca:	2600      	movs	r6, #0
 800afcc:	2700      	movs	r7, #0
 800afce:	4632      	mov	r2, r6
 800afd0:	463b      	mov	r3, r7
 800afd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800afd6:	46c3      	mov	fp, r8
 800afd8:	3d08      	subs	r5, #8
 800afda:	f108 38ff 	add.w	r8, r8, #4294967295
 800afde:	f7f5 fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d1f3      	bne.n	800afce <__ieee754_rem_pio2+0x3be>
 800afe6:	4b0f      	ldr	r3, [pc, #60]	; (800b024 <__ieee754_rem_pio2+0x414>)
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	2302      	movs	r3, #2
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	4622      	mov	r2, r4
 800aff0:	465b      	mov	r3, fp
 800aff2:	4651      	mov	r1, sl
 800aff4:	4648      	mov	r0, r9
 800aff6:	f000 f8df 	bl	800b1b8 <__kernel_rem_pio2>
 800affa:	9b02      	ldr	r3, [sp, #8]
 800affc:	2b00      	cmp	r3, #0
 800affe:	4683      	mov	fp, r0
 800b000:	f6bf ae46 	bge.w	800ac90 <__ieee754_rem_pio2+0x80>
 800b004:	e9da 2100 	ldrd	r2, r1, [sl]
 800b008:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b00c:	e9ca 2300 	strd	r2, r3, [sl]
 800b010:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b018:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b01c:	e73a      	b.n	800ae94 <__ieee754_rem_pio2+0x284>
 800b01e:	bf00      	nop
 800b020:	41700000 	.word	0x41700000
 800b024:	08010c98 	.word	0x08010c98

0800b028 <__kernel_cos>:
 800b028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ec57 6b10 	vmov	r6, r7, d0
 800b030:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b034:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b038:	ed8d 1b00 	vstr	d1, [sp]
 800b03c:	da07      	bge.n	800b04e <__kernel_cos+0x26>
 800b03e:	ee10 0a10 	vmov	r0, s0
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 fd90 	bl	8000b68 <__aeabi_d2iz>
 800b048:	2800      	cmp	r0, #0
 800b04a:	f000 8088 	beq.w	800b15e <__kernel_cos+0x136>
 800b04e:	4632      	mov	r2, r6
 800b050:	463b      	mov	r3, r7
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 fad7 	bl	8000608 <__aeabi_dmul>
 800b05a:	4b51      	ldr	r3, [pc, #324]	; (800b1a0 <__kernel_cos+0x178>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
 800b062:	f7f5 fad1 	bl	8000608 <__aeabi_dmul>
 800b066:	a340      	add	r3, pc, #256	; (adr r3, 800b168 <__kernel_cos+0x140>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	4682      	mov	sl, r0
 800b06e:	468b      	mov	fp, r1
 800b070:	4620      	mov	r0, r4
 800b072:	4629      	mov	r1, r5
 800b074:	f7f5 fac8 	bl	8000608 <__aeabi_dmul>
 800b078:	a33d      	add	r3, pc, #244	; (adr r3, 800b170 <__kernel_cos+0x148>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 f90d 	bl	800029c <__adddf3>
 800b082:	4622      	mov	r2, r4
 800b084:	462b      	mov	r3, r5
 800b086:	f7f5 fabf 	bl	8000608 <__aeabi_dmul>
 800b08a:	a33b      	add	r3, pc, #236	; (adr r3, 800b178 <__kernel_cos+0x150>)
 800b08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b090:	f7f5 f902 	bl	8000298 <__aeabi_dsub>
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	f7f5 fab6 	bl	8000608 <__aeabi_dmul>
 800b09c:	a338      	add	r3, pc, #224	; (adr r3, 800b180 <__kernel_cos+0x158>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	f7f5 f8fb 	bl	800029c <__adddf3>
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	f7f5 faad 	bl	8000608 <__aeabi_dmul>
 800b0ae:	a336      	add	r3, pc, #216	; (adr r3, 800b188 <__kernel_cos+0x160>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 f8f0 	bl	8000298 <__aeabi_dsub>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	f7f5 faa4 	bl	8000608 <__aeabi_dmul>
 800b0c0:	a333      	add	r3, pc, #204	; (adr r3, 800b190 <__kernel_cos+0x168>)
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	f7f5 f8e9 	bl	800029c <__adddf3>
 800b0ca:	4622      	mov	r2, r4
 800b0cc:	462b      	mov	r3, r5
 800b0ce:	f7f5 fa9b 	bl	8000608 <__aeabi_dmul>
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	f7f5 fa97 	bl	8000608 <__aeabi_dmul>
 800b0da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0de:	4604      	mov	r4, r0
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 fa8f 	bl	8000608 <__aeabi_dmul>
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f7f5 f8d1 	bl	8000298 <__aeabi_dsub>
 800b0f6:	4b2b      	ldr	r3, [pc, #172]	; (800b1a4 <__kernel_cos+0x17c>)
 800b0f8:	4598      	cmp	r8, r3
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	dc10      	bgt.n	800b122 <__kernel_cos+0xfa>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	f7f5 f8c6 	bl	8000298 <__aeabi_dsub>
 800b10c:	460b      	mov	r3, r1
 800b10e:	4926      	ldr	r1, [pc, #152]	; (800b1a8 <__kernel_cos+0x180>)
 800b110:	4602      	mov	r2, r0
 800b112:	2000      	movs	r0, #0
 800b114:	f7f5 f8c0 	bl	8000298 <__aeabi_dsub>
 800b118:	ec41 0b10 	vmov	d0, r0, r1
 800b11c:	b003      	add	sp, #12
 800b11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b122:	4b22      	ldr	r3, [pc, #136]	; (800b1ac <__kernel_cos+0x184>)
 800b124:	4920      	ldr	r1, [pc, #128]	; (800b1a8 <__kernel_cos+0x180>)
 800b126:	4598      	cmp	r8, r3
 800b128:	bfcc      	ite	gt
 800b12a:	4d21      	ldrgt	r5, [pc, #132]	; (800b1b0 <__kernel_cos+0x188>)
 800b12c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b130:	2400      	movs	r4, #0
 800b132:	4622      	mov	r2, r4
 800b134:	462b      	mov	r3, r5
 800b136:	2000      	movs	r0, #0
 800b138:	f7f5 f8ae 	bl	8000298 <__aeabi_dsub>
 800b13c:	4622      	mov	r2, r4
 800b13e:	4680      	mov	r8, r0
 800b140:	4689      	mov	r9, r1
 800b142:	462b      	mov	r3, r5
 800b144:	4650      	mov	r0, sl
 800b146:	4659      	mov	r1, fp
 800b148:	f7f5 f8a6 	bl	8000298 <__aeabi_dsub>
 800b14c:	4632      	mov	r2, r6
 800b14e:	463b      	mov	r3, r7
 800b150:	f7f5 f8a2 	bl	8000298 <__aeabi_dsub>
 800b154:	4602      	mov	r2, r0
 800b156:	460b      	mov	r3, r1
 800b158:	4640      	mov	r0, r8
 800b15a:	4649      	mov	r1, r9
 800b15c:	e7da      	b.n	800b114 <__kernel_cos+0xec>
 800b15e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b198 <__kernel_cos+0x170>
 800b162:	e7db      	b.n	800b11c <__kernel_cos+0xf4>
 800b164:	f3af 8000 	nop.w
 800b168:	be8838d4 	.word	0xbe8838d4
 800b16c:	bda8fae9 	.word	0xbda8fae9
 800b170:	bdb4b1c4 	.word	0xbdb4b1c4
 800b174:	3e21ee9e 	.word	0x3e21ee9e
 800b178:	809c52ad 	.word	0x809c52ad
 800b17c:	3e927e4f 	.word	0x3e927e4f
 800b180:	19cb1590 	.word	0x19cb1590
 800b184:	3efa01a0 	.word	0x3efa01a0
 800b188:	16c15177 	.word	0x16c15177
 800b18c:	3f56c16c 	.word	0x3f56c16c
 800b190:	5555554c 	.word	0x5555554c
 800b194:	3fa55555 	.word	0x3fa55555
 800b198:	00000000 	.word	0x00000000
 800b19c:	3ff00000 	.word	0x3ff00000
 800b1a0:	3fe00000 	.word	0x3fe00000
 800b1a4:	3fd33332 	.word	0x3fd33332
 800b1a8:	3ff00000 	.word	0x3ff00000
 800b1ac:	3fe90000 	.word	0x3fe90000
 800b1b0:	3fd20000 	.word	0x3fd20000
 800b1b4:	00000000 	.word	0x00000000

0800b1b8 <__kernel_rem_pio2>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	ed2d 8b02 	vpush	{d8}
 800b1c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b1c4:	f112 0f14 	cmn.w	r2, #20
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	9101      	str	r1, [sp, #4]
 800b1cc:	4bc4      	ldr	r3, [pc, #784]	; (800b4e0 <__kernel_rem_pio2+0x328>)
 800b1ce:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b1d0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1d6:	9302      	str	r3, [sp, #8]
 800b1d8:	9b08      	ldr	r3, [sp, #32]
 800b1da:	f103 33ff 	add.w	r3, r3, #4294967295
 800b1de:	bfa8      	it	ge
 800b1e0:	1ed4      	subge	r4, r2, #3
 800b1e2:	9306      	str	r3, [sp, #24]
 800b1e4:	bfb2      	itee	lt
 800b1e6:	2400      	movlt	r4, #0
 800b1e8:	2318      	movge	r3, #24
 800b1ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800b1ee:	f06f 0317 	mvn.w	r3, #23
 800b1f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b1f6:	eb03 0a02 	add.w	sl, r3, r2
 800b1fa:	9b02      	ldr	r3, [sp, #8]
 800b1fc:	9a06      	ldr	r2, [sp, #24]
 800b1fe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b202:	eb03 0802 	add.w	r8, r3, r2
 800b206:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b208:	1aa7      	subs	r7, r4, r2
 800b20a:	ae22      	add	r6, sp, #136	; 0x88
 800b20c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b210:	2500      	movs	r5, #0
 800b212:	4545      	cmp	r5, r8
 800b214:	dd13      	ble.n	800b23e <__kernel_rem_pio2+0x86>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b21c:	aa22      	add	r2, sp, #136	; 0x88
 800b21e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b222:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	9b02      	ldr	r3, [sp, #8]
 800b22c:	4598      	cmp	r8, r3
 800b22e:	dc2f      	bgt.n	800b290 <__kernel_rem_pio2+0xd8>
 800b230:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b234:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b238:	462f      	mov	r7, r5
 800b23a:	2600      	movs	r6, #0
 800b23c:	e01b      	b.n	800b276 <__kernel_rem_pio2+0xbe>
 800b23e:	42ef      	cmn	r7, r5
 800b240:	d407      	bmi.n	800b252 <__kernel_rem_pio2+0x9a>
 800b242:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b246:	f7f5 f975 	bl	8000534 <__aeabi_i2d>
 800b24a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b24e:	3501      	adds	r5, #1
 800b250:	e7df      	b.n	800b212 <__kernel_rem_pio2+0x5a>
 800b252:	ec51 0b18 	vmov	r0, r1, d8
 800b256:	e7f8      	b.n	800b24a <__kernel_rem_pio2+0x92>
 800b258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b25c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b274:	3601      	adds	r6, #1
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	429e      	cmp	r6, r3
 800b27a:	f1a7 0708 	sub.w	r7, r7, #8
 800b27e:	ddeb      	ble.n	800b258 <__kernel_rem_pio2+0xa0>
 800b280:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b284:	f108 0801 	add.w	r8, r8, #1
 800b288:	ecab 7b02 	vstmia	fp!, {d7}
 800b28c:	3508      	adds	r5, #8
 800b28e:	e7cc      	b.n	800b22a <__kernel_rem_pio2+0x72>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	aa0e      	add	r2, sp, #56	; 0x38
 800b294:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b298:	930d      	str	r3, [sp, #52]	; 0x34
 800b29a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b29c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b2a0:	9c02      	ldr	r4, [sp, #8]
 800b2a2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2a4:	00e3      	lsls	r3, r4, #3
 800b2a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2a8:	ab9a      	add	r3, sp, #616	; 0x268
 800b2aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b2b2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b2b6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b2b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b2bc:	46c3      	mov	fp, r8
 800b2be:	46a1      	mov	r9, r4
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	f1a5 0508 	sub.w	r5, r5, #8
 800b2c8:	dc77      	bgt.n	800b3ba <__kernel_rem_pio2+0x202>
 800b2ca:	ec47 6b10 	vmov	d0, r6, r7
 800b2ce:	4650      	mov	r0, sl
 800b2d0:	f000 fc0a 	bl	800bae8 <scalbn>
 800b2d4:	ec57 6b10 	vmov	r6, r7, d0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b2de:	ee10 0a10 	vmov	r0, s0
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	f7f5 f990 	bl	8000608 <__aeabi_dmul>
 800b2e8:	ec41 0b10 	vmov	d0, r0, r1
 800b2ec:	f000 fb7c 	bl	800b9e8 <floor>
 800b2f0:	4b7c      	ldr	r3, [pc, #496]	; (800b4e4 <__kernel_rem_pio2+0x32c>)
 800b2f2:	ec51 0b10 	vmov	r0, r1, d0
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f7f5 f986 	bl	8000608 <__aeabi_dmul>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4630      	mov	r0, r6
 800b302:	4639      	mov	r1, r7
 800b304:	f7f4 ffc8 	bl	8000298 <__aeabi_dsub>
 800b308:	460f      	mov	r7, r1
 800b30a:	4606      	mov	r6, r0
 800b30c:	f7f5 fc2c 	bl	8000b68 <__aeabi_d2iz>
 800b310:	9004      	str	r0, [sp, #16]
 800b312:	f7f5 f90f 	bl	8000534 <__aeabi_i2d>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f4 ffbb 	bl	8000298 <__aeabi_dsub>
 800b322:	f1ba 0f00 	cmp.w	sl, #0
 800b326:	4606      	mov	r6, r0
 800b328:	460f      	mov	r7, r1
 800b32a:	dd6d      	ble.n	800b408 <__kernel_rem_pio2+0x250>
 800b32c:	1e62      	subs	r2, r4, #1
 800b32e:	ab0e      	add	r3, sp, #56	; 0x38
 800b330:	9d04      	ldr	r5, [sp, #16]
 800b332:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b336:	f1ca 0118 	rsb	r1, sl, #24
 800b33a:	fa40 f301 	asr.w	r3, r0, r1
 800b33e:	441d      	add	r5, r3
 800b340:	408b      	lsls	r3, r1
 800b342:	1ac0      	subs	r0, r0, r3
 800b344:	ab0e      	add	r3, sp, #56	; 0x38
 800b346:	9504      	str	r5, [sp, #16]
 800b348:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b34c:	f1ca 0317 	rsb	r3, sl, #23
 800b350:	fa40 fb03 	asr.w	fp, r0, r3
 800b354:	f1bb 0f00 	cmp.w	fp, #0
 800b358:	dd65      	ble.n	800b426 <__kernel_rem_pio2+0x26e>
 800b35a:	9b04      	ldr	r3, [sp, #16]
 800b35c:	2200      	movs	r2, #0
 800b35e:	3301      	adds	r3, #1
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	4615      	mov	r5, r2
 800b364:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b368:	4294      	cmp	r4, r2
 800b36a:	f300 809c 	bgt.w	800b4a6 <__kernel_rem_pio2+0x2ee>
 800b36e:	f1ba 0f00 	cmp.w	sl, #0
 800b372:	dd07      	ble.n	800b384 <__kernel_rem_pio2+0x1cc>
 800b374:	f1ba 0f01 	cmp.w	sl, #1
 800b378:	f000 80c0 	beq.w	800b4fc <__kernel_rem_pio2+0x344>
 800b37c:	f1ba 0f02 	cmp.w	sl, #2
 800b380:	f000 80c6 	beq.w	800b510 <__kernel_rem_pio2+0x358>
 800b384:	f1bb 0f02 	cmp.w	fp, #2
 800b388:	d14d      	bne.n	800b426 <__kernel_rem_pio2+0x26e>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	4956      	ldr	r1, [pc, #344]	; (800b4e8 <__kernel_rem_pio2+0x330>)
 800b390:	2000      	movs	r0, #0
 800b392:	f7f4 ff81 	bl	8000298 <__aeabi_dsub>
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	2d00      	cmp	r5, #0
 800b39c:	d043      	beq.n	800b426 <__kernel_rem_pio2+0x26e>
 800b39e:	4650      	mov	r0, sl
 800b3a0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b4d8 <__kernel_rem_pio2+0x320>
 800b3a4:	f000 fba0 	bl	800bae8 <scalbn>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	ec53 2b10 	vmov	r2, r3, d0
 800b3b0:	f7f4 ff72 	bl	8000298 <__aeabi_dsub>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	460f      	mov	r7, r1
 800b3b8:	e035      	b.n	800b426 <__kernel_rem_pio2+0x26e>
 800b3ba:	4b4c      	ldr	r3, [pc, #304]	; (800b4ec <__kernel_rem_pio2+0x334>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4630      	mov	r0, r6
 800b3c0:	4639      	mov	r1, r7
 800b3c2:	f7f5 f921 	bl	8000608 <__aeabi_dmul>
 800b3c6:	f7f5 fbcf 	bl	8000b68 <__aeabi_d2iz>
 800b3ca:	f7f5 f8b3 	bl	8000534 <__aeabi_i2d>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	ec43 2b18 	vmov	d8, r2, r3
 800b3d6:	4b46      	ldr	r3, [pc, #280]	; (800b4f0 <__kernel_rem_pio2+0x338>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f7f5 f915 	bl	8000608 <__aeabi_dmul>
 800b3de:	4602      	mov	r2, r0
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff57 	bl	8000298 <__aeabi_dsub>
 800b3ea:	f7f5 fbbd 	bl	8000b68 <__aeabi_d2iz>
 800b3ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3f2:	f84b 0b04 	str.w	r0, [fp], #4
 800b3f6:	ec51 0b18 	vmov	r0, r1, d8
 800b3fa:	f7f4 ff4f 	bl	800029c <__adddf3>
 800b3fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	e75b      	b.n	800b2c0 <__kernel_rem_pio2+0x108>
 800b408:	d106      	bne.n	800b418 <__kernel_rem_pio2+0x260>
 800b40a:	1e63      	subs	r3, r4, #1
 800b40c:	aa0e      	add	r2, sp, #56	; 0x38
 800b40e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b412:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b416:	e79d      	b.n	800b354 <__kernel_rem_pio2+0x19c>
 800b418:	4b36      	ldr	r3, [pc, #216]	; (800b4f4 <__kernel_rem_pio2+0x33c>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	f7f5 fb7a 	bl	8000b14 <__aeabi_dcmpge>
 800b420:	2800      	cmp	r0, #0
 800b422:	d13d      	bne.n	800b4a0 <__kernel_rem_pio2+0x2e8>
 800b424:	4683      	mov	fp, r0
 800b426:	2200      	movs	r2, #0
 800b428:	2300      	movs	r3, #0
 800b42a:	4630      	mov	r0, r6
 800b42c:	4639      	mov	r1, r7
 800b42e:	f7f5 fb53 	bl	8000ad8 <__aeabi_dcmpeq>
 800b432:	2800      	cmp	r0, #0
 800b434:	f000 80c0 	beq.w	800b5b8 <__kernel_rem_pio2+0x400>
 800b438:	1e65      	subs	r5, r4, #1
 800b43a:	462b      	mov	r3, r5
 800b43c:	2200      	movs	r2, #0
 800b43e:	9902      	ldr	r1, [sp, #8]
 800b440:	428b      	cmp	r3, r1
 800b442:	da6c      	bge.n	800b51e <__kernel_rem_pio2+0x366>
 800b444:	2a00      	cmp	r2, #0
 800b446:	f000 8089 	beq.w	800b55c <__kernel_rem_pio2+0x3a4>
 800b44a:	ab0e      	add	r3, sp, #56	; 0x38
 800b44c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b450:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 80ad 	beq.w	800b5b4 <__kernel_rem_pio2+0x3fc>
 800b45a:	4650      	mov	r0, sl
 800b45c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b4d8 <__kernel_rem_pio2+0x320>
 800b460:	f000 fb42 	bl	800bae8 <scalbn>
 800b464:	ab9a      	add	r3, sp, #616	; 0x268
 800b466:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b46a:	ec57 6b10 	vmov	r6, r7, d0
 800b46e:	00ec      	lsls	r4, r5, #3
 800b470:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b474:	46aa      	mov	sl, r5
 800b476:	f1ba 0f00 	cmp.w	sl, #0
 800b47a:	f280 80d6 	bge.w	800b62a <__kernel_rem_pio2+0x472>
 800b47e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b4d0 <__kernel_rem_pio2+0x318>
 800b482:	462e      	mov	r6, r5
 800b484:	2e00      	cmp	r6, #0
 800b486:	f2c0 8104 	blt.w	800b692 <__kernel_rem_pio2+0x4da>
 800b48a:	ab72      	add	r3, sp, #456	; 0x1c8
 800b48c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b490:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b4f8 <__kernel_rem_pio2+0x340>
 800b494:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b498:	f04f 0800 	mov.w	r8, #0
 800b49c:	1baf      	subs	r7, r5, r6
 800b49e:	e0ea      	b.n	800b676 <__kernel_rem_pio2+0x4be>
 800b4a0:	f04f 0b02 	mov.w	fp, #2
 800b4a4:	e759      	b.n	800b35a <__kernel_rem_pio2+0x1a2>
 800b4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b4aa:	b955      	cbnz	r5, 800b4c2 <__kernel_rem_pio2+0x30a>
 800b4ac:	b123      	cbz	r3, 800b4b8 <__kernel_rem_pio2+0x300>
 800b4ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b4b2:	f8c8 3000 	str.w	r3, [r8]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	3201      	adds	r2, #1
 800b4ba:	f108 0804 	add.w	r8, r8, #4
 800b4be:	461d      	mov	r5, r3
 800b4c0:	e752      	b.n	800b368 <__kernel_rem_pio2+0x1b0>
 800b4c2:	1acb      	subs	r3, r1, r3
 800b4c4:	f8c8 3000 	str.w	r3, [r8]
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	e7f5      	b.n	800b4b8 <__kernel_rem_pio2+0x300>
 800b4cc:	f3af 8000 	nop.w
	...
 800b4dc:	3ff00000 	.word	0x3ff00000
 800b4e0:	08010de0 	.word	0x08010de0
 800b4e4:	40200000 	.word	0x40200000
 800b4e8:	3ff00000 	.word	0x3ff00000
 800b4ec:	3e700000 	.word	0x3e700000
 800b4f0:	41700000 	.word	0x41700000
 800b4f4:	3fe00000 	.word	0x3fe00000
 800b4f8:	08010da0 	.word	0x08010da0
 800b4fc:	1e62      	subs	r2, r4, #1
 800b4fe:	ab0e      	add	r3, sp, #56	; 0x38
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b508:	a90e      	add	r1, sp, #56	; 0x38
 800b50a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b50e:	e739      	b.n	800b384 <__kernel_rem_pio2+0x1cc>
 800b510:	1e62      	subs	r2, r4, #1
 800b512:	ab0e      	add	r3, sp, #56	; 0x38
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b51c:	e7f4      	b.n	800b508 <__kernel_rem_pio2+0x350>
 800b51e:	a90e      	add	r1, sp, #56	; 0x38
 800b520:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b524:	3b01      	subs	r3, #1
 800b526:	430a      	orrs	r2, r1
 800b528:	e789      	b.n	800b43e <__kernel_rem_pio2+0x286>
 800b52a:	3301      	adds	r3, #1
 800b52c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b530:	2900      	cmp	r1, #0
 800b532:	d0fa      	beq.n	800b52a <__kernel_rem_pio2+0x372>
 800b534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b536:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b53a:	446a      	add	r2, sp
 800b53c:	3a98      	subs	r2, #152	; 0x98
 800b53e:	920a      	str	r2, [sp, #40]	; 0x28
 800b540:	9a08      	ldr	r2, [sp, #32]
 800b542:	18e3      	adds	r3, r4, r3
 800b544:	18a5      	adds	r5, r4, r2
 800b546:	aa22      	add	r2, sp, #136	; 0x88
 800b548:	f104 0801 	add.w	r8, r4, #1
 800b54c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b550:	9304      	str	r3, [sp, #16]
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	4543      	cmp	r3, r8
 800b556:	da04      	bge.n	800b562 <__kernel_rem_pio2+0x3aa>
 800b558:	461c      	mov	r4, r3
 800b55a:	e6a3      	b.n	800b2a4 <__kernel_rem_pio2+0xec>
 800b55c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b55e:	2301      	movs	r3, #1
 800b560:	e7e4      	b.n	800b52c <__kernel_rem_pio2+0x374>
 800b562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b564:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b568:	f7f4 ffe4 	bl	8000534 <__aeabi_i2d>
 800b56c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b572:	46ab      	mov	fp, r5
 800b574:	461c      	mov	r4, r3
 800b576:	f04f 0900 	mov.w	r9, #0
 800b57a:	2600      	movs	r6, #0
 800b57c:	2700      	movs	r7, #0
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	4599      	cmp	r9, r3
 800b582:	dd06      	ble.n	800b592 <__kernel_rem_pio2+0x3da>
 800b584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b586:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b58a:	f108 0801 	add.w	r8, r8, #1
 800b58e:	930a      	str	r3, [sp, #40]	; 0x28
 800b590:	e7df      	b.n	800b552 <__kernel_rem_pio2+0x39a>
 800b592:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b596:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b59a:	f7f5 f835 	bl	8000608 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 fe79 	bl	800029c <__adddf3>
 800b5aa:	f109 0901 	add.w	r9, r9, #1
 800b5ae:	4606      	mov	r6, r0
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	e7e4      	b.n	800b57e <__kernel_rem_pio2+0x3c6>
 800b5b4:	3d01      	subs	r5, #1
 800b5b6:	e748      	b.n	800b44a <__kernel_rem_pio2+0x292>
 800b5b8:	ec47 6b10 	vmov	d0, r6, r7
 800b5bc:	f1ca 0000 	rsb	r0, sl, #0
 800b5c0:	f000 fa92 	bl	800bae8 <scalbn>
 800b5c4:	ec57 6b10 	vmov	r6, r7, d0
 800b5c8:	4ba0      	ldr	r3, [pc, #640]	; (800b84c <__kernel_rem_pio2+0x694>)
 800b5ca:	ee10 0a10 	vmov	r0, s0
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	f7f5 fa9f 	bl	8000b14 <__aeabi_dcmpge>
 800b5d6:	b1f8      	cbz	r0, 800b618 <__kernel_rem_pio2+0x460>
 800b5d8:	4b9d      	ldr	r3, [pc, #628]	; (800b850 <__kernel_rem_pio2+0x698>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	4630      	mov	r0, r6
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f5 f812 	bl	8000608 <__aeabi_dmul>
 800b5e4:	f7f5 fac0 	bl	8000b68 <__aeabi_d2iz>
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	f7f4 ffa3 	bl	8000534 <__aeabi_i2d>
 800b5ee:	4b97      	ldr	r3, [pc, #604]	; (800b84c <__kernel_rem_pio2+0x694>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f7f5 f809 	bl	8000608 <__aeabi_dmul>
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7f4 fe4b 	bl	8000298 <__aeabi_dsub>
 800b602:	f7f5 fab1 	bl	8000b68 <__aeabi_d2iz>
 800b606:	1c65      	adds	r5, r4, #1
 800b608:	ab0e      	add	r3, sp, #56	; 0x38
 800b60a:	f10a 0a18 	add.w	sl, sl, #24
 800b60e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b612:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b616:	e720      	b.n	800b45a <__kernel_rem_pio2+0x2a2>
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 faa4 	bl	8000b68 <__aeabi_d2iz>
 800b620:	ab0e      	add	r3, sp, #56	; 0x38
 800b622:	4625      	mov	r5, r4
 800b624:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b628:	e717      	b.n	800b45a <__kernel_rem_pio2+0x2a2>
 800b62a:	ab0e      	add	r3, sp, #56	; 0x38
 800b62c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b630:	f7f4 ff80 	bl	8000534 <__aeabi_i2d>
 800b634:	4632      	mov	r2, r6
 800b636:	463b      	mov	r3, r7
 800b638:	f7f4 ffe6 	bl	8000608 <__aeabi_dmul>
 800b63c:	4b84      	ldr	r3, [pc, #528]	; (800b850 <__kernel_rem_pio2+0x698>)
 800b63e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b642:	2200      	movs	r2, #0
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ffde 	bl	8000608 <__aeabi_dmul>
 800b64c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	e70f      	b.n	800b476 <__kernel_rem_pio2+0x2be>
 800b656:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b65a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b65e:	f7f4 ffd3 	bl	8000608 <__aeabi_dmul>
 800b662:	4602      	mov	r2, r0
 800b664:	460b      	mov	r3, r1
 800b666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b66a:	f7f4 fe17 	bl	800029c <__adddf3>
 800b66e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b672:	f108 0801 	add.w	r8, r8, #1
 800b676:	9b02      	ldr	r3, [sp, #8]
 800b678:	4598      	cmp	r8, r3
 800b67a:	dc01      	bgt.n	800b680 <__kernel_rem_pio2+0x4c8>
 800b67c:	45b8      	cmp	r8, r7
 800b67e:	ddea      	ble.n	800b656 <__kernel_rem_pio2+0x49e>
 800b680:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b684:	ab4a      	add	r3, sp, #296	; 0x128
 800b686:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b68a:	ed87 7b00 	vstr	d7, [r7]
 800b68e:	3e01      	subs	r6, #1
 800b690:	e6f8      	b.n	800b484 <__kernel_rem_pio2+0x2cc>
 800b692:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b694:	2b02      	cmp	r3, #2
 800b696:	dc0b      	bgt.n	800b6b0 <__kernel_rem_pio2+0x4f8>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	dc35      	bgt.n	800b708 <__kernel_rem_pio2+0x550>
 800b69c:	d059      	beq.n	800b752 <__kernel_rem_pio2+0x59a>
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	f003 0007 	and.w	r0, r3, #7
 800b6a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b6a8:	ecbd 8b02 	vpop	{d8}
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d1f3      	bne.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b6b6:	ab4a      	add	r3, sp, #296	; 0x128
 800b6b8:	4423      	add	r3, r4
 800b6ba:	9306      	str	r3, [sp, #24]
 800b6bc:	461c      	mov	r4, r3
 800b6be:	469a      	mov	sl, r3
 800b6c0:	9502      	str	r5, [sp, #8]
 800b6c2:	9b02      	ldr	r3, [sp, #8]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1aa 0a08 	sub.w	sl, sl, #8
 800b6ca:	dc6b      	bgt.n	800b7a4 <__kernel_rem_pio2+0x5ec>
 800b6cc:	46aa      	mov	sl, r5
 800b6ce:	f1ba 0f01 	cmp.w	sl, #1
 800b6d2:	f1a4 0408 	sub.w	r4, r4, #8
 800b6d6:	f300 8085 	bgt.w	800b7e4 <__kernel_rem_pio2+0x62c>
 800b6da:	9c06      	ldr	r4, [sp, #24]
 800b6dc:	2000      	movs	r0, #0
 800b6de:	3408      	adds	r4, #8
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	2d01      	cmp	r5, #1
 800b6e4:	f300 809d 	bgt.w	800b822 <__kernel_rem_pio2+0x66a>
 800b6e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b6ec:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b6f0:	f1bb 0f00 	cmp.w	fp, #0
 800b6f4:	f040 809b 	bne.w	800b82e <__kernel_rem_pio2+0x676>
 800b6f8:	9b01      	ldr	r3, [sp, #4]
 800b6fa:	e9c3 5600 	strd	r5, r6, [r3]
 800b6fe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b702:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b706:	e7ca      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b708:	3408      	adds	r4, #8
 800b70a:	ab4a      	add	r3, sp, #296	; 0x128
 800b70c:	441c      	add	r4, r3
 800b70e:	462e      	mov	r6, r5
 800b710:	2000      	movs	r0, #0
 800b712:	2100      	movs	r1, #0
 800b714:	2e00      	cmp	r6, #0
 800b716:	da36      	bge.n	800b786 <__kernel_rem_pio2+0x5ce>
 800b718:	f1bb 0f00 	cmp.w	fp, #0
 800b71c:	d039      	beq.n	800b792 <__kernel_rem_pio2+0x5da>
 800b71e:	4602      	mov	r2, r0
 800b720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b724:	9c01      	ldr	r4, [sp, #4]
 800b726:	e9c4 2300 	strd	r2, r3, [r4]
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b732:	f7f4 fdb1 	bl	8000298 <__aeabi_dsub>
 800b736:	ae4c      	add	r6, sp, #304	; 0x130
 800b738:	2401      	movs	r4, #1
 800b73a:	42a5      	cmp	r5, r4
 800b73c:	da2c      	bge.n	800b798 <__kernel_rem_pio2+0x5e0>
 800b73e:	f1bb 0f00 	cmp.w	fp, #0
 800b742:	d002      	beq.n	800b74a <__kernel_rem_pio2+0x592>
 800b744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b748:	4619      	mov	r1, r3
 800b74a:	9b01      	ldr	r3, [sp, #4]
 800b74c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b750:	e7a5      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b752:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b756:	eb0d 0403 	add.w	r4, sp, r3
 800b75a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b75e:	2000      	movs	r0, #0
 800b760:	2100      	movs	r1, #0
 800b762:	2d00      	cmp	r5, #0
 800b764:	da09      	bge.n	800b77a <__kernel_rem_pio2+0x5c2>
 800b766:	f1bb 0f00 	cmp.w	fp, #0
 800b76a:	d002      	beq.n	800b772 <__kernel_rem_pio2+0x5ba>
 800b76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b770:	4619      	mov	r1, r3
 800b772:	9b01      	ldr	r3, [sp, #4]
 800b774:	e9c3 0100 	strd	r0, r1, [r3]
 800b778:	e791      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b77a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b77e:	f7f4 fd8d 	bl	800029c <__adddf3>
 800b782:	3d01      	subs	r5, #1
 800b784:	e7ed      	b.n	800b762 <__kernel_rem_pio2+0x5aa>
 800b786:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b78a:	f7f4 fd87 	bl	800029c <__adddf3>
 800b78e:	3e01      	subs	r6, #1
 800b790:	e7c0      	b.n	800b714 <__kernel_rem_pio2+0x55c>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	e7c5      	b.n	800b724 <__kernel_rem_pio2+0x56c>
 800b798:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b79c:	f7f4 fd7e 	bl	800029c <__adddf3>
 800b7a0:	3401      	adds	r4, #1
 800b7a2:	e7ca      	b.n	800b73a <__kernel_rem_pio2+0x582>
 800b7a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b7a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	9302      	str	r3, [sp, #8]
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f4 fd6f 	bl	800029c <__adddf3>
 800b7be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	4649      	mov	r1, r9
 800b7ca:	f7f4 fd65 	bl	8000298 <__aeabi_dsub>
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	463b      	mov	r3, r7
 800b7d2:	f7f4 fd63 	bl	800029c <__adddf3>
 800b7d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b7da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b7de:	ed8a 7b00 	vstr	d7, [sl]
 800b7e2:	e76e      	b.n	800b6c2 <__kernel_rem_pio2+0x50a>
 800b7e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b7e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4632      	mov	r2, r6
 800b7f0:	463b      	mov	r3, r7
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f7f4 fd52 	bl	800029c <__adddf3>
 800b7f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4640      	mov	r0, r8
 800b802:	4649      	mov	r1, r9
 800b804:	f7f4 fd48 	bl	8000298 <__aeabi_dsub>
 800b808:	4632      	mov	r2, r6
 800b80a:	463b      	mov	r3, r7
 800b80c:	f7f4 fd46 	bl	800029c <__adddf3>
 800b810:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b814:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b818:	ed84 7b00 	vstr	d7, [r4]
 800b81c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b820:	e755      	b.n	800b6ce <__kernel_rem_pio2+0x516>
 800b822:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b826:	f7f4 fd39 	bl	800029c <__adddf3>
 800b82a:	3d01      	subs	r5, #1
 800b82c:	e759      	b.n	800b6e2 <__kernel_rem_pio2+0x52a>
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	9a01      	ldr	r2, [sp, #4]
 800b832:	601d      	str	r5, [r3, #0]
 800b834:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b838:	605c      	str	r4, [r3, #4]
 800b83a:	609f      	str	r7, [r3, #8]
 800b83c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b840:	60d3      	str	r3, [r2, #12]
 800b842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b846:	6110      	str	r0, [r2, #16]
 800b848:	6153      	str	r3, [r2, #20]
 800b84a:	e728      	b.n	800b69e <__kernel_rem_pio2+0x4e6>
 800b84c:	41700000 	.word	0x41700000
 800b850:	3e700000 	.word	0x3e700000
 800b854:	00000000 	.word	0x00000000

0800b858 <__kernel_sin>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	ed2d 8b04 	vpush	{d8-d9}
 800b860:	eeb0 8a41 	vmov.f32	s16, s2
 800b864:	eef0 8a61 	vmov.f32	s17, s3
 800b868:	ec55 4b10 	vmov	r4, r5, d0
 800b86c:	b083      	sub	sp, #12
 800b86e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b872:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b876:	9001      	str	r0, [sp, #4]
 800b878:	da06      	bge.n	800b888 <__kernel_sin+0x30>
 800b87a:	ee10 0a10 	vmov	r0, s0
 800b87e:	4629      	mov	r1, r5
 800b880:	f7f5 f972 	bl	8000b68 <__aeabi_d2iz>
 800b884:	2800      	cmp	r0, #0
 800b886:	d051      	beq.n	800b92c <__kernel_sin+0xd4>
 800b888:	4622      	mov	r2, r4
 800b88a:	462b      	mov	r3, r5
 800b88c:	4620      	mov	r0, r4
 800b88e:	4629      	mov	r1, r5
 800b890:	f7f4 feba 	bl	8000608 <__aeabi_dmul>
 800b894:	4682      	mov	sl, r0
 800b896:	468b      	mov	fp, r1
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4620      	mov	r0, r4
 800b89e:	4629      	mov	r1, r5
 800b8a0:	f7f4 feb2 	bl	8000608 <__aeabi_dmul>
 800b8a4:	a341      	add	r3, pc, #260	; (adr r3, 800b9ac <__kernel_sin+0x154>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4689      	mov	r9, r1
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	f7f4 fea9 	bl	8000608 <__aeabi_dmul>
 800b8b6:	a33f      	add	r3, pc, #252	; (adr r3, 800b9b4 <__kernel_sin+0x15c>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7f4 fcec 	bl	8000298 <__aeabi_dsub>
 800b8c0:	4652      	mov	r2, sl
 800b8c2:	465b      	mov	r3, fp
 800b8c4:	f7f4 fea0 	bl	8000608 <__aeabi_dmul>
 800b8c8:	a33c      	add	r3, pc, #240	; (adr r3, 800b9bc <__kernel_sin+0x164>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	f7f4 fce5 	bl	800029c <__adddf3>
 800b8d2:	4652      	mov	r2, sl
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	f7f4 fe97 	bl	8000608 <__aeabi_dmul>
 800b8da:	a33a      	add	r3, pc, #232	; (adr r3, 800b9c4 <__kernel_sin+0x16c>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fcda 	bl	8000298 <__aeabi_dsub>
 800b8e4:	4652      	mov	r2, sl
 800b8e6:	465b      	mov	r3, fp
 800b8e8:	f7f4 fe8e 	bl	8000608 <__aeabi_dmul>
 800b8ec:	a337      	add	r3, pc, #220	; (adr r3, 800b9cc <__kernel_sin+0x174>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fcd3 	bl	800029c <__adddf3>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	b9eb      	cbnz	r3, 800b93a <__kernel_sin+0xe2>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	f7f4 fe7f 	bl	8000608 <__aeabi_dmul>
 800b90a:	a325      	add	r3, pc, #148	; (adr r3, 800b9a0 <__kernel_sin+0x148>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fcc2 	bl	8000298 <__aeabi_dsub>
 800b914:	4642      	mov	r2, r8
 800b916:	464b      	mov	r3, r9
 800b918:	f7f4 fe76 	bl	8000608 <__aeabi_dmul>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4620      	mov	r0, r4
 800b922:	4629      	mov	r1, r5
 800b924:	f7f4 fcba 	bl	800029c <__adddf3>
 800b928:	4604      	mov	r4, r0
 800b92a:	460d      	mov	r5, r1
 800b92c:	ec45 4b10 	vmov	d0, r4, r5
 800b930:	b003      	add	sp, #12
 800b932:	ecbd 8b04 	vpop	{d8-d9}
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	4b1b      	ldr	r3, [pc, #108]	; (800b9a8 <__kernel_sin+0x150>)
 800b93c:	ec51 0b18 	vmov	r0, r1, d8
 800b940:	2200      	movs	r2, #0
 800b942:	f7f4 fe61 	bl	8000608 <__aeabi_dmul>
 800b946:	4632      	mov	r2, r6
 800b948:	ec41 0b19 	vmov	d9, r0, r1
 800b94c:	463b      	mov	r3, r7
 800b94e:	4640      	mov	r0, r8
 800b950:	4649      	mov	r1, r9
 800b952:	f7f4 fe59 	bl	8000608 <__aeabi_dmul>
 800b956:	4602      	mov	r2, r0
 800b958:	460b      	mov	r3, r1
 800b95a:	ec51 0b19 	vmov	r0, r1, d9
 800b95e:	f7f4 fc9b 	bl	8000298 <__aeabi_dsub>
 800b962:	4652      	mov	r2, sl
 800b964:	465b      	mov	r3, fp
 800b966:	f7f4 fe4f 	bl	8000608 <__aeabi_dmul>
 800b96a:	ec53 2b18 	vmov	r2, r3, d8
 800b96e:	f7f4 fc93 	bl	8000298 <__aeabi_dsub>
 800b972:	a30b      	add	r3, pc, #44	; (adr r3, 800b9a0 <__kernel_sin+0x148>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	4640      	mov	r0, r8
 800b97e:	4649      	mov	r1, r9
 800b980:	f7f4 fe42 	bl	8000608 <__aeabi_dmul>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f4 fc86 	bl	800029c <__adddf3>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	4620      	mov	r0, r4
 800b996:	4629      	mov	r1, r5
 800b998:	f7f4 fc7e 	bl	8000298 <__aeabi_dsub>
 800b99c:	e7c4      	b.n	800b928 <__kernel_sin+0xd0>
 800b99e:	bf00      	nop
 800b9a0:	55555549 	.word	0x55555549
 800b9a4:	3fc55555 	.word	0x3fc55555
 800b9a8:	3fe00000 	.word	0x3fe00000
 800b9ac:	5acfd57c 	.word	0x5acfd57c
 800b9b0:	3de5d93a 	.word	0x3de5d93a
 800b9b4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b9b8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b9bc:	57b1fe7d 	.word	0x57b1fe7d
 800b9c0:	3ec71de3 	.word	0x3ec71de3
 800b9c4:	19c161d5 	.word	0x19c161d5
 800b9c8:	3f2a01a0 	.word	0x3f2a01a0
 800b9cc:	1110f8a6 	.word	0x1110f8a6
 800b9d0:	3f811111 	.word	0x3f811111

0800b9d4 <fabs>:
 800b9d4:	ec51 0b10 	vmov	r0, r1, d0
 800b9d8:	ee10 2a10 	vmov	r2, s0
 800b9dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9e0:	ec43 2b10 	vmov	d0, r2, r3
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <floor>:
 800b9e8:	ec51 0b10 	vmov	r0, r1, d0
 800b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b9f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b9f8:	2e13      	cmp	r6, #19
 800b9fa:	ee10 5a10 	vmov	r5, s0
 800b9fe:	ee10 8a10 	vmov	r8, s0
 800ba02:	460c      	mov	r4, r1
 800ba04:	dc32      	bgt.n	800ba6c <floor+0x84>
 800ba06:	2e00      	cmp	r6, #0
 800ba08:	da14      	bge.n	800ba34 <floor+0x4c>
 800ba0a:	a333      	add	r3, pc, #204	; (adr r3, 800bad8 <floor+0xf0>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f7f4 fc44 	bl	800029c <__adddf3>
 800ba14:	2200      	movs	r2, #0
 800ba16:	2300      	movs	r3, #0
 800ba18:	f7f5 f886 	bl	8000b28 <__aeabi_dcmpgt>
 800ba1c:	b138      	cbz	r0, 800ba2e <floor+0x46>
 800ba1e:	2c00      	cmp	r4, #0
 800ba20:	da57      	bge.n	800bad2 <floor+0xea>
 800ba22:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ba26:	431d      	orrs	r5, r3
 800ba28:	d001      	beq.n	800ba2e <floor+0x46>
 800ba2a:	4c2d      	ldr	r4, [pc, #180]	; (800bae0 <floor+0xf8>)
 800ba2c:	2500      	movs	r5, #0
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4628      	mov	r0, r5
 800ba32:	e025      	b.n	800ba80 <floor+0x98>
 800ba34:	4f2b      	ldr	r7, [pc, #172]	; (800bae4 <floor+0xfc>)
 800ba36:	4137      	asrs	r7, r6
 800ba38:	ea01 0307 	and.w	r3, r1, r7
 800ba3c:	4303      	orrs	r3, r0
 800ba3e:	d01f      	beq.n	800ba80 <floor+0x98>
 800ba40:	a325      	add	r3, pc, #148	; (adr r3, 800bad8 <floor+0xf0>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fc29 	bl	800029c <__adddf3>
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f7f5 f86b 	bl	8000b28 <__aeabi_dcmpgt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d0eb      	beq.n	800ba2e <floor+0x46>
 800ba56:	2c00      	cmp	r4, #0
 800ba58:	bfbe      	ittt	lt
 800ba5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba5e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba62:	19a4      	addlt	r4, r4, r6
 800ba64:	ea24 0407 	bic.w	r4, r4, r7
 800ba68:	2500      	movs	r5, #0
 800ba6a:	e7e0      	b.n	800ba2e <floor+0x46>
 800ba6c:	2e33      	cmp	r6, #51	; 0x33
 800ba6e:	dd0b      	ble.n	800ba88 <floor+0xa0>
 800ba70:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba74:	d104      	bne.n	800ba80 <floor+0x98>
 800ba76:	ee10 2a10 	vmov	r2, s0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	f7f4 fc0e 	bl	800029c <__adddf3>
 800ba80:	ec41 0b10 	vmov	d0, r0, r1
 800ba84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba88:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba90:	fa23 f707 	lsr.w	r7, r3, r7
 800ba94:	4207      	tst	r7, r0
 800ba96:	d0f3      	beq.n	800ba80 <floor+0x98>
 800ba98:	a30f      	add	r3, pc, #60	; (adr r3, 800bad8 <floor+0xf0>)
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f7f4 fbfd 	bl	800029c <__adddf3>
 800baa2:	2200      	movs	r2, #0
 800baa4:	2300      	movs	r3, #0
 800baa6:	f7f5 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 800baaa:	2800      	cmp	r0, #0
 800baac:	d0bf      	beq.n	800ba2e <floor+0x46>
 800baae:	2c00      	cmp	r4, #0
 800bab0:	da02      	bge.n	800bab8 <floor+0xd0>
 800bab2:	2e14      	cmp	r6, #20
 800bab4:	d103      	bne.n	800babe <floor+0xd6>
 800bab6:	3401      	adds	r4, #1
 800bab8:	ea25 0507 	bic.w	r5, r5, r7
 800babc:	e7b7      	b.n	800ba2e <floor+0x46>
 800babe:	2301      	movs	r3, #1
 800bac0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bac4:	fa03 f606 	lsl.w	r6, r3, r6
 800bac8:	4435      	add	r5, r6
 800baca:	4545      	cmp	r5, r8
 800bacc:	bf38      	it	cc
 800bace:	18e4      	addcc	r4, r4, r3
 800bad0:	e7f2      	b.n	800bab8 <floor+0xd0>
 800bad2:	2500      	movs	r5, #0
 800bad4:	462c      	mov	r4, r5
 800bad6:	e7aa      	b.n	800ba2e <floor+0x46>
 800bad8:	8800759c 	.word	0x8800759c
 800badc:	7e37e43c 	.word	0x7e37e43c
 800bae0:	bff00000 	.word	0xbff00000
 800bae4:	000fffff 	.word	0x000fffff

0800bae8 <scalbn>:
 800bae8:	b570      	push	{r4, r5, r6, lr}
 800baea:	ec55 4b10 	vmov	r4, r5, d0
 800baee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800baf2:	4606      	mov	r6, r0
 800baf4:	462b      	mov	r3, r5
 800baf6:	b99a      	cbnz	r2, 800bb20 <scalbn+0x38>
 800baf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bafc:	4323      	orrs	r3, r4
 800bafe:	d036      	beq.n	800bb6e <scalbn+0x86>
 800bb00:	4b39      	ldr	r3, [pc, #228]	; (800bbe8 <scalbn+0x100>)
 800bb02:	4629      	mov	r1, r5
 800bb04:	ee10 0a10 	vmov	r0, s0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f7f4 fd7d 	bl	8000608 <__aeabi_dmul>
 800bb0e:	4b37      	ldr	r3, [pc, #220]	; (800bbec <scalbn+0x104>)
 800bb10:	429e      	cmp	r6, r3
 800bb12:	4604      	mov	r4, r0
 800bb14:	460d      	mov	r5, r1
 800bb16:	da10      	bge.n	800bb3a <scalbn+0x52>
 800bb18:	a32b      	add	r3, pc, #172	; (adr r3, 800bbc8 <scalbn+0xe0>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	e03a      	b.n	800bb96 <scalbn+0xae>
 800bb20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bb24:	428a      	cmp	r2, r1
 800bb26:	d10c      	bne.n	800bb42 <scalbn+0x5a>
 800bb28:	ee10 2a10 	vmov	r2, s0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	4629      	mov	r1, r5
 800bb30:	f7f4 fbb4 	bl	800029c <__adddf3>
 800bb34:	4604      	mov	r4, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	e019      	b.n	800bb6e <scalbn+0x86>
 800bb3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bb3e:	460b      	mov	r3, r1
 800bb40:	3a36      	subs	r2, #54	; 0x36
 800bb42:	4432      	add	r2, r6
 800bb44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bb48:	428a      	cmp	r2, r1
 800bb4a:	dd08      	ble.n	800bb5e <scalbn+0x76>
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	a120      	add	r1, pc, #128	; (adr r1, 800bbd0 <scalbn+0xe8>)
 800bb50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb54:	da1c      	bge.n	800bb90 <scalbn+0xa8>
 800bb56:	a120      	add	r1, pc, #128	; (adr r1, 800bbd8 <scalbn+0xf0>)
 800bb58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb5c:	e018      	b.n	800bb90 <scalbn+0xa8>
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	dd08      	ble.n	800bb74 <scalbn+0x8c>
 800bb62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb6e:	ec45 4b10 	vmov	d0, r4, r5
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb78:	da19      	bge.n	800bbae <scalbn+0xc6>
 800bb7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb7e:	429e      	cmp	r6, r3
 800bb80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb84:	dd0a      	ble.n	800bb9c <scalbn+0xb4>
 800bb86:	a112      	add	r1, pc, #72	; (adr r1, 800bbd0 <scalbn+0xe8>)
 800bb88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1e2      	bne.n	800bb56 <scalbn+0x6e>
 800bb90:	a30f      	add	r3, pc, #60	; (adr r3, 800bbd0 <scalbn+0xe8>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	e7cb      	b.n	800bb34 <scalbn+0x4c>
 800bb9c:	a10a      	add	r1, pc, #40	; (adr r1, 800bbc8 <scalbn+0xe0>)
 800bb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d0b8      	beq.n	800bb18 <scalbn+0x30>
 800bba6:	a10e      	add	r1, pc, #56	; (adr r1, 800bbe0 <scalbn+0xf8>)
 800bba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbac:	e7b4      	b.n	800bb18 <scalbn+0x30>
 800bbae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bbb2:	3236      	adds	r2, #54	; 0x36
 800bbb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bbb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <scalbn+0x108>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	e7e8      	b.n	800bb96 <scalbn+0xae>
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	c2f8f359 	.word	0xc2f8f359
 800bbcc:	01a56e1f 	.word	0x01a56e1f
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	8800759c 	.word	0x8800759c
 800bbdc:	fe37e43c 	.word	0xfe37e43c
 800bbe0:	c2f8f359 	.word	0xc2f8f359
 800bbe4:	81a56e1f 	.word	0x81a56e1f
 800bbe8:	43500000 	.word	0x43500000
 800bbec:	ffff3cb0 	.word	0xffff3cb0
 800bbf0:	3c900000 	.word	0x3c900000

0800bbf4 <abort>:
 800bbf4:	b508      	push	{r3, lr}
 800bbf6:	2006      	movs	r0, #6
 800bbf8:	f001 f972 	bl	800cee0 <raise>
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	f7f8 fe71 	bl	80048e4 <_exit>
	...

0800bc04 <__errno>:
 800bc04:	4b01      	ldr	r3, [pc, #4]	; (800bc0c <__errno+0x8>)
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20000018 	.word	0x20000018

0800bc10 <std>:
 800bc10:	2300      	movs	r3, #0
 800bc12:	b510      	push	{r4, lr}
 800bc14:	4604      	mov	r4, r0
 800bc16:	e9c0 3300 	strd	r3, r3, [r0]
 800bc1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1e:	6083      	str	r3, [r0, #8]
 800bc20:	8181      	strh	r1, [r0, #12]
 800bc22:	6643      	str	r3, [r0, #100]	; 0x64
 800bc24:	81c2      	strh	r2, [r0, #14]
 800bc26:	6183      	str	r3, [r0, #24]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	305c      	adds	r0, #92	; 0x5c
 800bc2e:	f000 f945 	bl	800bebc <memset>
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <std+0x38>)
 800bc34:	6263      	str	r3, [r4, #36]	; 0x24
 800bc36:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <std+0x3c>)
 800bc38:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <std+0x40>)
 800bc3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <std+0x44>)
 800bc40:	6224      	str	r4, [r4, #32]
 800bc42:	6323      	str	r3, [r4, #48]	; 0x30
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	bf00      	nop
 800bc48:	0800cf59 	.word	0x0800cf59
 800bc4c:	0800cf7b 	.word	0x0800cf7b
 800bc50:	0800cfb3 	.word	0x0800cfb3
 800bc54:	0800cfd7 	.word	0x0800cfd7

0800bc58 <_cleanup_r>:
 800bc58:	4901      	ldr	r1, [pc, #4]	; (800bc60 <_cleanup_r+0x8>)
 800bc5a:	f000 b8af 	b.w	800bdbc <_fwalk_reent>
 800bc5e:	bf00      	nop
 800bc60:	0800ec19 	.word	0x0800ec19

0800bc64 <__sfmoreglue>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	2268      	movs	r2, #104	; 0x68
 800bc68:	1e4d      	subs	r5, r1, #1
 800bc6a:	4355      	muls	r5, r2
 800bc6c:	460e      	mov	r6, r1
 800bc6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc72:	f000 f997 	bl	800bfa4 <_malloc_r>
 800bc76:	4604      	mov	r4, r0
 800bc78:	b140      	cbz	r0, 800bc8c <__sfmoreglue+0x28>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc80:	300c      	adds	r0, #12
 800bc82:	60a0      	str	r0, [r4, #8]
 800bc84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc88:	f000 f918 	bl	800bebc <memset>
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}

0800bc90 <__sfp_lock_acquire>:
 800bc90:	4801      	ldr	r0, [pc, #4]	; (800bc98 <__sfp_lock_acquire+0x8>)
 800bc92:	f000 b8d8 	b.w	800be46 <__retarget_lock_acquire_recursive>
 800bc96:	bf00      	nop
 800bc98:	20005311 	.word	0x20005311

0800bc9c <__sfp_lock_release>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	; (800bca4 <__sfp_lock_release+0x8>)
 800bc9e:	f000 b8d3 	b.w	800be48 <__retarget_lock_release_recursive>
 800bca2:	bf00      	nop
 800bca4:	20005311 	.word	0x20005311

0800bca8 <__sinit_lock_acquire>:
 800bca8:	4801      	ldr	r0, [pc, #4]	; (800bcb0 <__sinit_lock_acquire+0x8>)
 800bcaa:	f000 b8cc 	b.w	800be46 <__retarget_lock_acquire_recursive>
 800bcae:	bf00      	nop
 800bcb0:	20005312 	.word	0x20005312

0800bcb4 <__sinit_lock_release>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <__sinit_lock_release+0x8>)
 800bcb6:	f000 b8c7 	b.w	800be48 <__retarget_lock_release_recursive>
 800bcba:	bf00      	nop
 800bcbc:	20005312 	.word	0x20005312

0800bcc0 <__sinit>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	f7ff fff0 	bl	800bca8 <__sinit_lock_acquire>
 800bcc8:	69a3      	ldr	r3, [r4, #24]
 800bcca:	b11b      	cbz	r3, 800bcd4 <__sinit+0x14>
 800bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd0:	f7ff bff0 	b.w	800bcb4 <__sinit_lock_release>
 800bcd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcd8:	6523      	str	r3, [r4, #80]	; 0x50
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <__sinit+0x68>)
 800bcdc:	4a13      	ldr	r2, [pc, #76]	; (800bd2c <__sinit+0x6c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	bf04      	itt	eq
 800bce6:	2301      	moveq	r3, #1
 800bce8:	61a3      	streq	r3, [r4, #24]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f820 	bl	800bd30 <__sfp>
 800bcf0:	6060      	str	r0, [r4, #4]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 f81c 	bl	800bd30 <__sfp>
 800bcf8:	60a0      	str	r0, [r4, #8]
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f818 	bl	800bd30 <__sfp>
 800bd00:	2200      	movs	r2, #0
 800bd02:	60e0      	str	r0, [r4, #12]
 800bd04:	2104      	movs	r1, #4
 800bd06:	6860      	ldr	r0, [r4, #4]
 800bd08:	f7ff ff82 	bl	800bc10 <std>
 800bd0c:	68a0      	ldr	r0, [r4, #8]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	2109      	movs	r1, #9
 800bd12:	f7ff ff7d 	bl	800bc10 <std>
 800bd16:	68e0      	ldr	r0, [r4, #12]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	2112      	movs	r1, #18
 800bd1c:	f7ff ff78 	bl	800bc10 <std>
 800bd20:	2301      	movs	r3, #1
 800bd22:	61a3      	str	r3, [r4, #24]
 800bd24:	e7d2      	b.n	800bccc <__sinit+0xc>
 800bd26:	bf00      	nop
 800bd28:	08010e50 	.word	0x08010e50
 800bd2c:	0800bc59 	.word	0x0800bc59

0800bd30 <__sfp>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	4607      	mov	r7, r0
 800bd34:	f7ff ffac 	bl	800bc90 <__sfp_lock_acquire>
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <__sfp+0x84>)
 800bd3a:	681e      	ldr	r6, [r3, #0]
 800bd3c:	69b3      	ldr	r3, [r6, #24]
 800bd3e:	b913      	cbnz	r3, 800bd46 <__sfp+0x16>
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff ffbd 	bl	800bcc0 <__sinit>
 800bd46:	3648      	adds	r6, #72	; 0x48
 800bd48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	d503      	bpl.n	800bd58 <__sfp+0x28>
 800bd50:	6833      	ldr	r3, [r6, #0]
 800bd52:	b30b      	cbz	r3, 800bd98 <__sfp+0x68>
 800bd54:	6836      	ldr	r6, [r6, #0]
 800bd56:	e7f7      	b.n	800bd48 <__sfp+0x18>
 800bd58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd5c:	b9d5      	cbnz	r5, 800bd94 <__sfp+0x64>
 800bd5e:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <__sfp+0x88>)
 800bd60:	60e3      	str	r3, [r4, #12]
 800bd62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd66:	6665      	str	r5, [r4, #100]	; 0x64
 800bd68:	f000 f86c 	bl	800be44 <__retarget_lock_init_recursive>
 800bd6c:	f7ff ff96 	bl	800bc9c <__sfp_lock_release>
 800bd70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd78:	6025      	str	r5, [r4, #0]
 800bd7a:	61a5      	str	r5, [r4, #24]
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd84:	f000 f89a 	bl	800bebc <memset>
 800bd88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd90:	4620      	mov	r0, r4
 800bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd94:	3468      	adds	r4, #104	; 0x68
 800bd96:	e7d9      	b.n	800bd4c <__sfp+0x1c>
 800bd98:	2104      	movs	r1, #4
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ff62 	bl	800bc64 <__sfmoreglue>
 800bda0:	4604      	mov	r4, r0
 800bda2:	6030      	str	r0, [r6, #0]
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1d5      	bne.n	800bd54 <__sfp+0x24>
 800bda8:	f7ff ff78 	bl	800bc9c <__sfp_lock_release>
 800bdac:	230c      	movs	r3, #12
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	e7ee      	b.n	800bd90 <__sfp+0x60>
 800bdb2:	bf00      	nop
 800bdb4:	08010e50 	.word	0x08010e50
 800bdb8:	ffff0001 	.word	0xffff0001

0800bdbc <_fwalk_reent>:
 800bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	4688      	mov	r8, r1
 800bdc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdc8:	2700      	movs	r7, #0
 800bdca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdce:	f1b9 0901 	subs.w	r9, r9, #1
 800bdd2:	d505      	bpl.n	800bde0 <_fwalk_reent+0x24>
 800bdd4:	6824      	ldr	r4, [r4, #0]
 800bdd6:	2c00      	cmp	r4, #0
 800bdd8:	d1f7      	bne.n	800bdca <_fwalk_reent+0xe>
 800bdda:	4638      	mov	r0, r7
 800bddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde0:	89ab      	ldrh	r3, [r5, #12]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d907      	bls.n	800bdf6 <_fwalk_reent+0x3a>
 800bde6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdea:	3301      	adds	r3, #1
 800bdec:	d003      	beq.n	800bdf6 <_fwalk_reent+0x3a>
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	47c0      	blx	r8
 800bdf4:	4307      	orrs	r7, r0
 800bdf6:	3568      	adds	r5, #104	; 0x68
 800bdf8:	e7e9      	b.n	800bdce <_fwalk_reent+0x12>
	...

0800bdfc <__libc_init_array>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	4d0d      	ldr	r5, [pc, #52]	; (800be34 <__libc_init_array+0x38>)
 800be00:	4c0d      	ldr	r4, [pc, #52]	; (800be38 <__libc_init_array+0x3c>)
 800be02:	1b64      	subs	r4, r4, r5
 800be04:	10a4      	asrs	r4, r4, #2
 800be06:	2600      	movs	r6, #0
 800be08:	42a6      	cmp	r6, r4
 800be0a:	d109      	bne.n	800be20 <__libc_init_array+0x24>
 800be0c:	4d0b      	ldr	r5, [pc, #44]	; (800be3c <__libc_init_array+0x40>)
 800be0e:	4c0c      	ldr	r4, [pc, #48]	; (800be40 <__libc_init_array+0x44>)
 800be10:	f004 fc46 	bl	80106a0 <_init>
 800be14:	1b64      	subs	r4, r4, r5
 800be16:	10a4      	asrs	r4, r4, #2
 800be18:	2600      	movs	r6, #0
 800be1a:	42a6      	cmp	r6, r4
 800be1c:	d105      	bne.n	800be2a <__libc_init_array+0x2e>
 800be1e:	bd70      	pop	{r4, r5, r6, pc}
 800be20:	f855 3b04 	ldr.w	r3, [r5], #4
 800be24:	4798      	blx	r3
 800be26:	3601      	adds	r6, #1
 800be28:	e7ee      	b.n	800be08 <__libc_init_array+0xc>
 800be2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2e:	4798      	blx	r3
 800be30:	3601      	adds	r6, #1
 800be32:	e7f2      	b.n	800be1a <__libc_init_array+0x1e>
 800be34:	0801129c 	.word	0x0801129c
 800be38:	0801129c 	.word	0x0801129c
 800be3c:	0801129c 	.word	0x0801129c
 800be40:	080112a8 	.word	0x080112a8

0800be44 <__retarget_lock_init_recursive>:
 800be44:	4770      	bx	lr

0800be46 <__retarget_lock_acquire_recursive>:
 800be46:	4770      	bx	lr

0800be48 <__retarget_lock_release_recursive>:
 800be48:	4770      	bx	lr
	...

0800be4c <malloc>:
 800be4c:	4b02      	ldr	r3, [pc, #8]	; (800be58 <malloc+0xc>)
 800be4e:	4601      	mov	r1, r0
 800be50:	6818      	ldr	r0, [r3, #0]
 800be52:	f000 b8a7 	b.w	800bfa4 <_malloc_r>
 800be56:	bf00      	nop
 800be58:	20000018 	.word	0x20000018

0800be5c <free>:
 800be5c:	4b02      	ldr	r3, [pc, #8]	; (800be68 <free+0xc>)
 800be5e:	4601      	mov	r1, r0
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	f000 b833 	b.w	800becc <_free_r>
 800be66:	bf00      	nop
 800be68:	20000018 	.word	0x20000018

0800be6c <memcpy>:
 800be6c:	440a      	add	r2, r1
 800be6e:	4291      	cmp	r1, r2
 800be70:	f100 33ff 	add.w	r3, r0, #4294967295
 800be74:	d100      	bne.n	800be78 <memcpy+0xc>
 800be76:	4770      	bx	lr
 800be78:	b510      	push	{r4, lr}
 800be7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be82:	4291      	cmp	r1, r2
 800be84:	d1f9      	bne.n	800be7a <memcpy+0xe>
 800be86:	bd10      	pop	{r4, pc}

0800be88 <memmove>:
 800be88:	4288      	cmp	r0, r1
 800be8a:	b510      	push	{r4, lr}
 800be8c:	eb01 0402 	add.w	r4, r1, r2
 800be90:	d902      	bls.n	800be98 <memmove+0x10>
 800be92:	4284      	cmp	r4, r0
 800be94:	4623      	mov	r3, r4
 800be96:	d807      	bhi.n	800bea8 <memmove+0x20>
 800be98:	1e43      	subs	r3, r0, #1
 800be9a:	42a1      	cmp	r1, r4
 800be9c:	d008      	beq.n	800beb0 <memmove+0x28>
 800be9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bea6:	e7f8      	b.n	800be9a <memmove+0x12>
 800bea8:	4402      	add	r2, r0
 800beaa:	4601      	mov	r1, r0
 800beac:	428a      	cmp	r2, r1
 800beae:	d100      	bne.n	800beb2 <memmove+0x2a>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beba:	e7f7      	b.n	800beac <memmove+0x24>

0800bebc <memset>:
 800bebc:	4402      	add	r2, r0
 800bebe:	4603      	mov	r3, r0
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d100      	bne.n	800bec6 <memset+0xa>
 800bec4:	4770      	bx	lr
 800bec6:	f803 1b01 	strb.w	r1, [r3], #1
 800beca:	e7f9      	b.n	800bec0 <memset+0x4>

0800becc <_free_r>:
 800becc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bece:	2900      	cmp	r1, #0
 800bed0:	d044      	beq.n	800bf5c <_free_r+0x90>
 800bed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bed6:	9001      	str	r0, [sp, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f1a1 0404 	sub.w	r4, r1, #4
 800bede:	bfb8      	it	lt
 800bee0:	18e4      	addlt	r4, r4, r3
 800bee2:	f003 fa6d 	bl	800f3c0 <__malloc_lock>
 800bee6:	4a1e      	ldr	r2, [pc, #120]	; (800bf60 <_free_r+0x94>)
 800bee8:	9801      	ldr	r0, [sp, #4]
 800beea:	6813      	ldr	r3, [r2, #0]
 800beec:	b933      	cbnz	r3, 800befc <_free_r+0x30>
 800beee:	6063      	str	r3, [r4, #4]
 800bef0:	6014      	str	r4, [r2, #0]
 800bef2:	b003      	add	sp, #12
 800bef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bef8:	f003 ba68 	b.w	800f3cc <__malloc_unlock>
 800befc:	42a3      	cmp	r3, r4
 800befe:	d908      	bls.n	800bf12 <_free_r+0x46>
 800bf00:	6825      	ldr	r5, [r4, #0]
 800bf02:	1961      	adds	r1, r4, r5
 800bf04:	428b      	cmp	r3, r1
 800bf06:	bf01      	itttt	eq
 800bf08:	6819      	ldreq	r1, [r3, #0]
 800bf0a:	685b      	ldreq	r3, [r3, #4]
 800bf0c:	1949      	addeq	r1, r1, r5
 800bf0e:	6021      	streq	r1, [r4, #0]
 800bf10:	e7ed      	b.n	800beee <_free_r+0x22>
 800bf12:	461a      	mov	r2, r3
 800bf14:	685b      	ldr	r3, [r3, #4]
 800bf16:	b10b      	cbz	r3, 800bf1c <_free_r+0x50>
 800bf18:	42a3      	cmp	r3, r4
 800bf1a:	d9fa      	bls.n	800bf12 <_free_r+0x46>
 800bf1c:	6811      	ldr	r1, [r2, #0]
 800bf1e:	1855      	adds	r5, r2, r1
 800bf20:	42a5      	cmp	r5, r4
 800bf22:	d10b      	bne.n	800bf3c <_free_r+0x70>
 800bf24:	6824      	ldr	r4, [r4, #0]
 800bf26:	4421      	add	r1, r4
 800bf28:	1854      	adds	r4, r2, r1
 800bf2a:	42a3      	cmp	r3, r4
 800bf2c:	6011      	str	r1, [r2, #0]
 800bf2e:	d1e0      	bne.n	800bef2 <_free_r+0x26>
 800bf30:	681c      	ldr	r4, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	6053      	str	r3, [r2, #4]
 800bf36:	4421      	add	r1, r4
 800bf38:	6011      	str	r1, [r2, #0]
 800bf3a:	e7da      	b.n	800bef2 <_free_r+0x26>
 800bf3c:	d902      	bls.n	800bf44 <_free_r+0x78>
 800bf3e:	230c      	movs	r3, #12
 800bf40:	6003      	str	r3, [r0, #0]
 800bf42:	e7d6      	b.n	800bef2 <_free_r+0x26>
 800bf44:	6825      	ldr	r5, [r4, #0]
 800bf46:	1961      	adds	r1, r4, r5
 800bf48:	428b      	cmp	r3, r1
 800bf4a:	bf04      	itt	eq
 800bf4c:	6819      	ldreq	r1, [r3, #0]
 800bf4e:	685b      	ldreq	r3, [r3, #4]
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	bf04      	itt	eq
 800bf54:	1949      	addeq	r1, r1, r5
 800bf56:	6021      	streq	r1, [r4, #0]
 800bf58:	6054      	str	r4, [r2, #4]
 800bf5a:	e7ca      	b.n	800bef2 <_free_r+0x26>
 800bf5c:	b003      	add	sp, #12
 800bf5e:	bd30      	pop	{r4, r5, pc}
 800bf60:	20005314 	.word	0x20005314

0800bf64 <sbrk_aligned>:
 800bf64:	b570      	push	{r4, r5, r6, lr}
 800bf66:	4e0e      	ldr	r6, [pc, #56]	; (800bfa0 <sbrk_aligned+0x3c>)
 800bf68:	460c      	mov	r4, r1
 800bf6a:	6831      	ldr	r1, [r6, #0]
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	b911      	cbnz	r1, 800bf76 <sbrk_aligned+0x12>
 800bf70:	f000 ff78 	bl	800ce64 <_sbrk_r>
 800bf74:	6030      	str	r0, [r6, #0]
 800bf76:	4621      	mov	r1, r4
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f000 ff73 	bl	800ce64 <_sbrk_r>
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	d00a      	beq.n	800bf98 <sbrk_aligned+0x34>
 800bf82:	1cc4      	adds	r4, r0, #3
 800bf84:	f024 0403 	bic.w	r4, r4, #3
 800bf88:	42a0      	cmp	r0, r4
 800bf8a:	d007      	beq.n	800bf9c <sbrk_aligned+0x38>
 800bf8c:	1a21      	subs	r1, r4, r0
 800bf8e:	4628      	mov	r0, r5
 800bf90:	f000 ff68 	bl	800ce64 <_sbrk_r>
 800bf94:	3001      	adds	r0, #1
 800bf96:	d101      	bne.n	800bf9c <sbrk_aligned+0x38>
 800bf98:	f04f 34ff 	mov.w	r4, #4294967295
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	bd70      	pop	{r4, r5, r6, pc}
 800bfa0:	20005318 	.word	0x20005318

0800bfa4 <_malloc_r>:
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	1ccd      	adds	r5, r1, #3
 800bfaa:	f025 0503 	bic.w	r5, r5, #3
 800bfae:	3508      	adds	r5, #8
 800bfb0:	2d0c      	cmp	r5, #12
 800bfb2:	bf38      	it	cc
 800bfb4:	250c      	movcc	r5, #12
 800bfb6:	2d00      	cmp	r5, #0
 800bfb8:	4607      	mov	r7, r0
 800bfba:	db01      	blt.n	800bfc0 <_malloc_r+0x1c>
 800bfbc:	42a9      	cmp	r1, r5
 800bfbe:	d905      	bls.n	800bfcc <_malloc_r+0x28>
 800bfc0:	230c      	movs	r3, #12
 800bfc2:	603b      	str	r3, [r7, #0]
 800bfc4:	2600      	movs	r6, #0
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfcc:	4e2e      	ldr	r6, [pc, #184]	; (800c088 <_malloc_r+0xe4>)
 800bfce:	f003 f9f7 	bl	800f3c0 <__malloc_lock>
 800bfd2:	6833      	ldr	r3, [r6, #0]
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	bb34      	cbnz	r4, 800c026 <_malloc_r+0x82>
 800bfd8:	4629      	mov	r1, r5
 800bfda:	4638      	mov	r0, r7
 800bfdc:	f7ff ffc2 	bl	800bf64 <sbrk_aligned>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	d14d      	bne.n	800c082 <_malloc_r+0xde>
 800bfe6:	6834      	ldr	r4, [r6, #0]
 800bfe8:	4626      	mov	r6, r4
 800bfea:	2e00      	cmp	r6, #0
 800bfec:	d140      	bne.n	800c070 <_malloc_r+0xcc>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	4631      	mov	r1, r6
 800bff2:	4638      	mov	r0, r7
 800bff4:	eb04 0803 	add.w	r8, r4, r3
 800bff8:	f000 ff34 	bl	800ce64 <_sbrk_r>
 800bffc:	4580      	cmp	r8, r0
 800bffe:	d13a      	bne.n	800c076 <_malloc_r+0xd2>
 800c000:	6821      	ldr	r1, [r4, #0]
 800c002:	3503      	adds	r5, #3
 800c004:	1a6d      	subs	r5, r5, r1
 800c006:	f025 0503 	bic.w	r5, r5, #3
 800c00a:	3508      	adds	r5, #8
 800c00c:	2d0c      	cmp	r5, #12
 800c00e:	bf38      	it	cc
 800c010:	250c      	movcc	r5, #12
 800c012:	4629      	mov	r1, r5
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff ffa5 	bl	800bf64 <sbrk_aligned>
 800c01a:	3001      	adds	r0, #1
 800c01c:	d02b      	beq.n	800c076 <_malloc_r+0xd2>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	442b      	add	r3, r5
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	e00e      	b.n	800c044 <_malloc_r+0xa0>
 800c026:	6822      	ldr	r2, [r4, #0]
 800c028:	1b52      	subs	r2, r2, r5
 800c02a:	d41e      	bmi.n	800c06a <_malloc_r+0xc6>
 800c02c:	2a0b      	cmp	r2, #11
 800c02e:	d916      	bls.n	800c05e <_malloc_r+0xba>
 800c030:	1961      	adds	r1, r4, r5
 800c032:	42a3      	cmp	r3, r4
 800c034:	6025      	str	r5, [r4, #0]
 800c036:	bf18      	it	ne
 800c038:	6059      	strne	r1, [r3, #4]
 800c03a:	6863      	ldr	r3, [r4, #4]
 800c03c:	bf08      	it	eq
 800c03e:	6031      	streq	r1, [r6, #0]
 800c040:	5162      	str	r2, [r4, r5]
 800c042:	604b      	str	r3, [r1, #4]
 800c044:	4638      	mov	r0, r7
 800c046:	f104 060b 	add.w	r6, r4, #11
 800c04a:	f003 f9bf 	bl	800f3cc <__malloc_unlock>
 800c04e:	f026 0607 	bic.w	r6, r6, #7
 800c052:	1d23      	adds	r3, r4, #4
 800c054:	1af2      	subs	r2, r6, r3
 800c056:	d0b6      	beq.n	800bfc6 <_malloc_r+0x22>
 800c058:	1b9b      	subs	r3, r3, r6
 800c05a:	50a3      	str	r3, [r4, r2]
 800c05c:	e7b3      	b.n	800bfc6 <_malloc_r+0x22>
 800c05e:	6862      	ldr	r2, [r4, #4]
 800c060:	42a3      	cmp	r3, r4
 800c062:	bf0c      	ite	eq
 800c064:	6032      	streq	r2, [r6, #0]
 800c066:	605a      	strne	r2, [r3, #4]
 800c068:	e7ec      	b.n	800c044 <_malloc_r+0xa0>
 800c06a:	4623      	mov	r3, r4
 800c06c:	6864      	ldr	r4, [r4, #4]
 800c06e:	e7b2      	b.n	800bfd6 <_malloc_r+0x32>
 800c070:	4634      	mov	r4, r6
 800c072:	6876      	ldr	r6, [r6, #4]
 800c074:	e7b9      	b.n	800bfea <_malloc_r+0x46>
 800c076:	230c      	movs	r3, #12
 800c078:	603b      	str	r3, [r7, #0]
 800c07a:	4638      	mov	r0, r7
 800c07c:	f003 f9a6 	bl	800f3cc <__malloc_unlock>
 800c080:	e7a1      	b.n	800bfc6 <_malloc_r+0x22>
 800c082:	6025      	str	r5, [r4, #0]
 800c084:	e7de      	b.n	800c044 <_malloc_r+0xa0>
 800c086:	bf00      	nop
 800c088:	20005314 	.word	0x20005314

0800c08c <__cvt>:
 800c08c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c090:	ec55 4b10 	vmov	r4, r5, d0
 800c094:	2d00      	cmp	r5, #0
 800c096:	460e      	mov	r6, r1
 800c098:	4619      	mov	r1, r3
 800c09a:	462b      	mov	r3, r5
 800c09c:	bfbb      	ittet	lt
 800c09e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c0a2:	461d      	movlt	r5, r3
 800c0a4:	2300      	movge	r3, #0
 800c0a6:	232d      	movlt	r3, #45	; 0x2d
 800c0a8:	700b      	strb	r3, [r1, #0]
 800c0aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0b0:	4691      	mov	r9, r2
 800c0b2:	f023 0820 	bic.w	r8, r3, #32
 800c0b6:	bfbc      	itt	lt
 800c0b8:	4622      	movlt	r2, r4
 800c0ba:	4614      	movlt	r4, r2
 800c0bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0c0:	d005      	beq.n	800c0ce <__cvt+0x42>
 800c0c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0c6:	d100      	bne.n	800c0ca <__cvt+0x3e>
 800c0c8:	3601      	adds	r6, #1
 800c0ca:	2102      	movs	r1, #2
 800c0cc:	e000      	b.n	800c0d0 <__cvt+0x44>
 800c0ce:	2103      	movs	r1, #3
 800c0d0:	ab03      	add	r3, sp, #12
 800c0d2:	9301      	str	r3, [sp, #4]
 800c0d4:	ab02      	add	r3, sp, #8
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	ec45 4b10 	vmov	d0, r4, r5
 800c0dc:	4653      	mov	r3, sl
 800c0de:	4632      	mov	r2, r6
 800c0e0:	f001 ff26 	bl	800df30 <_dtoa_r>
 800c0e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	d102      	bne.n	800c0f2 <__cvt+0x66>
 800c0ec:	f019 0f01 	tst.w	r9, #1
 800c0f0:	d022      	beq.n	800c138 <__cvt+0xac>
 800c0f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0f6:	eb07 0906 	add.w	r9, r7, r6
 800c0fa:	d110      	bne.n	800c11e <__cvt+0x92>
 800c0fc:	783b      	ldrb	r3, [r7, #0]
 800c0fe:	2b30      	cmp	r3, #48	; 0x30
 800c100:	d10a      	bne.n	800c118 <__cvt+0x8c>
 800c102:	2200      	movs	r2, #0
 800c104:	2300      	movs	r3, #0
 800c106:	4620      	mov	r0, r4
 800c108:	4629      	mov	r1, r5
 800c10a:	f7f4 fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c10e:	b918      	cbnz	r0, 800c118 <__cvt+0x8c>
 800c110:	f1c6 0601 	rsb	r6, r6, #1
 800c114:	f8ca 6000 	str.w	r6, [sl]
 800c118:	f8da 3000 	ldr.w	r3, [sl]
 800c11c:	4499      	add	r9, r3
 800c11e:	2200      	movs	r2, #0
 800c120:	2300      	movs	r3, #0
 800c122:	4620      	mov	r0, r4
 800c124:	4629      	mov	r1, r5
 800c126:	f7f4 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800c12a:	b108      	cbz	r0, 800c130 <__cvt+0xa4>
 800c12c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c130:	2230      	movs	r2, #48	; 0x30
 800c132:	9b03      	ldr	r3, [sp, #12]
 800c134:	454b      	cmp	r3, r9
 800c136:	d307      	bcc.n	800c148 <__cvt+0xbc>
 800c138:	9b03      	ldr	r3, [sp, #12]
 800c13a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c13c:	1bdb      	subs	r3, r3, r7
 800c13e:	4638      	mov	r0, r7
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	b004      	add	sp, #16
 800c144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c148:	1c59      	adds	r1, r3, #1
 800c14a:	9103      	str	r1, [sp, #12]
 800c14c:	701a      	strb	r2, [r3, #0]
 800c14e:	e7f0      	b.n	800c132 <__cvt+0xa6>

0800c150 <__exponent>:
 800c150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c152:	4603      	mov	r3, r0
 800c154:	2900      	cmp	r1, #0
 800c156:	bfb8      	it	lt
 800c158:	4249      	neglt	r1, r1
 800c15a:	f803 2b02 	strb.w	r2, [r3], #2
 800c15e:	bfb4      	ite	lt
 800c160:	222d      	movlt	r2, #45	; 0x2d
 800c162:	222b      	movge	r2, #43	; 0x2b
 800c164:	2909      	cmp	r1, #9
 800c166:	7042      	strb	r2, [r0, #1]
 800c168:	dd2a      	ble.n	800c1c0 <__exponent+0x70>
 800c16a:	f10d 0407 	add.w	r4, sp, #7
 800c16e:	46a4      	mov	ip, r4
 800c170:	270a      	movs	r7, #10
 800c172:	46a6      	mov	lr, r4
 800c174:	460a      	mov	r2, r1
 800c176:	fb91 f6f7 	sdiv	r6, r1, r7
 800c17a:	fb07 1516 	mls	r5, r7, r6, r1
 800c17e:	3530      	adds	r5, #48	; 0x30
 800c180:	2a63      	cmp	r2, #99	; 0x63
 800c182:	f104 34ff 	add.w	r4, r4, #4294967295
 800c186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c18a:	4631      	mov	r1, r6
 800c18c:	dcf1      	bgt.n	800c172 <__exponent+0x22>
 800c18e:	3130      	adds	r1, #48	; 0x30
 800c190:	f1ae 0502 	sub.w	r5, lr, #2
 800c194:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c198:	1c44      	adds	r4, r0, #1
 800c19a:	4629      	mov	r1, r5
 800c19c:	4561      	cmp	r1, ip
 800c19e:	d30a      	bcc.n	800c1b6 <__exponent+0x66>
 800c1a0:	f10d 0209 	add.w	r2, sp, #9
 800c1a4:	eba2 020e 	sub.w	r2, r2, lr
 800c1a8:	4565      	cmp	r5, ip
 800c1aa:	bf88      	it	hi
 800c1ac:	2200      	movhi	r2, #0
 800c1ae:	4413      	add	r3, r2
 800c1b0:	1a18      	subs	r0, r3, r0
 800c1b2:	b003      	add	sp, #12
 800c1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c1be:	e7ed      	b.n	800c19c <__exponent+0x4c>
 800c1c0:	2330      	movs	r3, #48	; 0x30
 800c1c2:	3130      	adds	r1, #48	; 0x30
 800c1c4:	7083      	strb	r3, [r0, #2]
 800c1c6:	70c1      	strb	r1, [r0, #3]
 800c1c8:	1d03      	adds	r3, r0, #4
 800c1ca:	e7f1      	b.n	800c1b0 <__exponent+0x60>

0800c1cc <_printf_float>:
 800c1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d0:	ed2d 8b02 	vpush	{d8}
 800c1d4:	b08d      	sub	sp, #52	; 0x34
 800c1d6:	460c      	mov	r4, r1
 800c1d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1dc:	4616      	mov	r6, r2
 800c1de:	461f      	mov	r7, r3
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	f003 f8c5 	bl	800f370 <_localeconv_r>
 800c1e6:	f8d0 a000 	ldr.w	sl, [r0]
 800c1ea:	4650      	mov	r0, sl
 800c1ec:	f7f3 fff8 	bl	80001e0 <strlen>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	9305      	str	r3, [sp, #20]
 800c1f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c1fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c200:	3307      	adds	r3, #7
 800c202:	f023 0307 	bic.w	r3, r3, #7
 800c206:	f103 0208 	add.w	r2, r3, #8
 800c20a:	f8c8 2000 	str.w	r2, [r8]
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c21a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	f8cd 8018 	str.w	r8, [sp, #24]
 800c224:	ee08 0a10 	vmov	s16, r0
 800c228:	4b9f      	ldr	r3, [pc, #636]	; (800c4a8 <_printf_float+0x2dc>)
 800c22a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c22e:	f04f 32ff 	mov.w	r2, #4294967295
 800c232:	f7f4 fc83 	bl	8000b3c <__aeabi_dcmpun>
 800c236:	bb88      	cbnz	r0, 800c29c <_printf_float+0xd0>
 800c238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c23c:	4b9a      	ldr	r3, [pc, #616]	; (800c4a8 <_printf_float+0x2dc>)
 800c23e:	f04f 32ff 	mov.w	r2, #4294967295
 800c242:	f7f4 fc5d 	bl	8000b00 <__aeabi_dcmple>
 800c246:	bb48      	cbnz	r0, 800c29c <_printf_float+0xd0>
 800c248:	2200      	movs	r2, #0
 800c24a:	2300      	movs	r3, #0
 800c24c:	4640      	mov	r0, r8
 800c24e:	4649      	mov	r1, r9
 800c250:	f7f4 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800c254:	b110      	cbz	r0, 800c25c <_printf_float+0x90>
 800c256:	232d      	movs	r3, #45	; 0x2d
 800c258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c25c:	4b93      	ldr	r3, [pc, #588]	; (800c4ac <_printf_float+0x2e0>)
 800c25e:	4894      	ldr	r0, [pc, #592]	; (800c4b0 <_printf_float+0x2e4>)
 800c260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c264:	bf94      	ite	ls
 800c266:	4698      	movls	r8, r3
 800c268:	4680      	movhi	r8, r0
 800c26a:	2303      	movs	r3, #3
 800c26c:	6123      	str	r3, [r4, #16]
 800c26e:	9b05      	ldr	r3, [sp, #20]
 800c270:	f023 0204 	bic.w	r2, r3, #4
 800c274:	6022      	str	r2, [r4, #0]
 800c276:	f04f 0900 	mov.w	r9, #0
 800c27a:	9700      	str	r7, [sp, #0]
 800c27c:	4633      	mov	r3, r6
 800c27e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c280:	4621      	mov	r1, r4
 800c282:	4628      	mov	r0, r5
 800c284:	f000 f9d8 	bl	800c638 <_printf_common>
 800c288:	3001      	adds	r0, #1
 800c28a:	f040 8090 	bne.w	800c3ae <_printf_float+0x1e2>
 800c28e:	f04f 30ff 	mov.w	r0, #4294967295
 800c292:	b00d      	add	sp, #52	; 0x34
 800c294:	ecbd 8b02 	vpop	{d8}
 800c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	4640      	mov	r0, r8
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	f7f4 fc4a 	bl	8000b3c <__aeabi_dcmpun>
 800c2a8:	b140      	cbz	r0, 800c2bc <_printf_float+0xf0>
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	bfbc      	itt	lt
 800c2b0:	232d      	movlt	r3, #45	; 0x2d
 800c2b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c2b6:	487f      	ldr	r0, [pc, #508]	; (800c4b4 <_printf_float+0x2e8>)
 800c2b8:	4b7f      	ldr	r3, [pc, #508]	; (800c4b8 <_printf_float+0x2ec>)
 800c2ba:	e7d1      	b.n	800c260 <_printf_float+0x94>
 800c2bc:	6863      	ldr	r3, [r4, #4]
 800c2be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2c2:	9206      	str	r2, [sp, #24]
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	d13f      	bne.n	800c348 <_printf_float+0x17c>
 800c2c8:	2306      	movs	r3, #6
 800c2ca:	6063      	str	r3, [r4, #4]
 800c2cc:	9b05      	ldr	r3, [sp, #20]
 800c2ce:	6861      	ldr	r1, [r4, #4]
 800c2d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	ab0a      	add	r3, sp, #40	; 0x28
 800c2da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2de:	ab09      	add	r3, sp, #36	; 0x24
 800c2e0:	ec49 8b10 	vmov	d0, r8, r9
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	6022      	str	r2, [r4, #0]
 800c2e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	f7ff fecd 	bl	800c08c <__cvt>
 800c2f2:	9b06      	ldr	r3, [sp, #24]
 800c2f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2f6:	2b47      	cmp	r3, #71	; 0x47
 800c2f8:	4680      	mov	r8, r0
 800c2fa:	d108      	bne.n	800c30e <_printf_float+0x142>
 800c2fc:	1cc8      	adds	r0, r1, #3
 800c2fe:	db02      	blt.n	800c306 <_printf_float+0x13a>
 800c300:	6863      	ldr	r3, [r4, #4]
 800c302:	4299      	cmp	r1, r3
 800c304:	dd41      	ble.n	800c38a <_printf_float+0x1be>
 800c306:	f1ab 0b02 	sub.w	fp, fp, #2
 800c30a:	fa5f fb8b 	uxtb.w	fp, fp
 800c30e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c312:	d820      	bhi.n	800c356 <_printf_float+0x18a>
 800c314:	3901      	subs	r1, #1
 800c316:	465a      	mov	r2, fp
 800c318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c31c:	9109      	str	r1, [sp, #36]	; 0x24
 800c31e:	f7ff ff17 	bl	800c150 <__exponent>
 800c322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c324:	1813      	adds	r3, r2, r0
 800c326:	2a01      	cmp	r2, #1
 800c328:	4681      	mov	r9, r0
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	dc02      	bgt.n	800c334 <_printf_float+0x168>
 800c32e:	6822      	ldr	r2, [r4, #0]
 800c330:	07d2      	lsls	r2, r2, #31
 800c332:	d501      	bpl.n	800c338 <_printf_float+0x16c>
 800c334:	3301      	adds	r3, #1
 800c336:	6123      	str	r3, [r4, #16]
 800c338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d09c      	beq.n	800c27a <_printf_float+0xae>
 800c340:	232d      	movs	r3, #45	; 0x2d
 800c342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c346:	e798      	b.n	800c27a <_printf_float+0xae>
 800c348:	9a06      	ldr	r2, [sp, #24]
 800c34a:	2a47      	cmp	r2, #71	; 0x47
 800c34c:	d1be      	bne.n	800c2cc <_printf_float+0x100>
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1bc      	bne.n	800c2cc <_printf_float+0x100>
 800c352:	2301      	movs	r3, #1
 800c354:	e7b9      	b.n	800c2ca <_printf_float+0xfe>
 800c356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c35a:	d118      	bne.n	800c38e <_printf_float+0x1c2>
 800c35c:	2900      	cmp	r1, #0
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	dd0b      	ble.n	800c37a <_printf_float+0x1ae>
 800c362:	6121      	str	r1, [r4, #16]
 800c364:	b913      	cbnz	r3, 800c36c <_printf_float+0x1a0>
 800c366:	6822      	ldr	r2, [r4, #0]
 800c368:	07d0      	lsls	r0, r2, #31
 800c36a:	d502      	bpl.n	800c372 <_printf_float+0x1a6>
 800c36c:	3301      	adds	r3, #1
 800c36e:	440b      	add	r3, r1
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	65a1      	str	r1, [r4, #88]	; 0x58
 800c374:	f04f 0900 	mov.w	r9, #0
 800c378:	e7de      	b.n	800c338 <_printf_float+0x16c>
 800c37a:	b913      	cbnz	r3, 800c382 <_printf_float+0x1b6>
 800c37c:	6822      	ldr	r2, [r4, #0]
 800c37e:	07d2      	lsls	r2, r2, #31
 800c380:	d501      	bpl.n	800c386 <_printf_float+0x1ba>
 800c382:	3302      	adds	r3, #2
 800c384:	e7f4      	b.n	800c370 <_printf_float+0x1a4>
 800c386:	2301      	movs	r3, #1
 800c388:	e7f2      	b.n	800c370 <_printf_float+0x1a4>
 800c38a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c390:	4299      	cmp	r1, r3
 800c392:	db05      	blt.n	800c3a0 <_printf_float+0x1d4>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	6121      	str	r1, [r4, #16]
 800c398:	07d8      	lsls	r0, r3, #31
 800c39a:	d5ea      	bpl.n	800c372 <_printf_float+0x1a6>
 800c39c:	1c4b      	adds	r3, r1, #1
 800c39e:	e7e7      	b.n	800c370 <_printf_float+0x1a4>
 800c3a0:	2900      	cmp	r1, #0
 800c3a2:	bfd4      	ite	le
 800c3a4:	f1c1 0202 	rsble	r2, r1, #2
 800c3a8:	2201      	movgt	r2, #1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	e7e0      	b.n	800c370 <_printf_float+0x1a4>
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	055a      	lsls	r2, r3, #21
 800c3b2:	d407      	bmi.n	800c3c4 <_printf_float+0x1f8>
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	4642      	mov	r2, r8
 800c3b8:	4631      	mov	r1, r6
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	47b8      	blx	r7
 800c3be:	3001      	adds	r0, #1
 800c3c0:	d12c      	bne.n	800c41c <_printf_float+0x250>
 800c3c2:	e764      	b.n	800c28e <_printf_float+0xc2>
 800c3c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3c8:	f240 80e0 	bls.w	800c58c <_printf_float+0x3c0>
 800c3cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f7f4 fb80 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d034      	beq.n	800c446 <_printf_float+0x27a>
 800c3dc:	4a37      	ldr	r2, [pc, #220]	; (800c4bc <_printf_float+0x2f0>)
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4631      	mov	r1, r6
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	47b8      	blx	r7
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	f43f af51 	beq.w	800c28e <_printf_float+0xc2>
 800c3ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	db02      	blt.n	800c3fa <_printf_float+0x22e>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	07d8      	lsls	r0, r3, #31
 800c3f8:	d510      	bpl.n	800c41c <_printf_float+0x250>
 800c3fa:	ee18 3a10 	vmov	r3, s16
 800c3fe:	4652      	mov	r2, sl
 800c400:	4631      	mov	r1, r6
 800c402:	4628      	mov	r0, r5
 800c404:	47b8      	blx	r7
 800c406:	3001      	adds	r0, #1
 800c408:	f43f af41 	beq.w	800c28e <_printf_float+0xc2>
 800c40c:	f04f 0800 	mov.w	r8, #0
 800c410:	f104 091a 	add.w	r9, r4, #26
 800c414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c416:	3b01      	subs	r3, #1
 800c418:	4543      	cmp	r3, r8
 800c41a:	dc09      	bgt.n	800c430 <_printf_float+0x264>
 800c41c:	6823      	ldr	r3, [r4, #0]
 800c41e:	079b      	lsls	r3, r3, #30
 800c420:	f100 8105 	bmi.w	800c62e <_printf_float+0x462>
 800c424:	68e0      	ldr	r0, [r4, #12]
 800c426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c428:	4298      	cmp	r0, r3
 800c42a:	bfb8      	it	lt
 800c42c:	4618      	movlt	r0, r3
 800c42e:	e730      	b.n	800c292 <_printf_float+0xc6>
 800c430:	2301      	movs	r3, #1
 800c432:	464a      	mov	r2, r9
 800c434:	4631      	mov	r1, r6
 800c436:	4628      	mov	r0, r5
 800c438:	47b8      	blx	r7
 800c43a:	3001      	adds	r0, #1
 800c43c:	f43f af27 	beq.w	800c28e <_printf_float+0xc2>
 800c440:	f108 0801 	add.w	r8, r8, #1
 800c444:	e7e6      	b.n	800c414 <_printf_float+0x248>
 800c446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c448:	2b00      	cmp	r3, #0
 800c44a:	dc39      	bgt.n	800c4c0 <_printf_float+0x2f4>
 800c44c:	4a1b      	ldr	r2, [pc, #108]	; (800c4bc <_printf_float+0x2f0>)
 800c44e:	2301      	movs	r3, #1
 800c450:	4631      	mov	r1, r6
 800c452:	4628      	mov	r0, r5
 800c454:	47b8      	blx	r7
 800c456:	3001      	adds	r0, #1
 800c458:	f43f af19 	beq.w	800c28e <_printf_float+0xc2>
 800c45c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c460:	4313      	orrs	r3, r2
 800c462:	d102      	bne.n	800c46a <_printf_float+0x29e>
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	07d9      	lsls	r1, r3, #31
 800c468:	d5d8      	bpl.n	800c41c <_printf_float+0x250>
 800c46a:	ee18 3a10 	vmov	r3, s16
 800c46e:	4652      	mov	r2, sl
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f af09 	beq.w	800c28e <_printf_float+0xc2>
 800c47c:	f04f 0900 	mov.w	r9, #0
 800c480:	f104 0a1a 	add.w	sl, r4, #26
 800c484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c486:	425b      	negs	r3, r3
 800c488:	454b      	cmp	r3, r9
 800c48a:	dc01      	bgt.n	800c490 <_printf_float+0x2c4>
 800c48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48e:	e792      	b.n	800c3b6 <_printf_float+0x1ea>
 800c490:	2301      	movs	r3, #1
 800c492:	4652      	mov	r2, sl
 800c494:	4631      	mov	r1, r6
 800c496:	4628      	mov	r0, r5
 800c498:	47b8      	blx	r7
 800c49a:	3001      	adds	r0, #1
 800c49c:	f43f aef7 	beq.w	800c28e <_printf_float+0xc2>
 800c4a0:	f109 0901 	add.w	r9, r9, #1
 800c4a4:	e7ee      	b.n	800c484 <_printf_float+0x2b8>
 800c4a6:	bf00      	nop
 800c4a8:	7fefffff 	.word	0x7fefffff
 800c4ac:	08010e54 	.word	0x08010e54
 800c4b0:	08010e58 	.word	0x08010e58
 800c4b4:	08010e60 	.word	0x08010e60
 800c4b8:	08010e5c 	.word	0x08010e5c
 800c4bc:	08010e64 	.word	0x08010e64
 800c4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	bfa8      	it	ge
 800c4c8:	461a      	movge	r2, r3
 800c4ca:	2a00      	cmp	r2, #0
 800c4cc:	4691      	mov	r9, r2
 800c4ce:	dc37      	bgt.n	800c540 <_printf_float+0x374>
 800c4d0:	f04f 0b00 	mov.w	fp, #0
 800c4d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4d8:	f104 021a 	add.w	r2, r4, #26
 800c4dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4de:	9305      	str	r3, [sp, #20]
 800c4e0:	eba3 0309 	sub.w	r3, r3, r9
 800c4e4:	455b      	cmp	r3, fp
 800c4e6:	dc33      	bgt.n	800c550 <_printf_float+0x384>
 800c4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	db3b      	blt.n	800c568 <_printf_float+0x39c>
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	07da      	lsls	r2, r3, #31
 800c4f4:	d438      	bmi.n	800c568 <_printf_float+0x39c>
 800c4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f8:	9a05      	ldr	r2, [sp, #20]
 800c4fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4fc:	1a9a      	subs	r2, r3, r2
 800c4fe:	eba3 0901 	sub.w	r9, r3, r1
 800c502:	4591      	cmp	r9, r2
 800c504:	bfa8      	it	ge
 800c506:	4691      	movge	r9, r2
 800c508:	f1b9 0f00 	cmp.w	r9, #0
 800c50c:	dc35      	bgt.n	800c57a <_printf_float+0x3ae>
 800c50e:	f04f 0800 	mov.w	r8, #0
 800c512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c516:	f104 0a1a 	add.w	sl, r4, #26
 800c51a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c51e:	1a9b      	subs	r3, r3, r2
 800c520:	eba3 0309 	sub.w	r3, r3, r9
 800c524:	4543      	cmp	r3, r8
 800c526:	f77f af79 	ble.w	800c41c <_printf_float+0x250>
 800c52a:	2301      	movs	r3, #1
 800c52c:	4652      	mov	r2, sl
 800c52e:	4631      	mov	r1, r6
 800c530:	4628      	mov	r0, r5
 800c532:	47b8      	blx	r7
 800c534:	3001      	adds	r0, #1
 800c536:	f43f aeaa 	beq.w	800c28e <_printf_float+0xc2>
 800c53a:	f108 0801 	add.w	r8, r8, #1
 800c53e:	e7ec      	b.n	800c51a <_printf_float+0x34e>
 800c540:	4613      	mov	r3, r2
 800c542:	4631      	mov	r1, r6
 800c544:	4642      	mov	r2, r8
 800c546:	4628      	mov	r0, r5
 800c548:	47b8      	blx	r7
 800c54a:	3001      	adds	r0, #1
 800c54c:	d1c0      	bne.n	800c4d0 <_printf_float+0x304>
 800c54e:	e69e      	b.n	800c28e <_printf_float+0xc2>
 800c550:	2301      	movs	r3, #1
 800c552:	4631      	mov	r1, r6
 800c554:	4628      	mov	r0, r5
 800c556:	9205      	str	r2, [sp, #20]
 800c558:	47b8      	blx	r7
 800c55a:	3001      	adds	r0, #1
 800c55c:	f43f ae97 	beq.w	800c28e <_printf_float+0xc2>
 800c560:	9a05      	ldr	r2, [sp, #20]
 800c562:	f10b 0b01 	add.w	fp, fp, #1
 800c566:	e7b9      	b.n	800c4dc <_printf_float+0x310>
 800c568:	ee18 3a10 	vmov	r3, s16
 800c56c:	4652      	mov	r2, sl
 800c56e:	4631      	mov	r1, r6
 800c570:	4628      	mov	r0, r5
 800c572:	47b8      	blx	r7
 800c574:	3001      	adds	r0, #1
 800c576:	d1be      	bne.n	800c4f6 <_printf_float+0x32a>
 800c578:	e689      	b.n	800c28e <_printf_float+0xc2>
 800c57a:	9a05      	ldr	r2, [sp, #20]
 800c57c:	464b      	mov	r3, r9
 800c57e:	4442      	add	r2, r8
 800c580:	4631      	mov	r1, r6
 800c582:	4628      	mov	r0, r5
 800c584:	47b8      	blx	r7
 800c586:	3001      	adds	r0, #1
 800c588:	d1c1      	bne.n	800c50e <_printf_float+0x342>
 800c58a:	e680      	b.n	800c28e <_printf_float+0xc2>
 800c58c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c58e:	2a01      	cmp	r2, #1
 800c590:	dc01      	bgt.n	800c596 <_printf_float+0x3ca>
 800c592:	07db      	lsls	r3, r3, #31
 800c594:	d538      	bpl.n	800c608 <_printf_float+0x43c>
 800c596:	2301      	movs	r3, #1
 800c598:	4642      	mov	r2, r8
 800c59a:	4631      	mov	r1, r6
 800c59c:	4628      	mov	r0, r5
 800c59e:	47b8      	blx	r7
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	f43f ae74 	beq.w	800c28e <_printf_float+0xc2>
 800c5a6:	ee18 3a10 	vmov	r3, s16
 800c5aa:	4652      	mov	r2, sl
 800c5ac:	4631      	mov	r1, r6
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	47b8      	blx	r7
 800c5b2:	3001      	adds	r0, #1
 800c5b4:	f43f ae6b 	beq.w	800c28e <_printf_float+0xc2>
 800c5b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5bc:	2200      	movs	r2, #0
 800c5be:	2300      	movs	r3, #0
 800c5c0:	f7f4 fa8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c5c4:	b9d8      	cbnz	r0, 800c5fe <_printf_float+0x432>
 800c5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5c8:	f108 0201 	add.w	r2, r8, #1
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	4631      	mov	r1, r6
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	47b8      	blx	r7
 800c5d4:	3001      	adds	r0, #1
 800c5d6:	d10e      	bne.n	800c5f6 <_printf_float+0x42a>
 800c5d8:	e659      	b.n	800c28e <_printf_float+0xc2>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	4652      	mov	r2, sl
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	47b8      	blx	r7
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	f43f ae52 	beq.w	800c28e <_printf_float+0xc2>
 800c5ea:	f108 0801 	add.w	r8, r8, #1
 800c5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	4543      	cmp	r3, r8
 800c5f4:	dcf1      	bgt.n	800c5da <_printf_float+0x40e>
 800c5f6:	464b      	mov	r3, r9
 800c5f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5fc:	e6dc      	b.n	800c3b8 <_printf_float+0x1ec>
 800c5fe:	f04f 0800 	mov.w	r8, #0
 800c602:	f104 0a1a 	add.w	sl, r4, #26
 800c606:	e7f2      	b.n	800c5ee <_printf_float+0x422>
 800c608:	2301      	movs	r3, #1
 800c60a:	4642      	mov	r2, r8
 800c60c:	e7df      	b.n	800c5ce <_printf_float+0x402>
 800c60e:	2301      	movs	r3, #1
 800c610:	464a      	mov	r2, r9
 800c612:	4631      	mov	r1, r6
 800c614:	4628      	mov	r0, r5
 800c616:	47b8      	blx	r7
 800c618:	3001      	adds	r0, #1
 800c61a:	f43f ae38 	beq.w	800c28e <_printf_float+0xc2>
 800c61e:	f108 0801 	add.w	r8, r8, #1
 800c622:	68e3      	ldr	r3, [r4, #12]
 800c624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c626:	1a5b      	subs	r3, r3, r1
 800c628:	4543      	cmp	r3, r8
 800c62a:	dcf0      	bgt.n	800c60e <_printf_float+0x442>
 800c62c:	e6fa      	b.n	800c424 <_printf_float+0x258>
 800c62e:	f04f 0800 	mov.w	r8, #0
 800c632:	f104 0919 	add.w	r9, r4, #25
 800c636:	e7f4      	b.n	800c622 <_printf_float+0x456>

0800c638 <_printf_common>:
 800c638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c63c:	4616      	mov	r6, r2
 800c63e:	4699      	mov	r9, r3
 800c640:	688a      	ldr	r2, [r1, #8]
 800c642:	690b      	ldr	r3, [r1, #16]
 800c644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c648:	4293      	cmp	r3, r2
 800c64a:	bfb8      	it	lt
 800c64c:	4613      	movlt	r3, r2
 800c64e:	6033      	str	r3, [r6, #0]
 800c650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c654:	4607      	mov	r7, r0
 800c656:	460c      	mov	r4, r1
 800c658:	b10a      	cbz	r2, 800c65e <_printf_common+0x26>
 800c65a:	3301      	adds	r3, #1
 800c65c:	6033      	str	r3, [r6, #0]
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	0699      	lsls	r1, r3, #26
 800c662:	bf42      	ittt	mi
 800c664:	6833      	ldrmi	r3, [r6, #0]
 800c666:	3302      	addmi	r3, #2
 800c668:	6033      	strmi	r3, [r6, #0]
 800c66a:	6825      	ldr	r5, [r4, #0]
 800c66c:	f015 0506 	ands.w	r5, r5, #6
 800c670:	d106      	bne.n	800c680 <_printf_common+0x48>
 800c672:	f104 0a19 	add.w	sl, r4, #25
 800c676:	68e3      	ldr	r3, [r4, #12]
 800c678:	6832      	ldr	r2, [r6, #0]
 800c67a:	1a9b      	subs	r3, r3, r2
 800c67c:	42ab      	cmp	r3, r5
 800c67e:	dc26      	bgt.n	800c6ce <_printf_common+0x96>
 800c680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c684:	1e13      	subs	r3, r2, #0
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	bf18      	it	ne
 800c68a:	2301      	movne	r3, #1
 800c68c:	0692      	lsls	r2, r2, #26
 800c68e:	d42b      	bmi.n	800c6e8 <_printf_common+0xb0>
 800c690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c694:	4649      	mov	r1, r9
 800c696:	4638      	mov	r0, r7
 800c698:	47c0      	blx	r8
 800c69a:	3001      	adds	r0, #1
 800c69c:	d01e      	beq.n	800c6dc <_printf_common+0xa4>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	68e5      	ldr	r5, [r4, #12]
 800c6a2:	6832      	ldr	r2, [r6, #0]
 800c6a4:	f003 0306 	and.w	r3, r3, #6
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	bf08      	it	eq
 800c6ac:	1aad      	subeq	r5, r5, r2
 800c6ae:	68a3      	ldr	r3, [r4, #8]
 800c6b0:	6922      	ldr	r2, [r4, #16]
 800c6b2:	bf0c      	ite	eq
 800c6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6b8:	2500      	movne	r5, #0
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	bfc4      	itt	gt
 800c6be:	1a9b      	subgt	r3, r3, r2
 800c6c0:	18ed      	addgt	r5, r5, r3
 800c6c2:	2600      	movs	r6, #0
 800c6c4:	341a      	adds	r4, #26
 800c6c6:	42b5      	cmp	r5, r6
 800c6c8:	d11a      	bne.n	800c700 <_printf_common+0xc8>
 800c6ca:	2000      	movs	r0, #0
 800c6cc:	e008      	b.n	800c6e0 <_printf_common+0xa8>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	4652      	mov	r2, sl
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	47c0      	blx	r8
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d103      	bne.n	800c6e4 <_printf_common+0xac>
 800c6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e4:	3501      	adds	r5, #1
 800c6e6:	e7c6      	b.n	800c676 <_printf_common+0x3e>
 800c6e8:	18e1      	adds	r1, r4, r3
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	2030      	movs	r0, #48	; 0x30
 800c6ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6f2:	4422      	add	r2, r4
 800c6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6fc:	3302      	adds	r3, #2
 800c6fe:	e7c7      	b.n	800c690 <_printf_common+0x58>
 800c700:	2301      	movs	r3, #1
 800c702:	4622      	mov	r2, r4
 800c704:	4649      	mov	r1, r9
 800c706:	4638      	mov	r0, r7
 800c708:	47c0      	blx	r8
 800c70a:	3001      	adds	r0, #1
 800c70c:	d0e6      	beq.n	800c6dc <_printf_common+0xa4>
 800c70e:	3601      	adds	r6, #1
 800c710:	e7d9      	b.n	800c6c6 <_printf_common+0x8e>
	...

0800c714 <_printf_i>:
 800c714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c718:	7e0f      	ldrb	r7, [r1, #24]
 800c71a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c71c:	2f78      	cmp	r7, #120	; 0x78
 800c71e:	4691      	mov	r9, r2
 800c720:	4680      	mov	r8, r0
 800c722:	460c      	mov	r4, r1
 800c724:	469a      	mov	sl, r3
 800c726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c72a:	d807      	bhi.n	800c73c <_printf_i+0x28>
 800c72c:	2f62      	cmp	r7, #98	; 0x62
 800c72e:	d80a      	bhi.n	800c746 <_printf_i+0x32>
 800c730:	2f00      	cmp	r7, #0
 800c732:	f000 80d8 	beq.w	800c8e6 <_printf_i+0x1d2>
 800c736:	2f58      	cmp	r7, #88	; 0x58
 800c738:	f000 80a3 	beq.w	800c882 <_printf_i+0x16e>
 800c73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c744:	e03a      	b.n	800c7bc <_printf_i+0xa8>
 800c746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c74a:	2b15      	cmp	r3, #21
 800c74c:	d8f6      	bhi.n	800c73c <_printf_i+0x28>
 800c74e:	a101      	add	r1, pc, #4	; (adr r1, 800c754 <_printf_i+0x40>)
 800c750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c754:	0800c7ad 	.word	0x0800c7ad
 800c758:	0800c7c1 	.word	0x0800c7c1
 800c75c:	0800c73d 	.word	0x0800c73d
 800c760:	0800c73d 	.word	0x0800c73d
 800c764:	0800c73d 	.word	0x0800c73d
 800c768:	0800c73d 	.word	0x0800c73d
 800c76c:	0800c7c1 	.word	0x0800c7c1
 800c770:	0800c73d 	.word	0x0800c73d
 800c774:	0800c73d 	.word	0x0800c73d
 800c778:	0800c73d 	.word	0x0800c73d
 800c77c:	0800c73d 	.word	0x0800c73d
 800c780:	0800c8cd 	.word	0x0800c8cd
 800c784:	0800c7f1 	.word	0x0800c7f1
 800c788:	0800c8af 	.word	0x0800c8af
 800c78c:	0800c73d 	.word	0x0800c73d
 800c790:	0800c73d 	.word	0x0800c73d
 800c794:	0800c8ef 	.word	0x0800c8ef
 800c798:	0800c73d 	.word	0x0800c73d
 800c79c:	0800c7f1 	.word	0x0800c7f1
 800c7a0:	0800c73d 	.word	0x0800c73d
 800c7a4:	0800c73d 	.word	0x0800c73d
 800c7a8:	0800c8b7 	.word	0x0800c8b7
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	1d1a      	adds	r2, r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	602a      	str	r2, [r5, #0]
 800c7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e0a3      	b.n	800c908 <_printf_i+0x1f4>
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	6829      	ldr	r1, [r5, #0]
 800c7c4:	0606      	lsls	r6, r0, #24
 800c7c6:	f101 0304 	add.w	r3, r1, #4
 800c7ca:	d50a      	bpl.n	800c7e2 <_printf_i+0xce>
 800c7cc:	680e      	ldr	r6, [r1, #0]
 800c7ce:	602b      	str	r3, [r5, #0]
 800c7d0:	2e00      	cmp	r6, #0
 800c7d2:	da03      	bge.n	800c7dc <_printf_i+0xc8>
 800c7d4:	232d      	movs	r3, #45	; 0x2d
 800c7d6:	4276      	negs	r6, r6
 800c7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7dc:	485e      	ldr	r0, [pc, #376]	; (800c958 <_printf_i+0x244>)
 800c7de:	230a      	movs	r3, #10
 800c7e0:	e019      	b.n	800c816 <_printf_i+0x102>
 800c7e2:	680e      	ldr	r6, [r1, #0]
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7ea:	bf18      	it	ne
 800c7ec:	b236      	sxthne	r6, r6
 800c7ee:	e7ef      	b.n	800c7d0 <_printf_i+0xbc>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	6820      	ldr	r0, [r4, #0]
 800c7f4:	1d19      	adds	r1, r3, #4
 800c7f6:	6029      	str	r1, [r5, #0]
 800c7f8:	0601      	lsls	r1, r0, #24
 800c7fa:	d501      	bpl.n	800c800 <_printf_i+0xec>
 800c7fc:	681e      	ldr	r6, [r3, #0]
 800c7fe:	e002      	b.n	800c806 <_printf_i+0xf2>
 800c800:	0646      	lsls	r6, r0, #25
 800c802:	d5fb      	bpl.n	800c7fc <_printf_i+0xe8>
 800c804:	881e      	ldrh	r6, [r3, #0]
 800c806:	4854      	ldr	r0, [pc, #336]	; (800c958 <_printf_i+0x244>)
 800c808:	2f6f      	cmp	r7, #111	; 0x6f
 800c80a:	bf0c      	ite	eq
 800c80c:	2308      	moveq	r3, #8
 800c80e:	230a      	movne	r3, #10
 800c810:	2100      	movs	r1, #0
 800c812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c816:	6865      	ldr	r5, [r4, #4]
 800c818:	60a5      	str	r5, [r4, #8]
 800c81a:	2d00      	cmp	r5, #0
 800c81c:	bfa2      	ittt	ge
 800c81e:	6821      	ldrge	r1, [r4, #0]
 800c820:	f021 0104 	bicge.w	r1, r1, #4
 800c824:	6021      	strge	r1, [r4, #0]
 800c826:	b90e      	cbnz	r6, 800c82c <_printf_i+0x118>
 800c828:	2d00      	cmp	r5, #0
 800c82a:	d04d      	beq.n	800c8c8 <_printf_i+0x1b4>
 800c82c:	4615      	mov	r5, r2
 800c82e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c832:	fb03 6711 	mls	r7, r3, r1, r6
 800c836:	5dc7      	ldrb	r7, [r0, r7]
 800c838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c83c:	4637      	mov	r7, r6
 800c83e:	42bb      	cmp	r3, r7
 800c840:	460e      	mov	r6, r1
 800c842:	d9f4      	bls.n	800c82e <_printf_i+0x11a>
 800c844:	2b08      	cmp	r3, #8
 800c846:	d10b      	bne.n	800c860 <_printf_i+0x14c>
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	07de      	lsls	r6, r3, #31
 800c84c:	d508      	bpl.n	800c860 <_printf_i+0x14c>
 800c84e:	6923      	ldr	r3, [r4, #16]
 800c850:	6861      	ldr	r1, [r4, #4]
 800c852:	4299      	cmp	r1, r3
 800c854:	bfde      	ittt	le
 800c856:	2330      	movle	r3, #48	; 0x30
 800c858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c85c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c860:	1b52      	subs	r2, r2, r5
 800c862:	6122      	str	r2, [r4, #16]
 800c864:	f8cd a000 	str.w	sl, [sp]
 800c868:	464b      	mov	r3, r9
 800c86a:	aa03      	add	r2, sp, #12
 800c86c:	4621      	mov	r1, r4
 800c86e:	4640      	mov	r0, r8
 800c870:	f7ff fee2 	bl	800c638 <_printf_common>
 800c874:	3001      	adds	r0, #1
 800c876:	d14c      	bne.n	800c912 <_printf_i+0x1fe>
 800c878:	f04f 30ff 	mov.w	r0, #4294967295
 800c87c:	b004      	add	sp, #16
 800c87e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c882:	4835      	ldr	r0, [pc, #212]	; (800c958 <_printf_i+0x244>)
 800c884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c888:	6829      	ldr	r1, [r5, #0]
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c890:	6029      	str	r1, [r5, #0]
 800c892:	061d      	lsls	r5, r3, #24
 800c894:	d514      	bpl.n	800c8c0 <_printf_i+0x1ac>
 800c896:	07df      	lsls	r7, r3, #31
 800c898:	bf44      	itt	mi
 800c89a:	f043 0320 	orrmi.w	r3, r3, #32
 800c89e:	6023      	strmi	r3, [r4, #0]
 800c8a0:	b91e      	cbnz	r6, 800c8aa <_printf_i+0x196>
 800c8a2:	6823      	ldr	r3, [r4, #0]
 800c8a4:	f023 0320 	bic.w	r3, r3, #32
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	2310      	movs	r3, #16
 800c8ac:	e7b0      	b.n	800c810 <_printf_i+0xfc>
 800c8ae:	6823      	ldr	r3, [r4, #0]
 800c8b0:	f043 0320 	orr.w	r3, r3, #32
 800c8b4:	6023      	str	r3, [r4, #0]
 800c8b6:	2378      	movs	r3, #120	; 0x78
 800c8b8:	4828      	ldr	r0, [pc, #160]	; (800c95c <_printf_i+0x248>)
 800c8ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c8be:	e7e3      	b.n	800c888 <_printf_i+0x174>
 800c8c0:	0659      	lsls	r1, r3, #25
 800c8c2:	bf48      	it	mi
 800c8c4:	b2b6      	uxthmi	r6, r6
 800c8c6:	e7e6      	b.n	800c896 <_printf_i+0x182>
 800c8c8:	4615      	mov	r5, r2
 800c8ca:	e7bb      	b.n	800c844 <_printf_i+0x130>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	6826      	ldr	r6, [r4, #0]
 800c8d0:	6961      	ldr	r1, [r4, #20]
 800c8d2:	1d18      	adds	r0, r3, #4
 800c8d4:	6028      	str	r0, [r5, #0]
 800c8d6:	0635      	lsls	r5, r6, #24
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	d501      	bpl.n	800c8e0 <_printf_i+0x1cc>
 800c8dc:	6019      	str	r1, [r3, #0]
 800c8de:	e002      	b.n	800c8e6 <_printf_i+0x1d2>
 800c8e0:	0670      	lsls	r0, r6, #25
 800c8e2:	d5fb      	bpl.n	800c8dc <_printf_i+0x1c8>
 800c8e4:	8019      	strh	r1, [r3, #0]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	4615      	mov	r5, r2
 800c8ec:	e7ba      	b.n	800c864 <_printf_i+0x150>
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	1d1a      	adds	r2, r3, #4
 800c8f2:	602a      	str	r2, [r5, #0]
 800c8f4:	681d      	ldr	r5, [r3, #0]
 800c8f6:	6862      	ldr	r2, [r4, #4]
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7f3 fc78 	bl	80001f0 <memchr>
 800c900:	b108      	cbz	r0, 800c906 <_printf_i+0x1f2>
 800c902:	1b40      	subs	r0, r0, r5
 800c904:	6060      	str	r0, [r4, #4]
 800c906:	6863      	ldr	r3, [r4, #4]
 800c908:	6123      	str	r3, [r4, #16]
 800c90a:	2300      	movs	r3, #0
 800c90c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c910:	e7a8      	b.n	800c864 <_printf_i+0x150>
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	462a      	mov	r2, r5
 800c916:	4649      	mov	r1, r9
 800c918:	4640      	mov	r0, r8
 800c91a:	47d0      	blx	sl
 800c91c:	3001      	adds	r0, #1
 800c91e:	d0ab      	beq.n	800c878 <_printf_i+0x164>
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	079b      	lsls	r3, r3, #30
 800c924:	d413      	bmi.n	800c94e <_printf_i+0x23a>
 800c926:	68e0      	ldr	r0, [r4, #12]
 800c928:	9b03      	ldr	r3, [sp, #12]
 800c92a:	4298      	cmp	r0, r3
 800c92c:	bfb8      	it	lt
 800c92e:	4618      	movlt	r0, r3
 800c930:	e7a4      	b.n	800c87c <_printf_i+0x168>
 800c932:	2301      	movs	r3, #1
 800c934:	4632      	mov	r2, r6
 800c936:	4649      	mov	r1, r9
 800c938:	4640      	mov	r0, r8
 800c93a:	47d0      	blx	sl
 800c93c:	3001      	adds	r0, #1
 800c93e:	d09b      	beq.n	800c878 <_printf_i+0x164>
 800c940:	3501      	adds	r5, #1
 800c942:	68e3      	ldr	r3, [r4, #12]
 800c944:	9903      	ldr	r1, [sp, #12]
 800c946:	1a5b      	subs	r3, r3, r1
 800c948:	42ab      	cmp	r3, r5
 800c94a:	dcf2      	bgt.n	800c932 <_printf_i+0x21e>
 800c94c:	e7eb      	b.n	800c926 <_printf_i+0x212>
 800c94e:	2500      	movs	r5, #0
 800c950:	f104 0619 	add.w	r6, r4, #25
 800c954:	e7f5      	b.n	800c942 <_printf_i+0x22e>
 800c956:	bf00      	nop
 800c958:	08010e66 	.word	0x08010e66
 800c95c:	08010e77 	.word	0x08010e77

0800c960 <_scanf_float>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	b087      	sub	sp, #28
 800c966:	4617      	mov	r7, r2
 800c968:	9303      	str	r3, [sp, #12]
 800c96a:	688b      	ldr	r3, [r1, #8]
 800c96c:	1e5a      	subs	r2, r3, #1
 800c96e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c972:	bf83      	ittte	hi
 800c974:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c978:	195b      	addhi	r3, r3, r5
 800c97a:	9302      	strhi	r3, [sp, #8]
 800c97c:	2300      	movls	r3, #0
 800c97e:	bf86      	itte	hi
 800c980:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c984:	608b      	strhi	r3, [r1, #8]
 800c986:	9302      	strls	r3, [sp, #8]
 800c988:	680b      	ldr	r3, [r1, #0]
 800c98a:	468b      	mov	fp, r1
 800c98c:	2500      	movs	r5, #0
 800c98e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c992:	f84b 3b1c 	str.w	r3, [fp], #28
 800c996:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c99a:	4680      	mov	r8, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	465e      	mov	r6, fp
 800c9a0:	46aa      	mov	sl, r5
 800c9a2:	46a9      	mov	r9, r5
 800c9a4:	9501      	str	r5, [sp, #4]
 800c9a6:	68a2      	ldr	r2, [r4, #8]
 800c9a8:	b152      	cbz	r2, 800c9c0 <_scanf_float+0x60>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	781b      	ldrb	r3, [r3, #0]
 800c9ae:	2b4e      	cmp	r3, #78	; 0x4e
 800c9b0:	d864      	bhi.n	800ca7c <_scanf_float+0x11c>
 800c9b2:	2b40      	cmp	r3, #64	; 0x40
 800c9b4:	d83c      	bhi.n	800ca30 <_scanf_float+0xd0>
 800c9b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c9ba:	b2c8      	uxtb	r0, r1
 800c9bc:	280e      	cmp	r0, #14
 800c9be:	d93a      	bls.n	800ca36 <_scanf_float+0xd6>
 800c9c0:	f1b9 0f00 	cmp.w	r9, #0
 800c9c4:	d003      	beq.n	800c9ce <_scanf_float+0x6e>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9d2:	f1ba 0f01 	cmp.w	sl, #1
 800c9d6:	f200 8113 	bhi.w	800cc00 <_scanf_float+0x2a0>
 800c9da:	455e      	cmp	r6, fp
 800c9dc:	f200 8105 	bhi.w	800cbea <_scanf_float+0x28a>
 800c9e0:	2501      	movs	r5, #1
 800c9e2:	4628      	mov	r0, r5
 800c9e4:	b007      	add	sp, #28
 800c9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c9ee:	2a0d      	cmp	r2, #13
 800c9f0:	d8e6      	bhi.n	800c9c0 <_scanf_float+0x60>
 800c9f2:	a101      	add	r1, pc, #4	; (adr r1, 800c9f8 <_scanf_float+0x98>)
 800c9f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9f8:	0800cb37 	.word	0x0800cb37
 800c9fc:	0800c9c1 	.word	0x0800c9c1
 800ca00:	0800c9c1 	.word	0x0800c9c1
 800ca04:	0800c9c1 	.word	0x0800c9c1
 800ca08:	0800cb97 	.word	0x0800cb97
 800ca0c:	0800cb6f 	.word	0x0800cb6f
 800ca10:	0800c9c1 	.word	0x0800c9c1
 800ca14:	0800c9c1 	.word	0x0800c9c1
 800ca18:	0800cb45 	.word	0x0800cb45
 800ca1c:	0800c9c1 	.word	0x0800c9c1
 800ca20:	0800c9c1 	.word	0x0800c9c1
 800ca24:	0800c9c1 	.word	0x0800c9c1
 800ca28:	0800c9c1 	.word	0x0800c9c1
 800ca2c:	0800cafd 	.word	0x0800cafd
 800ca30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ca34:	e7db      	b.n	800c9ee <_scanf_float+0x8e>
 800ca36:	290e      	cmp	r1, #14
 800ca38:	d8c2      	bhi.n	800c9c0 <_scanf_float+0x60>
 800ca3a:	a001      	add	r0, pc, #4	; (adr r0, 800ca40 <_scanf_float+0xe0>)
 800ca3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca40:	0800caef 	.word	0x0800caef
 800ca44:	0800c9c1 	.word	0x0800c9c1
 800ca48:	0800caef 	.word	0x0800caef
 800ca4c:	0800cb83 	.word	0x0800cb83
 800ca50:	0800c9c1 	.word	0x0800c9c1
 800ca54:	0800ca9d 	.word	0x0800ca9d
 800ca58:	0800cad9 	.word	0x0800cad9
 800ca5c:	0800cad9 	.word	0x0800cad9
 800ca60:	0800cad9 	.word	0x0800cad9
 800ca64:	0800cad9 	.word	0x0800cad9
 800ca68:	0800cad9 	.word	0x0800cad9
 800ca6c:	0800cad9 	.word	0x0800cad9
 800ca70:	0800cad9 	.word	0x0800cad9
 800ca74:	0800cad9 	.word	0x0800cad9
 800ca78:	0800cad9 	.word	0x0800cad9
 800ca7c:	2b6e      	cmp	r3, #110	; 0x6e
 800ca7e:	d809      	bhi.n	800ca94 <_scanf_float+0x134>
 800ca80:	2b60      	cmp	r3, #96	; 0x60
 800ca82:	d8b2      	bhi.n	800c9ea <_scanf_float+0x8a>
 800ca84:	2b54      	cmp	r3, #84	; 0x54
 800ca86:	d077      	beq.n	800cb78 <_scanf_float+0x218>
 800ca88:	2b59      	cmp	r3, #89	; 0x59
 800ca8a:	d199      	bne.n	800c9c0 <_scanf_float+0x60>
 800ca8c:	2d07      	cmp	r5, #7
 800ca8e:	d197      	bne.n	800c9c0 <_scanf_float+0x60>
 800ca90:	2508      	movs	r5, #8
 800ca92:	e029      	b.n	800cae8 <_scanf_float+0x188>
 800ca94:	2b74      	cmp	r3, #116	; 0x74
 800ca96:	d06f      	beq.n	800cb78 <_scanf_float+0x218>
 800ca98:	2b79      	cmp	r3, #121	; 0x79
 800ca9a:	e7f6      	b.n	800ca8a <_scanf_float+0x12a>
 800ca9c:	6821      	ldr	r1, [r4, #0]
 800ca9e:	05c8      	lsls	r0, r1, #23
 800caa0:	d51a      	bpl.n	800cad8 <_scanf_float+0x178>
 800caa2:	9b02      	ldr	r3, [sp, #8]
 800caa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800caa8:	6021      	str	r1, [r4, #0]
 800caaa:	f109 0901 	add.w	r9, r9, #1
 800caae:	b11b      	cbz	r3, 800cab8 <_scanf_float+0x158>
 800cab0:	3b01      	subs	r3, #1
 800cab2:	3201      	adds	r2, #1
 800cab4:	9302      	str	r3, [sp, #8]
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	68a3      	ldr	r3, [r4, #8]
 800caba:	3b01      	subs	r3, #1
 800cabc:	60a3      	str	r3, [r4, #8]
 800cabe:	6923      	ldr	r3, [r4, #16]
 800cac0:	3301      	adds	r3, #1
 800cac2:	6123      	str	r3, [r4, #16]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	3b01      	subs	r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	607b      	str	r3, [r7, #4]
 800cacc:	f340 8084 	ble.w	800cbd8 <_scanf_float+0x278>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	3301      	adds	r3, #1
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	e766      	b.n	800c9a6 <_scanf_float+0x46>
 800cad8:	eb1a 0f05 	cmn.w	sl, r5
 800cadc:	f47f af70 	bne.w	800c9c0 <_scanf_float+0x60>
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cae6:	6022      	str	r2, [r4, #0]
 800cae8:	f806 3b01 	strb.w	r3, [r6], #1
 800caec:	e7e4      	b.n	800cab8 <_scanf_float+0x158>
 800caee:	6822      	ldr	r2, [r4, #0]
 800caf0:	0610      	lsls	r0, r2, #24
 800caf2:	f57f af65 	bpl.w	800c9c0 <_scanf_float+0x60>
 800caf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cafa:	e7f4      	b.n	800cae6 <_scanf_float+0x186>
 800cafc:	f1ba 0f00 	cmp.w	sl, #0
 800cb00:	d10e      	bne.n	800cb20 <_scanf_float+0x1c0>
 800cb02:	f1b9 0f00 	cmp.w	r9, #0
 800cb06:	d10e      	bne.n	800cb26 <_scanf_float+0x1c6>
 800cb08:	6822      	ldr	r2, [r4, #0]
 800cb0a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb0e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb12:	d108      	bne.n	800cb26 <_scanf_float+0x1c6>
 800cb14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb18:	6022      	str	r2, [r4, #0]
 800cb1a:	f04f 0a01 	mov.w	sl, #1
 800cb1e:	e7e3      	b.n	800cae8 <_scanf_float+0x188>
 800cb20:	f1ba 0f02 	cmp.w	sl, #2
 800cb24:	d055      	beq.n	800cbd2 <_scanf_float+0x272>
 800cb26:	2d01      	cmp	r5, #1
 800cb28:	d002      	beq.n	800cb30 <_scanf_float+0x1d0>
 800cb2a:	2d04      	cmp	r5, #4
 800cb2c:	f47f af48 	bne.w	800c9c0 <_scanf_float+0x60>
 800cb30:	3501      	adds	r5, #1
 800cb32:	b2ed      	uxtb	r5, r5
 800cb34:	e7d8      	b.n	800cae8 <_scanf_float+0x188>
 800cb36:	f1ba 0f01 	cmp.w	sl, #1
 800cb3a:	f47f af41 	bne.w	800c9c0 <_scanf_float+0x60>
 800cb3e:	f04f 0a02 	mov.w	sl, #2
 800cb42:	e7d1      	b.n	800cae8 <_scanf_float+0x188>
 800cb44:	b97d      	cbnz	r5, 800cb66 <_scanf_float+0x206>
 800cb46:	f1b9 0f00 	cmp.w	r9, #0
 800cb4a:	f47f af3c 	bne.w	800c9c6 <_scanf_float+0x66>
 800cb4e:	6822      	ldr	r2, [r4, #0]
 800cb50:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb54:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb58:	f47f af39 	bne.w	800c9ce <_scanf_float+0x6e>
 800cb5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb60:	6022      	str	r2, [r4, #0]
 800cb62:	2501      	movs	r5, #1
 800cb64:	e7c0      	b.n	800cae8 <_scanf_float+0x188>
 800cb66:	2d03      	cmp	r5, #3
 800cb68:	d0e2      	beq.n	800cb30 <_scanf_float+0x1d0>
 800cb6a:	2d05      	cmp	r5, #5
 800cb6c:	e7de      	b.n	800cb2c <_scanf_float+0x1cc>
 800cb6e:	2d02      	cmp	r5, #2
 800cb70:	f47f af26 	bne.w	800c9c0 <_scanf_float+0x60>
 800cb74:	2503      	movs	r5, #3
 800cb76:	e7b7      	b.n	800cae8 <_scanf_float+0x188>
 800cb78:	2d06      	cmp	r5, #6
 800cb7a:	f47f af21 	bne.w	800c9c0 <_scanf_float+0x60>
 800cb7e:	2507      	movs	r5, #7
 800cb80:	e7b2      	b.n	800cae8 <_scanf_float+0x188>
 800cb82:	6822      	ldr	r2, [r4, #0]
 800cb84:	0591      	lsls	r1, r2, #22
 800cb86:	f57f af1b 	bpl.w	800c9c0 <_scanf_float+0x60>
 800cb8a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cb8e:	6022      	str	r2, [r4, #0]
 800cb90:	f8cd 9004 	str.w	r9, [sp, #4]
 800cb94:	e7a8      	b.n	800cae8 <_scanf_float+0x188>
 800cb96:	6822      	ldr	r2, [r4, #0]
 800cb98:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cb9c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cba0:	d006      	beq.n	800cbb0 <_scanf_float+0x250>
 800cba2:	0550      	lsls	r0, r2, #21
 800cba4:	f57f af0c 	bpl.w	800c9c0 <_scanf_float+0x60>
 800cba8:	f1b9 0f00 	cmp.w	r9, #0
 800cbac:	f43f af0f 	beq.w	800c9ce <_scanf_float+0x6e>
 800cbb0:	0591      	lsls	r1, r2, #22
 800cbb2:	bf58      	it	pl
 800cbb4:	9901      	ldrpl	r1, [sp, #4]
 800cbb6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cbba:	bf58      	it	pl
 800cbbc:	eba9 0101 	subpl.w	r1, r9, r1
 800cbc0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cbc4:	bf58      	it	pl
 800cbc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cbca:	6022      	str	r2, [r4, #0]
 800cbcc:	f04f 0900 	mov.w	r9, #0
 800cbd0:	e78a      	b.n	800cae8 <_scanf_float+0x188>
 800cbd2:	f04f 0a03 	mov.w	sl, #3
 800cbd6:	e787      	b.n	800cae8 <_scanf_float+0x188>
 800cbd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbdc:	4639      	mov	r1, r7
 800cbde:	4640      	mov	r0, r8
 800cbe0:	4798      	blx	r3
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	f43f aedf 	beq.w	800c9a6 <_scanf_float+0x46>
 800cbe8:	e6ea      	b.n	800c9c0 <_scanf_float+0x60>
 800cbea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbf2:	463a      	mov	r2, r7
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	4798      	blx	r3
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	6123      	str	r3, [r4, #16]
 800cbfe:	e6ec      	b.n	800c9da <_scanf_float+0x7a>
 800cc00:	1e6b      	subs	r3, r5, #1
 800cc02:	2b06      	cmp	r3, #6
 800cc04:	d825      	bhi.n	800cc52 <_scanf_float+0x2f2>
 800cc06:	2d02      	cmp	r5, #2
 800cc08:	d836      	bhi.n	800cc78 <_scanf_float+0x318>
 800cc0a:	455e      	cmp	r6, fp
 800cc0c:	f67f aee8 	bls.w	800c9e0 <_scanf_float+0x80>
 800cc10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc18:	463a      	mov	r2, r7
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4798      	blx	r3
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	e7f1      	b.n	800cc0a <_scanf_float+0x2aa>
 800cc26:	9802      	ldr	r0, [sp, #8]
 800cc28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc2c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cc30:	9002      	str	r0, [sp, #8]
 800cc32:	463a      	mov	r2, r7
 800cc34:	4640      	mov	r0, r8
 800cc36:	4798      	blx	r3
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc42:	fa5f fa8a 	uxtb.w	sl, sl
 800cc46:	f1ba 0f02 	cmp.w	sl, #2
 800cc4a:	d1ec      	bne.n	800cc26 <_scanf_float+0x2c6>
 800cc4c:	3d03      	subs	r5, #3
 800cc4e:	b2ed      	uxtb	r5, r5
 800cc50:	1b76      	subs	r6, r6, r5
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	05da      	lsls	r2, r3, #23
 800cc56:	d52f      	bpl.n	800ccb8 <_scanf_float+0x358>
 800cc58:	055b      	lsls	r3, r3, #21
 800cc5a:	d510      	bpl.n	800cc7e <_scanf_float+0x31e>
 800cc5c:	455e      	cmp	r6, fp
 800cc5e:	f67f aebf 	bls.w	800c9e0 <_scanf_float+0x80>
 800cc62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc6a:	463a      	mov	r2, r7
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	4798      	blx	r3
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	e7f1      	b.n	800cc5c <_scanf_float+0x2fc>
 800cc78:	46aa      	mov	sl, r5
 800cc7a:	9602      	str	r6, [sp, #8]
 800cc7c:	e7df      	b.n	800cc3e <_scanf_float+0x2de>
 800cc7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	2965      	cmp	r1, #101	; 0x65
 800cc86:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc8a:	f106 35ff 	add.w	r5, r6, #4294967295
 800cc8e:	6123      	str	r3, [r4, #16]
 800cc90:	d00c      	beq.n	800ccac <_scanf_float+0x34c>
 800cc92:	2945      	cmp	r1, #69	; 0x45
 800cc94:	d00a      	beq.n	800ccac <_scanf_float+0x34c>
 800cc96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc9a:	463a      	mov	r2, r7
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	4798      	blx	r3
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	1eb5      	subs	r5, r6, #2
 800ccaa:	6123      	str	r3, [r4, #16]
 800ccac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ccb0:	463a      	mov	r2, r7
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4798      	blx	r3
 800ccb6:	462e      	mov	r6, r5
 800ccb8:	6825      	ldr	r5, [r4, #0]
 800ccba:	f015 0510 	ands.w	r5, r5, #16
 800ccbe:	d159      	bne.n	800cd74 <_scanf_float+0x414>
 800ccc0:	7035      	strb	r5, [r6, #0]
 800ccc2:	6823      	ldr	r3, [r4, #0]
 800ccc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ccc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cccc:	d11b      	bne.n	800cd06 <_scanf_float+0x3a6>
 800ccce:	9b01      	ldr	r3, [sp, #4]
 800ccd0:	454b      	cmp	r3, r9
 800ccd2:	eba3 0209 	sub.w	r2, r3, r9
 800ccd6:	d123      	bne.n	800cd20 <_scanf_float+0x3c0>
 800ccd8:	2200      	movs	r2, #0
 800ccda:	4659      	mov	r1, fp
 800ccdc:	4640      	mov	r0, r8
 800ccde:	f000 ffb5 	bl	800dc4c <_strtod_r>
 800cce2:	6822      	ldr	r2, [r4, #0]
 800cce4:	9b03      	ldr	r3, [sp, #12]
 800cce6:	f012 0f02 	tst.w	r2, #2
 800ccea:	ec57 6b10 	vmov	r6, r7, d0
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	d021      	beq.n	800cd36 <_scanf_float+0x3d6>
 800ccf2:	9903      	ldr	r1, [sp, #12]
 800ccf4:	1d1a      	adds	r2, r3, #4
 800ccf6:	600a      	str	r2, [r1, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	e9c3 6700 	strd	r6, r7, [r3]
 800ccfe:	68e3      	ldr	r3, [r4, #12]
 800cd00:	3301      	adds	r3, #1
 800cd02:	60e3      	str	r3, [r4, #12]
 800cd04:	e66d      	b.n	800c9e2 <_scanf_float+0x82>
 800cd06:	9b04      	ldr	r3, [sp, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d0e5      	beq.n	800ccd8 <_scanf_float+0x378>
 800cd0c:	9905      	ldr	r1, [sp, #20]
 800cd0e:	230a      	movs	r3, #10
 800cd10:	462a      	mov	r2, r5
 800cd12:	3101      	adds	r1, #1
 800cd14:	4640      	mov	r0, r8
 800cd16:	f001 f821 	bl	800dd5c <_strtol_r>
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	9e05      	ldr	r6, [sp, #20]
 800cd1e:	1ac2      	subs	r2, r0, r3
 800cd20:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cd24:	429e      	cmp	r6, r3
 800cd26:	bf28      	it	cs
 800cd28:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cd2c:	4912      	ldr	r1, [pc, #72]	; (800cd78 <_scanf_float+0x418>)
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 f8f2 	bl	800cf18 <siprintf>
 800cd34:	e7d0      	b.n	800ccd8 <_scanf_float+0x378>
 800cd36:	9903      	ldr	r1, [sp, #12]
 800cd38:	f012 0f04 	tst.w	r2, #4
 800cd3c:	f103 0204 	add.w	r2, r3, #4
 800cd40:	600a      	str	r2, [r1, #0]
 800cd42:	d1d9      	bne.n	800ccf8 <_scanf_float+0x398>
 800cd44:	f8d3 8000 	ldr.w	r8, [r3]
 800cd48:	ee10 2a10 	vmov	r2, s0
 800cd4c:	ee10 0a10 	vmov	r0, s0
 800cd50:	463b      	mov	r3, r7
 800cd52:	4639      	mov	r1, r7
 800cd54:	f7f3 fef2 	bl	8000b3c <__aeabi_dcmpun>
 800cd58:	b128      	cbz	r0, 800cd66 <_scanf_float+0x406>
 800cd5a:	4808      	ldr	r0, [pc, #32]	; (800cd7c <_scanf_float+0x41c>)
 800cd5c:	f000 f892 	bl	800ce84 <nanf>
 800cd60:	ed88 0a00 	vstr	s0, [r8]
 800cd64:	e7cb      	b.n	800ccfe <_scanf_float+0x39e>
 800cd66:	4630      	mov	r0, r6
 800cd68:	4639      	mov	r1, r7
 800cd6a:	f7f3 ff45 	bl	8000bf8 <__aeabi_d2f>
 800cd6e:	f8c8 0000 	str.w	r0, [r8]
 800cd72:	e7c4      	b.n	800ccfe <_scanf_float+0x39e>
 800cd74:	2500      	movs	r5, #0
 800cd76:	e634      	b.n	800c9e2 <_scanf_float+0x82>
 800cd78:	08010e88 	.word	0x08010e88
 800cd7c:	08011290 	.word	0x08011290

0800cd80 <realloc>:
 800cd80:	4b02      	ldr	r3, [pc, #8]	; (800cd8c <realloc+0xc>)
 800cd82:	460a      	mov	r2, r1
 800cd84:	4601      	mov	r1, r0
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	f002 bffd 	b.w	800fd86 <_realloc_r>
 800cd8c:	20000018 	.word	0x20000018

0800cd90 <cleanup_glue>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	460c      	mov	r4, r1
 800cd94:	6809      	ldr	r1, [r1, #0]
 800cd96:	4605      	mov	r5, r0
 800cd98:	b109      	cbz	r1, 800cd9e <cleanup_glue+0xe>
 800cd9a:	f7ff fff9 	bl	800cd90 <cleanup_glue>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cda6:	f7ff b891 	b.w	800becc <_free_r>
	...

0800cdac <_reclaim_reent>:
 800cdac:	4b2c      	ldr	r3, [pc, #176]	; (800ce60 <_reclaim_reent+0xb4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4283      	cmp	r3, r0
 800cdb2:	b570      	push	{r4, r5, r6, lr}
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	d051      	beq.n	800ce5c <_reclaim_reent+0xb0>
 800cdb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cdba:	b143      	cbz	r3, 800cdce <_reclaim_reent+0x22>
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d14a      	bne.n	800ce58 <_reclaim_reent+0xac>
 800cdc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdc4:	6819      	ldr	r1, [r3, #0]
 800cdc6:	b111      	cbz	r1, 800cdce <_reclaim_reent+0x22>
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f7ff f87f 	bl	800becc <_free_r>
 800cdce:	6961      	ldr	r1, [r4, #20]
 800cdd0:	b111      	cbz	r1, 800cdd8 <_reclaim_reent+0x2c>
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	f7ff f87a 	bl	800becc <_free_r>
 800cdd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cdda:	b111      	cbz	r1, 800cde2 <_reclaim_reent+0x36>
 800cddc:	4620      	mov	r0, r4
 800cdde:	f7ff f875 	bl	800becc <_free_r>
 800cde2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cde4:	b111      	cbz	r1, 800cdec <_reclaim_reent+0x40>
 800cde6:	4620      	mov	r0, r4
 800cde8:	f7ff f870 	bl	800becc <_free_r>
 800cdec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cdee:	b111      	cbz	r1, 800cdf6 <_reclaim_reent+0x4a>
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f7ff f86b 	bl	800becc <_free_r>
 800cdf6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cdf8:	b111      	cbz	r1, 800ce00 <_reclaim_reent+0x54>
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f7ff f866 	bl	800becc <_free_r>
 800ce00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ce02:	b111      	cbz	r1, 800ce0a <_reclaim_reent+0x5e>
 800ce04:	4620      	mov	r0, r4
 800ce06:	f7ff f861 	bl	800becc <_free_r>
 800ce0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ce0c:	b111      	cbz	r1, 800ce14 <_reclaim_reent+0x68>
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f7ff f85c 	bl	800becc <_free_r>
 800ce14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce16:	b111      	cbz	r1, 800ce1e <_reclaim_reent+0x72>
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f7ff f857 	bl	800becc <_free_r>
 800ce1e:	69a3      	ldr	r3, [r4, #24]
 800ce20:	b1e3      	cbz	r3, 800ce5c <_reclaim_reent+0xb0>
 800ce22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce24:	4620      	mov	r0, r4
 800ce26:	4798      	blx	r3
 800ce28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ce2a:	b1b9      	cbz	r1, 800ce5c <_reclaim_reent+0xb0>
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce32:	f7ff bfad 	b.w	800cd90 <cleanup_glue>
 800ce36:	5949      	ldr	r1, [r1, r5]
 800ce38:	b941      	cbnz	r1, 800ce4c <_reclaim_reent+0xa0>
 800ce3a:	3504      	adds	r5, #4
 800ce3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce3e:	2d80      	cmp	r5, #128	; 0x80
 800ce40:	68d9      	ldr	r1, [r3, #12]
 800ce42:	d1f8      	bne.n	800ce36 <_reclaim_reent+0x8a>
 800ce44:	4620      	mov	r0, r4
 800ce46:	f7ff f841 	bl	800becc <_free_r>
 800ce4a:	e7ba      	b.n	800cdc2 <_reclaim_reent+0x16>
 800ce4c:	680e      	ldr	r6, [r1, #0]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f7ff f83c 	bl	800becc <_free_r>
 800ce54:	4631      	mov	r1, r6
 800ce56:	e7ef      	b.n	800ce38 <_reclaim_reent+0x8c>
 800ce58:	2500      	movs	r5, #0
 800ce5a:	e7ef      	b.n	800ce3c <_reclaim_reent+0x90>
 800ce5c:	bd70      	pop	{r4, r5, r6, pc}
 800ce5e:	bf00      	nop
 800ce60:	20000018 	.word	0x20000018

0800ce64 <_sbrk_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d06      	ldr	r5, [pc, #24]	; (800ce80 <_sbrk_r+0x1c>)
 800ce68:	2300      	movs	r3, #0
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	4608      	mov	r0, r1
 800ce6e:	602b      	str	r3, [r5, #0]
 800ce70:	f7f7 fdb0 	bl	80049d4 <_sbrk>
 800ce74:	1c43      	adds	r3, r0, #1
 800ce76:	d102      	bne.n	800ce7e <_sbrk_r+0x1a>
 800ce78:	682b      	ldr	r3, [r5, #0]
 800ce7a:	b103      	cbz	r3, 800ce7e <_sbrk_r+0x1a>
 800ce7c:	6023      	str	r3, [r4, #0]
 800ce7e:	bd38      	pop	{r3, r4, r5, pc}
 800ce80:	2000531c 	.word	0x2000531c

0800ce84 <nanf>:
 800ce84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ce8c <nanf+0x8>
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	7fc00000 	.word	0x7fc00000

0800ce90 <_raise_r>:
 800ce90:	291f      	cmp	r1, #31
 800ce92:	b538      	push	{r3, r4, r5, lr}
 800ce94:	4604      	mov	r4, r0
 800ce96:	460d      	mov	r5, r1
 800ce98:	d904      	bls.n	800cea4 <_raise_r+0x14>
 800ce9a:	2316      	movs	r3, #22
 800ce9c:	6003      	str	r3, [r0, #0]
 800ce9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cea6:	b112      	cbz	r2, 800ceae <_raise_r+0x1e>
 800cea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ceac:	b94b      	cbnz	r3, 800cec2 <_raise_r+0x32>
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 f830 	bl	800cf14 <_getpid_r>
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	4601      	mov	r1, r0
 800ceb8:	4620      	mov	r0, r4
 800ceba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cebe:	f000 b817 	b.w	800cef0 <_kill_r>
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d00a      	beq.n	800cedc <_raise_r+0x4c>
 800cec6:	1c59      	adds	r1, r3, #1
 800cec8:	d103      	bne.n	800ced2 <_raise_r+0x42>
 800ceca:	2316      	movs	r3, #22
 800cecc:	6003      	str	r3, [r0, #0]
 800cece:	2001      	movs	r0, #1
 800ced0:	e7e7      	b.n	800cea2 <_raise_r+0x12>
 800ced2:	2400      	movs	r4, #0
 800ced4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ced8:	4628      	mov	r0, r5
 800ceda:	4798      	blx	r3
 800cedc:	2000      	movs	r0, #0
 800cede:	e7e0      	b.n	800cea2 <_raise_r+0x12>

0800cee0 <raise>:
 800cee0:	4b02      	ldr	r3, [pc, #8]	; (800ceec <raise+0xc>)
 800cee2:	4601      	mov	r1, r0
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	f7ff bfd3 	b.w	800ce90 <_raise_r>
 800ceea:	bf00      	nop
 800ceec:	20000018 	.word	0x20000018

0800cef0 <_kill_r>:
 800cef0:	b538      	push	{r3, r4, r5, lr}
 800cef2:	4d07      	ldr	r5, [pc, #28]	; (800cf10 <_kill_r+0x20>)
 800cef4:	2300      	movs	r3, #0
 800cef6:	4604      	mov	r4, r0
 800cef8:	4608      	mov	r0, r1
 800cefa:	4611      	mov	r1, r2
 800cefc:	602b      	str	r3, [r5, #0]
 800cefe:	f7f7 fce1 	bl	80048c4 <_kill>
 800cf02:	1c43      	adds	r3, r0, #1
 800cf04:	d102      	bne.n	800cf0c <_kill_r+0x1c>
 800cf06:	682b      	ldr	r3, [r5, #0]
 800cf08:	b103      	cbz	r3, 800cf0c <_kill_r+0x1c>
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	bd38      	pop	{r3, r4, r5, pc}
 800cf0e:	bf00      	nop
 800cf10:	2000531c 	.word	0x2000531c

0800cf14 <_getpid_r>:
 800cf14:	f7f7 bcce 	b.w	80048b4 <_getpid>

0800cf18 <siprintf>:
 800cf18:	b40e      	push	{r1, r2, r3}
 800cf1a:	b500      	push	{lr}
 800cf1c:	b09c      	sub	sp, #112	; 0x70
 800cf1e:	ab1d      	add	r3, sp, #116	; 0x74
 800cf20:	9002      	str	r0, [sp, #8]
 800cf22:	9006      	str	r0, [sp, #24]
 800cf24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf28:	4809      	ldr	r0, [pc, #36]	; (800cf50 <siprintf+0x38>)
 800cf2a:	9107      	str	r1, [sp, #28]
 800cf2c:	9104      	str	r1, [sp, #16]
 800cf2e:	4909      	ldr	r1, [pc, #36]	; (800cf54 <siprintf+0x3c>)
 800cf30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf34:	9105      	str	r1, [sp, #20]
 800cf36:	6800      	ldr	r0, [r0, #0]
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	a902      	add	r1, sp, #8
 800cf3c:	f002 ffae 	bl	800fe9c <_svfiprintf_r>
 800cf40:	9b02      	ldr	r3, [sp, #8]
 800cf42:	2200      	movs	r2, #0
 800cf44:	701a      	strb	r2, [r3, #0]
 800cf46:	b01c      	add	sp, #112	; 0x70
 800cf48:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf4c:	b003      	add	sp, #12
 800cf4e:	4770      	bx	lr
 800cf50:	20000018 	.word	0x20000018
 800cf54:	ffff0208 	.word	0xffff0208

0800cf58 <__sread>:
 800cf58:	b510      	push	{r4, lr}
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf60:	f003 f89c 	bl	801009c <_read_r>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	bfab      	itete	ge
 800cf68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf6a:	89a3      	ldrhlt	r3, [r4, #12]
 800cf6c:	181b      	addge	r3, r3, r0
 800cf6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf72:	bfac      	ite	ge
 800cf74:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf76:	81a3      	strhlt	r3, [r4, #12]
 800cf78:	bd10      	pop	{r4, pc}

0800cf7a <__swrite>:
 800cf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7e:	461f      	mov	r7, r3
 800cf80:	898b      	ldrh	r3, [r1, #12]
 800cf82:	05db      	lsls	r3, r3, #23
 800cf84:	4605      	mov	r5, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	4616      	mov	r6, r2
 800cf8a:	d505      	bpl.n	800cf98 <__swrite+0x1e>
 800cf8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf90:	2302      	movs	r3, #2
 800cf92:	2200      	movs	r2, #0
 800cf94:	f002 f9f0 	bl	800f378 <_lseek_r>
 800cf98:	89a3      	ldrh	r3, [r4, #12]
 800cf9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfa2:	81a3      	strh	r3, [r4, #12]
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfae:	f000 bf11 	b.w	800ddd4 <_write_r>

0800cfb2 <__sseek>:
 800cfb2:	b510      	push	{r4, lr}
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfba:	f002 f9dd 	bl	800f378 <_lseek_r>
 800cfbe:	1c43      	adds	r3, r0, #1
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	bf15      	itete	ne
 800cfc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cfc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cfca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cfce:	81a3      	strheq	r3, [r4, #12]
 800cfd0:	bf18      	it	ne
 800cfd2:	81a3      	strhne	r3, [r4, #12]
 800cfd4:	bd10      	pop	{r4, pc}

0800cfd6 <__sclose>:
 800cfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfda:	f000 bf0d 	b.w	800ddf8 <_close_r>

0800cfde <strncmp>:
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	b17a      	cbz	r2, 800d002 <strncmp+0x24>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	3901      	subs	r1, #1
 800cfe6:	1884      	adds	r4, r0, r2
 800cfe8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cfec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cff0:	4290      	cmp	r0, r2
 800cff2:	d101      	bne.n	800cff8 <strncmp+0x1a>
 800cff4:	42a3      	cmp	r3, r4
 800cff6:	d101      	bne.n	800cffc <strncmp+0x1e>
 800cff8:	1a80      	subs	r0, r0, r2
 800cffa:	bd10      	pop	{r4, pc}
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d1f3      	bne.n	800cfe8 <strncmp+0xa>
 800d000:	e7fa      	b.n	800cff8 <strncmp+0x1a>
 800d002:	4610      	mov	r0, r2
 800d004:	e7f9      	b.n	800cffa <strncmp+0x1c>

0800d006 <sulp>:
 800d006:	b570      	push	{r4, r5, r6, lr}
 800d008:	4604      	mov	r4, r0
 800d00a:	460d      	mov	r5, r1
 800d00c:	ec45 4b10 	vmov	d0, r4, r5
 800d010:	4616      	mov	r6, r2
 800d012:	f002 fd53 	bl	800fabc <__ulp>
 800d016:	ec51 0b10 	vmov	r0, r1, d0
 800d01a:	b17e      	cbz	r6, 800d03c <sulp+0x36>
 800d01c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d024:	2b00      	cmp	r3, #0
 800d026:	dd09      	ble.n	800d03c <sulp+0x36>
 800d028:	051b      	lsls	r3, r3, #20
 800d02a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d02e:	2400      	movs	r4, #0
 800d030:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d034:	4622      	mov	r2, r4
 800d036:	462b      	mov	r3, r5
 800d038:	f7f3 fae6 	bl	8000608 <__aeabi_dmul>
 800d03c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d040 <_strtod_l>:
 800d040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	ed2d 8b02 	vpush	{d8}
 800d048:	b09d      	sub	sp, #116	; 0x74
 800d04a:	461f      	mov	r7, r3
 800d04c:	2300      	movs	r3, #0
 800d04e:	9318      	str	r3, [sp, #96]	; 0x60
 800d050:	4ba2      	ldr	r3, [pc, #648]	; (800d2dc <_strtod_l+0x29c>)
 800d052:	9213      	str	r2, [sp, #76]	; 0x4c
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	4604      	mov	r4, r0
 800d05a:	4618      	mov	r0, r3
 800d05c:	4688      	mov	r8, r1
 800d05e:	f7f3 f8bf 	bl	80001e0 <strlen>
 800d062:	f04f 0a00 	mov.w	sl, #0
 800d066:	4605      	mov	r5, r0
 800d068:	f04f 0b00 	mov.w	fp, #0
 800d06c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d072:	781a      	ldrb	r2, [r3, #0]
 800d074:	2a2b      	cmp	r2, #43	; 0x2b
 800d076:	d04e      	beq.n	800d116 <_strtod_l+0xd6>
 800d078:	d83b      	bhi.n	800d0f2 <_strtod_l+0xb2>
 800d07a:	2a0d      	cmp	r2, #13
 800d07c:	d834      	bhi.n	800d0e8 <_strtod_l+0xa8>
 800d07e:	2a08      	cmp	r2, #8
 800d080:	d834      	bhi.n	800d0ec <_strtod_l+0xac>
 800d082:	2a00      	cmp	r2, #0
 800d084:	d03e      	beq.n	800d104 <_strtod_l+0xc4>
 800d086:	2300      	movs	r3, #0
 800d088:	930a      	str	r3, [sp, #40]	; 0x28
 800d08a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d08c:	7833      	ldrb	r3, [r6, #0]
 800d08e:	2b30      	cmp	r3, #48	; 0x30
 800d090:	f040 80b0 	bne.w	800d1f4 <_strtod_l+0x1b4>
 800d094:	7873      	ldrb	r3, [r6, #1]
 800d096:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d09a:	2b58      	cmp	r3, #88	; 0x58
 800d09c:	d168      	bne.n	800d170 <_strtod_l+0x130>
 800d09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0a0:	9301      	str	r3, [sp, #4]
 800d0a2:	ab18      	add	r3, sp, #96	; 0x60
 800d0a4:	9702      	str	r7, [sp, #8]
 800d0a6:	9300      	str	r3, [sp, #0]
 800d0a8:	4a8d      	ldr	r2, [pc, #564]	; (800d2e0 <_strtod_l+0x2a0>)
 800d0aa:	ab19      	add	r3, sp, #100	; 0x64
 800d0ac:	a917      	add	r1, sp, #92	; 0x5c
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f001 fe56 	bl	800ed60 <__gethex>
 800d0b4:	f010 0707 	ands.w	r7, r0, #7
 800d0b8:	4605      	mov	r5, r0
 800d0ba:	d005      	beq.n	800d0c8 <_strtod_l+0x88>
 800d0bc:	2f06      	cmp	r7, #6
 800d0be:	d12c      	bne.n	800d11a <_strtod_l+0xda>
 800d0c0:	3601      	adds	r6, #1
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800d0c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	f040 8590 	bne.w	800dbf0 <_strtod_l+0xbb0>
 800d0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0d2:	b1eb      	cbz	r3, 800d110 <_strtod_l+0xd0>
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0da:	ec43 2b10 	vmov	d0, r2, r3
 800d0de:	b01d      	add	sp, #116	; 0x74
 800d0e0:	ecbd 8b02 	vpop	{d8}
 800d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e8:	2a20      	cmp	r2, #32
 800d0ea:	d1cc      	bne.n	800d086 <_strtod_l+0x46>
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0f0:	e7be      	b.n	800d070 <_strtod_l+0x30>
 800d0f2:	2a2d      	cmp	r2, #45	; 0x2d
 800d0f4:	d1c7      	bne.n	800d086 <_strtod_l+0x46>
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	920a      	str	r2, [sp, #40]	; 0x28
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1c2      	bne.n	800d08a <_strtod_l+0x4a>
 800d104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d106:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f040 856e 	bne.w	800dbec <_strtod_l+0xbac>
 800d110:	4652      	mov	r2, sl
 800d112:	465b      	mov	r3, fp
 800d114:	e7e1      	b.n	800d0da <_strtod_l+0x9a>
 800d116:	2200      	movs	r2, #0
 800d118:	e7ee      	b.n	800d0f8 <_strtod_l+0xb8>
 800d11a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d11c:	b13a      	cbz	r2, 800d12e <_strtod_l+0xee>
 800d11e:	2135      	movs	r1, #53	; 0x35
 800d120:	a81a      	add	r0, sp, #104	; 0x68
 800d122:	f002 fdd6 	bl	800fcd2 <__copybits>
 800d126:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d128:	4620      	mov	r0, r4
 800d12a:	f002 f995 	bl	800f458 <_Bfree>
 800d12e:	3f01      	subs	r7, #1
 800d130:	2f04      	cmp	r7, #4
 800d132:	d806      	bhi.n	800d142 <_strtod_l+0x102>
 800d134:	e8df f007 	tbb	[pc, r7]
 800d138:	1714030a 	.word	0x1714030a
 800d13c:	0a          	.byte	0x0a
 800d13d:	00          	.byte	0x00
 800d13e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d142:	0728      	lsls	r0, r5, #28
 800d144:	d5c0      	bpl.n	800d0c8 <_strtod_l+0x88>
 800d146:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d14a:	e7bd      	b.n	800d0c8 <_strtod_l+0x88>
 800d14c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d150:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d152:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d156:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d15a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d15e:	e7f0      	b.n	800d142 <_strtod_l+0x102>
 800d160:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d2e4 <_strtod_l+0x2a4>
 800d164:	e7ed      	b.n	800d142 <_strtod_l+0x102>
 800d166:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d16a:	f04f 3aff 	mov.w	sl, #4294967295
 800d16e:	e7e8      	b.n	800d142 <_strtod_l+0x102>
 800d170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	9217      	str	r2, [sp, #92]	; 0x5c
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	2b30      	cmp	r3, #48	; 0x30
 800d17a:	d0f9      	beq.n	800d170 <_strtod_l+0x130>
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d0a3      	beq.n	800d0c8 <_strtod_l+0x88>
 800d180:	2301      	movs	r3, #1
 800d182:	f04f 0900 	mov.w	r9, #0
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d18a:	9308      	str	r3, [sp, #32]
 800d18c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d190:	464f      	mov	r7, r9
 800d192:	220a      	movs	r2, #10
 800d194:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d196:	7806      	ldrb	r6, [r0, #0]
 800d198:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d19c:	b2d9      	uxtb	r1, r3
 800d19e:	2909      	cmp	r1, #9
 800d1a0:	d92a      	bls.n	800d1f8 <_strtod_l+0x1b8>
 800d1a2:	9905      	ldr	r1, [sp, #20]
 800d1a4:	462a      	mov	r2, r5
 800d1a6:	f7ff ff1a 	bl	800cfde <strncmp>
 800d1aa:	b398      	cbz	r0, 800d214 <_strtod_l+0x1d4>
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	4632      	mov	r2, r6
 800d1b0:	463d      	mov	r5, r7
 800d1b2:	9005      	str	r0, [sp, #20]
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2a65      	cmp	r2, #101	; 0x65
 800d1b8:	d001      	beq.n	800d1be <_strtod_l+0x17e>
 800d1ba:	2a45      	cmp	r2, #69	; 0x45
 800d1bc:	d118      	bne.n	800d1f0 <_strtod_l+0x1b0>
 800d1be:	b91d      	cbnz	r5, 800d1c8 <_strtod_l+0x188>
 800d1c0:	9a04      	ldr	r2, [sp, #16]
 800d1c2:	4302      	orrs	r2, r0
 800d1c4:	d09e      	beq.n	800d104 <_strtod_l+0xc4>
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d1cc:	f108 0201 	add.w	r2, r8, #1
 800d1d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d1d6:	2a2b      	cmp	r2, #43	; 0x2b
 800d1d8:	d075      	beq.n	800d2c6 <_strtod_l+0x286>
 800d1da:	2a2d      	cmp	r2, #45	; 0x2d
 800d1dc:	d07b      	beq.n	800d2d6 <_strtod_l+0x296>
 800d1de:	f04f 0c00 	mov.w	ip, #0
 800d1e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d1e6:	2909      	cmp	r1, #9
 800d1e8:	f240 8082 	bls.w	800d2f0 <_strtod_l+0x2b0>
 800d1ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d1f0:	2600      	movs	r6, #0
 800d1f2:	e09d      	b.n	800d330 <_strtod_l+0x2f0>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	e7c4      	b.n	800d182 <_strtod_l+0x142>
 800d1f8:	2f08      	cmp	r7, #8
 800d1fa:	bfd8      	it	le
 800d1fc:	9907      	ldrle	r1, [sp, #28]
 800d1fe:	f100 0001 	add.w	r0, r0, #1
 800d202:	bfda      	itte	le
 800d204:	fb02 3301 	mlale	r3, r2, r1, r3
 800d208:	9307      	strle	r3, [sp, #28]
 800d20a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d20e:	3701      	adds	r7, #1
 800d210:	9017      	str	r0, [sp, #92]	; 0x5c
 800d212:	e7bf      	b.n	800d194 <_strtod_l+0x154>
 800d214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d216:	195a      	adds	r2, r3, r5
 800d218:	9217      	str	r2, [sp, #92]	; 0x5c
 800d21a:	5d5a      	ldrb	r2, [r3, r5]
 800d21c:	2f00      	cmp	r7, #0
 800d21e:	d037      	beq.n	800d290 <_strtod_l+0x250>
 800d220:	9005      	str	r0, [sp, #20]
 800d222:	463d      	mov	r5, r7
 800d224:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d228:	2b09      	cmp	r3, #9
 800d22a:	d912      	bls.n	800d252 <_strtod_l+0x212>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e7c2      	b.n	800d1b6 <_strtod_l+0x176>
 800d230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	9217      	str	r2, [sp, #92]	; 0x5c
 800d236:	785a      	ldrb	r2, [r3, #1]
 800d238:	3001      	adds	r0, #1
 800d23a:	2a30      	cmp	r2, #48	; 0x30
 800d23c:	d0f8      	beq.n	800d230 <_strtod_l+0x1f0>
 800d23e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d242:	2b08      	cmp	r3, #8
 800d244:	f200 84d9 	bhi.w	800dbfa <_strtod_l+0xbba>
 800d248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d24a:	9005      	str	r0, [sp, #20]
 800d24c:	2000      	movs	r0, #0
 800d24e:	9308      	str	r3, [sp, #32]
 800d250:	4605      	mov	r5, r0
 800d252:	3a30      	subs	r2, #48	; 0x30
 800d254:	f100 0301 	add.w	r3, r0, #1
 800d258:	d014      	beq.n	800d284 <_strtod_l+0x244>
 800d25a:	9905      	ldr	r1, [sp, #20]
 800d25c:	4419      	add	r1, r3
 800d25e:	9105      	str	r1, [sp, #20]
 800d260:	462b      	mov	r3, r5
 800d262:	eb00 0e05 	add.w	lr, r0, r5
 800d266:	210a      	movs	r1, #10
 800d268:	4573      	cmp	r3, lr
 800d26a:	d113      	bne.n	800d294 <_strtod_l+0x254>
 800d26c:	182b      	adds	r3, r5, r0
 800d26e:	2b08      	cmp	r3, #8
 800d270:	f105 0501 	add.w	r5, r5, #1
 800d274:	4405      	add	r5, r0
 800d276:	dc1c      	bgt.n	800d2b2 <_strtod_l+0x272>
 800d278:	9907      	ldr	r1, [sp, #28]
 800d27a:	230a      	movs	r3, #10
 800d27c:	fb03 2301 	mla	r3, r3, r1, r2
 800d280:	9307      	str	r3, [sp, #28]
 800d282:	2300      	movs	r3, #0
 800d284:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d286:	1c51      	adds	r1, r2, #1
 800d288:	9117      	str	r1, [sp, #92]	; 0x5c
 800d28a:	7852      	ldrb	r2, [r2, #1]
 800d28c:	4618      	mov	r0, r3
 800d28e:	e7c9      	b.n	800d224 <_strtod_l+0x1e4>
 800d290:	4638      	mov	r0, r7
 800d292:	e7d2      	b.n	800d23a <_strtod_l+0x1fa>
 800d294:	2b08      	cmp	r3, #8
 800d296:	dc04      	bgt.n	800d2a2 <_strtod_l+0x262>
 800d298:	9e07      	ldr	r6, [sp, #28]
 800d29a:	434e      	muls	r6, r1
 800d29c:	9607      	str	r6, [sp, #28]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	e7e2      	b.n	800d268 <_strtod_l+0x228>
 800d2a2:	f103 0c01 	add.w	ip, r3, #1
 800d2a6:	f1bc 0f10 	cmp.w	ip, #16
 800d2aa:	bfd8      	it	le
 800d2ac:	fb01 f909 	mulle.w	r9, r1, r9
 800d2b0:	e7f5      	b.n	800d29e <_strtod_l+0x25e>
 800d2b2:	2d10      	cmp	r5, #16
 800d2b4:	bfdc      	itt	le
 800d2b6:	230a      	movle	r3, #10
 800d2b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d2bc:	e7e1      	b.n	800d282 <_strtod_l+0x242>
 800d2be:	2300      	movs	r3, #0
 800d2c0:	9305      	str	r3, [sp, #20]
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e77c      	b.n	800d1c0 <_strtod_l+0x180>
 800d2c6:	f04f 0c00 	mov.w	ip, #0
 800d2ca:	f108 0202 	add.w	r2, r8, #2
 800d2ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800d2d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d2d4:	e785      	b.n	800d1e2 <_strtod_l+0x1a2>
 800d2d6:	f04f 0c01 	mov.w	ip, #1
 800d2da:	e7f6      	b.n	800d2ca <_strtod_l+0x28a>
 800d2dc:	080110d8 	.word	0x080110d8
 800d2e0:	08010e90 	.word	0x08010e90
 800d2e4:	7ff00000 	.word	0x7ff00000
 800d2e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d2ea:	1c51      	adds	r1, r2, #1
 800d2ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800d2ee:	7852      	ldrb	r2, [r2, #1]
 800d2f0:	2a30      	cmp	r2, #48	; 0x30
 800d2f2:	d0f9      	beq.n	800d2e8 <_strtod_l+0x2a8>
 800d2f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d2f8:	2908      	cmp	r1, #8
 800d2fa:	f63f af79 	bhi.w	800d1f0 <_strtod_l+0x1b0>
 800d2fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d304:	9206      	str	r2, [sp, #24]
 800d306:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d308:	1c51      	adds	r1, r2, #1
 800d30a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d30c:	7852      	ldrb	r2, [r2, #1]
 800d30e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d312:	2e09      	cmp	r6, #9
 800d314:	d937      	bls.n	800d386 <_strtod_l+0x346>
 800d316:	9e06      	ldr	r6, [sp, #24]
 800d318:	1b89      	subs	r1, r1, r6
 800d31a:	2908      	cmp	r1, #8
 800d31c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d320:	dc02      	bgt.n	800d328 <_strtod_l+0x2e8>
 800d322:	4576      	cmp	r6, lr
 800d324:	bfa8      	it	ge
 800d326:	4676      	movge	r6, lr
 800d328:	f1bc 0f00 	cmp.w	ip, #0
 800d32c:	d000      	beq.n	800d330 <_strtod_l+0x2f0>
 800d32e:	4276      	negs	r6, r6
 800d330:	2d00      	cmp	r5, #0
 800d332:	d14d      	bne.n	800d3d0 <_strtod_l+0x390>
 800d334:	9904      	ldr	r1, [sp, #16]
 800d336:	4301      	orrs	r1, r0
 800d338:	f47f aec6 	bne.w	800d0c8 <_strtod_l+0x88>
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f47f aee1 	bne.w	800d104 <_strtod_l+0xc4>
 800d342:	2a69      	cmp	r2, #105	; 0x69
 800d344:	d027      	beq.n	800d396 <_strtod_l+0x356>
 800d346:	dc24      	bgt.n	800d392 <_strtod_l+0x352>
 800d348:	2a49      	cmp	r2, #73	; 0x49
 800d34a:	d024      	beq.n	800d396 <_strtod_l+0x356>
 800d34c:	2a4e      	cmp	r2, #78	; 0x4e
 800d34e:	f47f aed9 	bne.w	800d104 <_strtod_l+0xc4>
 800d352:	499f      	ldr	r1, [pc, #636]	; (800d5d0 <_strtod_l+0x590>)
 800d354:	a817      	add	r0, sp, #92	; 0x5c
 800d356:	f001 ff5b 	bl	800f210 <__match>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f43f aed2 	beq.w	800d104 <_strtod_l+0xc4>
 800d360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b28      	cmp	r3, #40	; 0x28
 800d366:	d12d      	bne.n	800d3c4 <_strtod_l+0x384>
 800d368:	499a      	ldr	r1, [pc, #616]	; (800d5d4 <_strtod_l+0x594>)
 800d36a:	aa1a      	add	r2, sp, #104	; 0x68
 800d36c:	a817      	add	r0, sp, #92	; 0x5c
 800d36e:	f001 ff63 	bl	800f238 <__hexnan>
 800d372:	2805      	cmp	r0, #5
 800d374:	d126      	bne.n	800d3c4 <_strtod_l+0x384>
 800d376:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d378:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d37c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d380:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d384:	e6a0      	b.n	800d0c8 <_strtod_l+0x88>
 800d386:	210a      	movs	r1, #10
 800d388:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d38c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d390:	e7b9      	b.n	800d306 <_strtod_l+0x2c6>
 800d392:	2a6e      	cmp	r2, #110	; 0x6e
 800d394:	e7db      	b.n	800d34e <_strtod_l+0x30e>
 800d396:	4990      	ldr	r1, [pc, #576]	; (800d5d8 <_strtod_l+0x598>)
 800d398:	a817      	add	r0, sp, #92	; 0x5c
 800d39a:	f001 ff39 	bl	800f210 <__match>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	f43f aeb0 	beq.w	800d104 <_strtod_l+0xc4>
 800d3a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3a6:	498d      	ldr	r1, [pc, #564]	; (800d5dc <_strtod_l+0x59c>)
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	a817      	add	r0, sp, #92	; 0x5c
 800d3ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ae:	f001 ff2f 	bl	800f210 <__match>
 800d3b2:	b910      	cbnz	r0, 800d3ba <_strtod_l+0x37a>
 800d3b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d5ec <_strtod_l+0x5ac>
 800d3be:	f04f 0a00 	mov.w	sl, #0
 800d3c2:	e681      	b.n	800d0c8 <_strtod_l+0x88>
 800d3c4:	4886      	ldr	r0, [pc, #536]	; (800d5e0 <_strtod_l+0x5a0>)
 800d3c6:	f002 fe7b 	bl	80100c0 <nan>
 800d3ca:	ec5b ab10 	vmov	sl, fp, d0
 800d3ce:	e67b      	b.n	800d0c8 <_strtod_l+0x88>
 800d3d0:	9b05      	ldr	r3, [sp, #20]
 800d3d2:	9807      	ldr	r0, [sp, #28]
 800d3d4:	1af3      	subs	r3, r6, r3
 800d3d6:	2f00      	cmp	r7, #0
 800d3d8:	bf08      	it	eq
 800d3da:	462f      	moveq	r7, r5
 800d3dc:	2d10      	cmp	r5, #16
 800d3de:	9306      	str	r3, [sp, #24]
 800d3e0:	46a8      	mov	r8, r5
 800d3e2:	bfa8      	it	ge
 800d3e4:	f04f 0810 	movge.w	r8, #16
 800d3e8:	f7f3 f894 	bl	8000514 <__aeabi_ui2d>
 800d3ec:	2d09      	cmp	r5, #9
 800d3ee:	4682      	mov	sl, r0
 800d3f0:	468b      	mov	fp, r1
 800d3f2:	dd13      	ble.n	800d41c <_strtod_l+0x3dc>
 800d3f4:	4b7b      	ldr	r3, [pc, #492]	; (800d5e4 <_strtod_l+0x5a4>)
 800d3f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d3fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d3fe:	f7f3 f903 	bl	8000608 <__aeabi_dmul>
 800d402:	4682      	mov	sl, r0
 800d404:	4648      	mov	r0, r9
 800d406:	468b      	mov	fp, r1
 800d408:	f7f3 f884 	bl	8000514 <__aeabi_ui2d>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4650      	mov	r0, sl
 800d412:	4659      	mov	r1, fp
 800d414:	f7f2 ff42 	bl	800029c <__adddf3>
 800d418:	4682      	mov	sl, r0
 800d41a:	468b      	mov	fp, r1
 800d41c:	2d0f      	cmp	r5, #15
 800d41e:	dc38      	bgt.n	800d492 <_strtod_l+0x452>
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	2b00      	cmp	r3, #0
 800d424:	f43f ae50 	beq.w	800d0c8 <_strtod_l+0x88>
 800d428:	dd24      	ble.n	800d474 <_strtod_l+0x434>
 800d42a:	2b16      	cmp	r3, #22
 800d42c:	dc0b      	bgt.n	800d446 <_strtod_l+0x406>
 800d42e:	496d      	ldr	r1, [pc, #436]	; (800d5e4 <_strtod_l+0x5a4>)
 800d430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d434:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d438:	4652      	mov	r2, sl
 800d43a:	465b      	mov	r3, fp
 800d43c:	f7f3 f8e4 	bl	8000608 <__aeabi_dmul>
 800d440:	4682      	mov	sl, r0
 800d442:	468b      	mov	fp, r1
 800d444:	e640      	b.n	800d0c8 <_strtod_l+0x88>
 800d446:	9a06      	ldr	r2, [sp, #24]
 800d448:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d44c:	4293      	cmp	r3, r2
 800d44e:	db20      	blt.n	800d492 <_strtod_l+0x452>
 800d450:	4c64      	ldr	r4, [pc, #400]	; (800d5e4 <_strtod_l+0x5a4>)
 800d452:	f1c5 050f 	rsb	r5, r5, #15
 800d456:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d45a:	4652      	mov	r2, sl
 800d45c:	465b      	mov	r3, fp
 800d45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d462:	f7f3 f8d1 	bl	8000608 <__aeabi_dmul>
 800d466:	9b06      	ldr	r3, [sp, #24]
 800d468:	1b5d      	subs	r5, r3, r5
 800d46a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d46e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d472:	e7e3      	b.n	800d43c <_strtod_l+0x3fc>
 800d474:	9b06      	ldr	r3, [sp, #24]
 800d476:	3316      	adds	r3, #22
 800d478:	db0b      	blt.n	800d492 <_strtod_l+0x452>
 800d47a:	9b05      	ldr	r3, [sp, #20]
 800d47c:	1b9e      	subs	r6, r3, r6
 800d47e:	4b59      	ldr	r3, [pc, #356]	; (800d5e4 <_strtod_l+0x5a4>)
 800d480:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d484:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d488:	4650      	mov	r0, sl
 800d48a:	4659      	mov	r1, fp
 800d48c:	f7f3 f9e6 	bl	800085c <__aeabi_ddiv>
 800d490:	e7d6      	b.n	800d440 <_strtod_l+0x400>
 800d492:	9b06      	ldr	r3, [sp, #24]
 800d494:	eba5 0808 	sub.w	r8, r5, r8
 800d498:	4498      	add	r8, r3
 800d49a:	f1b8 0f00 	cmp.w	r8, #0
 800d49e:	dd74      	ble.n	800d58a <_strtod_l+0x54a>
 800d4a0:	f018 030f 	ands.w	r3, r8, #15
 800d4a4:	d00a      	beq.n	800d4bc <_strtod_l+0x47c>
 800d4a6:	494f      	ldr	r1, [pc, #316]	; (800d5e4 <_strtod_l+0x5a4>)
 800d4a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d4ac:	4652      	mov	r2, sl
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4b4:	f7f3 f8a8 	bl	8000608 <__aeabi_dmul>
 800d4b8:	4682      	mov	sl, r0
 800d4ba:	468b      	mov	fp, r1
 800d4bc:	f038 080f 	bics.w	r8, r8, #15
 800d4c0:	d04f      	beq.n	800d562 <_strtod_l+0x522>
 800d4c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d4c6:	dd22      	ble.n	800d50e <_strtod_l+0x4ce>
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	462e      	mov	r6, r5
 800d4cc:	9507      	str	r5, [sp, #28]
 800d4ce:	9505      	str	r5, [sp, #20]
 800d4d0:	2322      	movs	r3, #34	; 0x22
 800d4d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d5ec <_strtod_l+0x5ac>
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	f04f 0a00 	mov.w	sl, #0
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f43f adf2 	beq.w	800d0c8 <_strtod_l+0x88>
 800d4e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f001 ffb6 	bl	800f458 <_Bfree>
 800d4ec:	9905      	ldr	r1, [sp, #20]
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f001 ffb2 	bl	800f458 <_Bfree>
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f001 ffae 	bl	800f458 <_Bfree>
 800d4fc:	9907      	ldr	r1, [sp, #28]
 800d4fe:	4620      	mov	r0, r4
 800d500:	f001 ffaa 	bl	800f458 <_Bfree>
 800d504:	4629      	mov	r1, r5
 800d506:	4620      	mov	r0, r4
 800d508:	f001 ffa6 	bl	800f458 <_Bfree>
 800d50c:	e5dc      	b.n	800d0c8 <_strtod_l+0x88>
 800d50e:	4b36      	ldr	r3, [pc, #216]	; (800d5e8 <_strtod_l+0x5a8>)
 800d510:	9304      	str	r3, [sp, #16]
 800d512:	2300      	movs	r3, #0
 800d514:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d518:	4650      	mov	r0, sl
 800d51a:	4659      	mov	r1, fp
 800d51c:	4699      	mov	r9, r3
 800d51e:	f1b8 0f01 	cmp.w	r8, #1
 800d522:	dc21      	bgt.n	800d568 <_strtod_l+0x528>
 800d524:	b10b      	cbz	r3, 800d52a <_strtod_l+0x4ea>
 800d526:	4682      	mov	sl, r0
 800d528:	468b      	mov	fp, r1
 800d52a:	4b2f      	ldr	r3, [pc, #188]	; (800d5e8 <_strtod_l+0x5a8>)
 800d52c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d530:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d534:	4652      	mov	r2, sl
 800d536:	465b      	mov	r3, fp
 800d538:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d53c:	f7f3 f864 	bl	8000608 <__aeabi_dmul>
 800d540:	4b2a      	ldr	r3, [pc, #168]	; (800d5ec <_strtod_l+0x5ac>)
 800d542:	460a      	mov	r2, r1
 800d544:	400b      	ands	r3, r1
 800d546:	492a      	ldr	r1, [pc, #168]	; (800d5f0 <_strtod_l+0x5b0>)
 800d548:	428b      	cmp	r3, r1
 800d54a:	4682      	mov	sl, r0
 800d54c:	d8bc      	bhi.n	800d4c8 <_strtod_l+0x488>
 800d54e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d552:	428b      	cmp	r3, r1
 800d554:	bf86      	itte	hi
 800d556:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d5f4 <_strtod_l+0x5b4>
 800d55a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d55e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d562:	2300      	movs	r3, #0
 800d564:	9304      	str	r3, [sp, #16]
 800d566:	e084      	b.n	800d672 <_strtod_l+0x632>
 800d568:	f018 0f01 	tst.w	r8, #1
 800d56c:	d005      	beq.n	800d57a <_strtod_l+0x53a>
 800d56e:	9b04      	ldr	r3, [sp, #16]
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f3 f848 	bl	8000608 <__aeabi_dmul>
 800d578:	2301      	movs	r3, #1
 800d57a:	9a04      	ldr	r2, [sp, #16]
 800d57c:	3208      	adds	r2, #8
 800d57e:	f109 0901 	add.w	r9, r9, #1
 800d582:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d586:	9204      	str	r2, [sp, #16]
 800d588:	e7c9      	b.n	800d51e <_strtod_l+0x4de>
 800d58a:	d0ea      	beq.n	800d562 <_strtod_l+0x522>
 800d58c:	f1c8 0800 	rsb	r8, r8, #0
 800d590:	f018 020f 	ands.w	r2, r8, #15
 800d594:	d00a      	beq.n	800d5ac <_strtod_l+0x56c>
 800d596:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <_strtod_l+0x5a4>)
 800d598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d59c:	4650      	mov	r0, sl
 800d59e:	4659      	mov	r1, fp
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f7f3 f95a 	bl	800085c <__aeabi_ddiv>
 800d5a8:	4682      	mov	sl, r0
 800d5aa:	468b      	mov	fp, r1
 800d5ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5b0:	d0d7      	beq.n	800d562 <_strtod_l+0x522>
 800d5b2:	f1b8 0f1f 	cmp.w	r8, #31
 800d5b6:	dd1f      	ble.n	800d5f8 <_strtod_l+0x5b8>
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	462e      	mov	r6, r5
 800d5bc:	9507      	str	r5, [sp, #28]
 800d5be:	9505      	str	r5, [sp, #20]
 800d5c0:	2322      	movs	r3, #34	; 0x22
 800d5c2:	f04f 0a00 	mov.w	sl, #0
 800d5c6:	f04f 0b00 	mov.w	fp, #0
 800d5ca:	6023      	str	r3, [r4, #0]
 800d5cc:	e786      	b.n	800d4dc <_strtod_l+0x49c>
 800d5ce:	bf00      	nop
 800d5d0:	08010e61 	.word	0x08010e61
 800d5d4:	08010ea4 	.word	0x08010ea4
 800d5d8:	08010e59 	.word	0x08010e59
 800d5dc:	08010fe4 	.word	0x08010fe4
 800d5e0:	08011290 	.word	0x08011290
 800d5e4:	08011170 	.word	0x08011170
 800d5e8:	08011148 	.word	0x08011148
 800d5ec:	7ff00000 	.word	0x7ff00000
 800d5f0:	7ca00000 	.word	0x7ca00000
 800d5f4:	7fefffff 	.word	0x7fefffff
 800d5f8:	f018 0310 	ands.w	r3, r8, #16
 800d5fc:	bf18      	it	ne
 800d5fe:	236a      	movne	r3, #106	; 0x6a
 800d600:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d9b0 <_strtod_l+0x970>
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	4650      	mov	r0, sl
 800d608:	4659      	mov	r1, fp
 800d60a:	2300      	movs	r3, #0
 800d60c:	f018 0f01 	tst.w	r8, #1
 800d610:	d004      	beq.n	800d61c <_strtod_l+0x5dc>
 800d612:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d616:	f7f2 fff7 	bl	8000608 <__aeabi_dmul>
 800d61a:	2301      	movs	r3, #1
 800d61c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d620:	f109 0908 	add.w	r9, r9, #8
 800d624:	d1f2      	bne.n	800d60c <_strtod_l+0x5cc>
 800d626:	b10b      	cbz	r3, 800d62c <_strtod_l+0x5ec>
 800d628:	4682      	mov	sl, r0
 800d62a:	468b      	mov	fp, r1
 800d62c:	9b04      	ldr	r3, [sp, #16]
 800d62e:	b1c3      	cbz	r3, 800d662 <_strtod_l+0x622>
 800d630:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d634:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d638:	2b00      	cmp	r3, #0
 800d63a:	4659      	mov	r1, fp
 800d63c:	dd11      	ble.n	800d662 <_strtod_l+0x622>
 800d63e:	2b1f      	cmp	r3, #31
 800d640:	f340 8124 	ble.w	800d88c <_strtod_l+0x84c>
 800d644:	2b34      	cmp	r3, #52	; 0x34
 800d646:	bfde      	ittt	le
 800d648:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d64c:	f04f 33ff 	movle.w	r3, #4294967295
 800d650:	fa03 f202 	lslle.w	r2, r3, r2
 800d654:	f04f 0a00 	mov.w	sl, #0
 800d658:	bfcc      	ite	gt
 800d65a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d65e:	ea02 0b01 	andle.w	fp, r2, r1
 800d662:	2200      	movs	r2, #0
 800d664:	2300      	movs	r3, #0
 800d666:	4650      	mov	r0, sl
 800d668:	4659      	mov	r1, fp
 800d66a:	f7f3 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d1a2      	bne.n	800d5b8 <_strtod_l+0x578>
 800d672:	9b07      	ldr	r3, [sp, #28]
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	9908      	ldr	r1, [sp, #32]
 800d678:	462b      	mov	r3, r5
 800d67a:	463a      	mov	r2, r7
 800d67c:	4620      	mov	r0, r4
 800d67e:	f001 ff53 	bl	800f528 <__s2b>
 800d682:	9007      	str	r0, [sp, #28]
 800d684:	2800      	cmp	r0, #0
 800d686:	f43f af1f 	beq.w	800d4c8 <_strtod_l+0x488>
 800d68a:	9b05      	ldr	r3, [sp, #20]
 800d68c:	1b9e      	subs	r6, r3, r6
 800d68e:	9b06      	ldr	r3, [sp, #24]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfb4      	ite	lt
 800d694:	4633      	movlt	r3, r6
 800d696:	2300      	movge	r3, #0
 800d698:	930c      	str	r3, [sp, #48]	; 0x30
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	2500      	movs	r5, #0
 800d69e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d6a2:	9312      	str	r3, [sp, #72]	; 0x48
 800d6a4:	462e      	mov	r6, r5
 800d6a6:	9b07      	ldr	r3, [sp, #28]
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	6859      	ldr	r1, [r3, #4]
 800d6ac:	f001 fe94 	bl	800f3d8 <_Balloc>
 800d6b0:	9005      	str	r0, [sp, #20]
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	f43f af0c 	beq.w	800d4d0 <_strtod_l+0x490>
 800d6b8:	9b07      	ldr	r3, [sp, #28]
 800d6ba:	691a      	ldr	r2, [r3, #16]
 800d6bc:	3202      	adds	r2, #2
 800d6be:	f103 010c 	add.w	r1, r3, #12
 800d6c2:	0092      	lsls	r2, r2, #2
 800d6c4:	300c      	adds	r0, #12
 800d6c6:	f7fe fbd1 	bl	800be6c <memcpy>
 800d6ca:	ec4b ab10 	vmov	d0, sl, fp
 800d6ce:	aa1a      	add	r2, sp, #104	; 0x68
 800d6d0:	a919      	add	r1, sp, #100	; 0x64
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f002 fa6e 	bl	800fbb4 <__d2b>
 800d6d8:	ec4b ab18 	vmov	d8, sl, fp
 800d6dc:	9018      	str	r0, [sp, #96]	; 0x60
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f aef6 	beq.w	800d4d0 <_strtod_l+0x490>
 800d6e4:	2101      	movs	r1, #1
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f001 ffb8 	bl	800f65c <__i2b>
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	f43f aeee 	beq.w	800d4d0 <_strtod_l+0x490>
 800d6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6f6:	9904      	ldr	r1, [sp, #16]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	bfab      	itete	ge
 800d6fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d6fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d700:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d702:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d706:	bfac      	ite	ge
 800d708:	eb03 0902 	addge.w	r9, r3, r2
 800d70c:	1ad7      	sublt	r7, r2, r3
 800d70e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d710:	eba3 0801 	sub.w	r8, r3, r1
 800d714:	4490      	add	r8, r2
 800d716:	4ba1      	ldr	r3, [pc, #644]	; (800d99c <_strtod_l+0x95c>)
 800d718:	f108 38ff 	add.w	r8, r8, #4294967295
 800d71c:	4598      	cmp	r8, r3
 800d71e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d722:	f280 80c7 	bge.w	800d8b4 <_strtod_l+0x874>
 800d726:	eba3 0308 	sub.w	r3, r3, r8
 800d72a:	2b1f      	cmp	r3, #31
 800d72c:	eba2 0203 	sub.w	r2, r2, r3
 800d730:	f04f 0101 	mov.w	r1, #1
 800d734:	f300 80b1 	bgt.w	800d89a <_strtod_l+0x85a>
 800d738:	fa01 f303 	lsl.w	r3, r1, r3
 800d73c:	930d      	str	r3, [sp, #52]	; 0x34
 800d73e:	2300      	movs	r3, #0
 800d740:	9308      	str	r3, [sp, #32]
 800d742:	eb09 0802 	add.w	r8, r9, r2
 800d746:	9b04      	ldr	r3, [sp, #16]
 800d748:	45c1      	cmp	r9, r8
 800d74a:	4417      	add	r7, r2
 800d74c:	441f      	add	r7, r3
 800d74e:	464b      	mov	r3, r9
 800d750:	bfa8      	it	ge
 800d752:	4643      	movge	r3, r8
 800d754:	42bb      	cmp	r3, r7
 800d756:	bfa8      	it	ge
 800d758:	463b      	movge	r3, r7
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfc2      	ittt	gt
 800d75e:	eba8 0803 	subgt.w	r8, r8, r3
 800d762:	1aff      	subgt	r7, r7, r3
 800d764:	eba9 0903 	subgt.w	r9, r9, r3
 800d768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	dd17      	ble.n	800d79e <_strtod_l+0x75e>
 800d76e:	4631      	mov	r1, r6
 800d770:	461a      	mov	r2, r3
 800d772:	4620      	mov	r0, r4
 800d774:	f002 f832 	bl	800f7dc <__pow5mult>
 800d778:	4606      	mov	r6, r0
 800d77a:	2800      	cmp	r0, #0
 800d77c:	f43f aea8 	beq.w	800d4d0 <_strtod_l+0x490>
 800d780:	4601      	mov	r1, r0
 800d782:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d784:	4620      	mov	r0, r4
 800d786:	f001 ff7f 	bl	800f688 <__multiply>
 800d78a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d78c:	2800      	cmp	r0, #0
 800d78e:	f43f ae9f 	beq.w	800d4d0 <_strtod_l+0x490>
 800d792:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d794:	4620      	mov	r0, r4
 800d796:	f001 fe5f 	bl	800f458 <_Bfree>
 800d79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d79c:	9318      	str	r3, [sp, #96]	; 0x60
 800d79e:	f1b8 0f00 	cmp.w	r8, #0
 800d7a2:	f300 808c 	bgt.w	800d8be <_strtod_l+0x87e>
 800d7a6:	9b06      	ldr	r3, [sp, #24]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dd08      	ble.n	800d7be <_strtod_l+0x77e>
 800d7ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7ae:	9905      	ldr	r1, [sp, #20]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f002 f813 	bl	800f7dc <__pow5mult>
 800d7b6:	9005      	str	r0, [sp, #20]
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	f43f ae89 	beq.w	800d4d0 <_strtod_l+0x490>
 800d7be:	2f00      	cmp	r7, #0
 800d7c0:	dd08      	ble.n	800d7d4 <_strtod_l+0x794>
 800d7c2:	9905      	ldr	r1, [sp, #20]
 800d7c4:	463a      	mov	r2, r7
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f002 f862 	bl	800f890 <__lshift>
 800d7cc:	9005      	str	r0, [sp, #20]
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	f43f ae7e 	beq.w	800d4d0 <_strtod_l+0x490>
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	dd08      	ble.n	800d7ec <_strtod_l+0x7ac>
 800d7da:	4631      	mov	r1, r6
 800d7dc:	464a      	mov	r2, r9
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f002 f856 	bl	800f890 <__lshift>
 800d7e4:	4606      	mov	r6, r0
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f43f ae72 	beq.w	800d4d0 <_strtod_l+0x490>
 800d7ec:	9a05      	ldr	r2, [sp, #20]
 800d7ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f002 f8d9 	bl	800f9a8 <__mdiff>
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	f43f ae69 	beq.w	800d4d0 <_strtod_l+0x490>
 800d7fe:	68c3      	ldr	r3, [r0, #12]
 800d800:	930b      	str	r3, [sp, #44]	; 0x2c
 800d802:	2300      	movs	r3, #0
 800d804:	60c3      	str	r3, [r0, #12]
 800d806:	4631      	mov	r1, r6
 800d808:	f002 f8b2 	bl	800f970 <__mcmp>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	da60      	bge.n	800d8d2 <_strtod_l+0x892>
 800d810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d812:	ea53 030a 	orrs.w	r3, r3, sl
 800d816:	f040 8082 	bne.w	800d91e <_strtod_l+0x8de>
 800d81a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d17d      	bne.n	800d91e <_strtod_l+0x8de>
 800d822:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d826:	0d1b      	lsrs	r3, r3, #20
 800d828:	051b      	lsls	r3, r3, #20
 800d82a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d82e:	d976      	bls.n	800d91e <_strtod_l+0x8de>
 800d830:	696b      	ldr	r3, [r5, #20]
 800d832:	b913      	cbnz	r3, 800d83a <_strtod_l+0x7fa>
 800d834:	692b      	ldr	r3, [r5, #16]
 800d836:	2b01      	cmp	r3, #1
 800d838:	dd71      	ble.n	800d91e <_strtod_l+0x8de>
 800d83a:	4629      	mov	r1, r5
 800d83c:	2201      	movs	r2, #1
 800d83e:	4620      	mov	r0, r4
 800d840:	f002 f826 	bl	800f890 <__lshift>
 800d844:	4631      	mov	r1, r6
 800d846:	4605      	mov	r5, r0
 800d848:	f002 f892 	bl	800f970 <__mcmp>
 800d84c:	2800      	cmp	r0, #0
 800d84e:	dd66      	ble.n	800d91e <_strtod_l+0x8de>
 800d850:	9904      	ldr	r1, [sp, #16]
 800d852:	4a53      	ldr	r2, [pc, #332]	; (800d9a0 <_strtod_l+0x960>)
 800d854:	465b      	mov	r3, fp
 800d856:	2900      	cmp	r1, #0
 800d858:	f000 8081 	beq.w	800d95e <_strtod_l+0x91e>
 800d85c:	ea02 010b 	and.w	r1, r2, fp
 800d860:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d864:	dc7b      	bgt.n	800d95e <_strtod_l+0x91e>
 800d866:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d86a:	f77f aea9 	ble.w	800d5c0 <_strtod_l+0x580>
 800d86e:	4b4d      	ldr	r3, [pc, #308]	; (800d9a4 <_strtod_l+0x964>)
 800d870:	4650      	mov	r0, sl
 800d872:	4659      	mov	r1, fp
 800d874:	2200      	movs	r2, #0
 800d876:	f7f2 fec7 	bl	8000608 <__aeabi_dmul>
 800d87a:	460b      	mov	r3, r1
 800d87c:	4303      	orrs	r3, r0
 800d87e:	bf08      	it	eq
 800d880:	2322      	moveq	r3, #34	; 0x22
 800d882:	4682      	mov	sl, r0
 800d884:	468b      	mov	fp, r1
 800d886:	bf08      	it	eq
 800d888:	6023      	streq	r3, [r4, #0]
 800d88a:	e62b      	b.n	800d4e4 <_strtod_l+0x4a4>
 800d88c:	f04f 32ff 	mov.w	r2, #4294967295
 800d890:	fa02 f303 	lsl.w	r3, r2, r3
 800d894:	ea03 0a0a 	and.w	sl, r3, sl
 800d898:	e6e3      	b.n	800d662 <_strtod_l+0x622>
 800d89a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d89e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d8a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d8a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d8aa:	fa01 f308 	lsl.w	r3, r1, r8
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	910d      	str	r1, [sp, #52]	; 0x34
 800d8b2:	e746      	b.n	800d742 <_strtod_l+0x702>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	9308      	str	r3, [sp, #32]
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d8bc:	e741      	b.n	800d742 <_strtod_l+0x702>
 800d8be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d8c0:	4642      	mov	r2, r8
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f001 ffe4 	bl	800f890 <__lshift>
 800d8c8:	9018      	str	r0, [sp, #96]	; 0x60
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	f47f af6b 	bne.w	800d7a6 <_strtod_l+0x766>
 800d8d0:	e5fe      	b.n	800d4d0 <_strtod_l+0x490>
 800d8d2:	465f      	mov	r7, fp
 800d8d4:	d16e      	bne.n	800d9b4 <_strtod_l+0x974>
 800d8d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8dc:	b342      	cbz	r2, 800d930 <_strtod_l+0x8f0>
 800d8de:	4a32      	ldr	r2, [pc, #200]	; (800d9a8 <_strtod_l+0x968>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d128      	bne.n	800d936 <_strtod_l+0x8f6>
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	4651      	mov	r1, sl
 800d8e8:	b1eb      	cbz	r3, 800d926 <_strtod_l+0x8e6>
 800d8ea:	4b2d      	ldr	r3, [pc, #180]	; (800d9a0 <_strtod_l+0x960>)
 800d8ec:	403b      	ands	r3, r7
 800d8ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8f6:	d819      	bhi.n	800d92c <_strtod_l+0x8ec>
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d902:	4299      	cmp	r1, r3
 800d904:	d117      	bne.n	800d936 <_strtod_l+0x8f6>
 800d906:	4b29      	ldr	r3, [pc, #164]	; (800d9ac <_strtod_l+0x96c>)
 800d908:	429f      	cmp	r7, r3
 800d90a:	d102      	bne.n	800d912 <_strtod_l+0x8d2>
 800d90c:	3101      	adds	r1, #1
 800d90e:	f43f addf 	beq.w	800d4d0 <_strtod_l+0x490>
 800d912:	4b23      	ldr	r3, [pc, #140]	; (800d9a0 <_strtod_l+0x960>)
 800d914:	403b      	ands	r3, r7
 800d916:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d91a:	f04f 0a00 	mov.w	sl, #0
 800d91e:	9b04      	ldr	r3, [sp, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d1a4      	bne.n	800d86e <_strtod_l+0x82e>
 800d924:	e5de      	b.n	800d4e4 <_strtod_l+0x4a4>
 800d926:	f04f 33ff 	mov.w	r3, #4294967295
 800d92a:	e7ea      	b.n	800d902 <_strtod_l+0x8c2>
 800d92c:	4613      	mov	r3, r2
 800d92e:	e7e8      	b.n	800d902 <_strtod_l+0x8c2>
 800d930:	ea53 030a 	orrs.w	r3, r3, sl
 800d934:	d08c      	beq.n	800d850 <_strtod_l+0x810>
 800d936:	9b08      	ldr	r3, [sp, #32]
 800d938:	b1db      	cbz	r3, 800d972 <_strtod_l+0x932>
 800d93a:	423b      	tst	r3, r7
 800d93c:	d0ef      	beq.n	800d91e <_strtod_l+0x8de>
 800d93e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d940:	9a04      	ldr	r2, [sp, #16]
 800d942:	4650      	mov	r0, sl
 800d944:	4659      	mov	r1, fp
 800d946:	b1c3      	cbz	r3, 800d97a <_strtod_l+0x93a>
 800d948:	f7ff fb5d 	bl	800d006 <sulp>
 800d94c:	4602      	mov	r2, r0
 800d94e:	460b      	mov	r3, r1
 800d950:	ec51 0b18 	vmov	r0, r1, d8
 800d954:	f7f2 fca2 	bl	800029c <__adddf3>
 800d958:	4682      	mov	sl, r0
 800d95a:	468b      	mov	fp, r1
 800d95c:	e7df      	b.n	800d91e <_strtod_l+0x8de>
 800d95e:	4013      	ands	r3, r2
 800d960:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d964:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d968:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d96c:	f04f 3aff 	mov.w	sl, #4294967295
 800d970:	e7d5      	b.n	800d91e <_strtod_l+0x8de>
 800d972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d974:	ea13 0f0a 	tst.w	r3, sl
 800d978:	e7e0      	b.n	800d93c <_strtod_l+0x8fc>
 800d97a:	f7ff fb44 	bl	800d006 <sulp>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	ec51 0b18 	vmov	r0, r1, d8
 800d986:	f7f2 fc87 	bl	8000298 <__aeabi_dsub>
 800d98a:	2200      	movs	r2, #0
 800d98c:	2300      	movs	r3, #0
 800d98e:	4682      	mov	sl, r0
 800d990:	468b      	mov	fp, r1
 800d992:	f7f3 f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d996:	2800      	cmp	r0, #0
 800d998:	d0c1      	beq.n	800d91e <_strtod_l+0x8de>
 800d99a:	e611      	b.n	800d5c0 <_strtod_l+0x580>
 800d99c:	fffffc02 	.word	0xfffffc02
 800d9a0:	7ff00000 	.word	0x7ff00000
 800d9a4:	39500000 	.word	0x39500000
 800d9a8:	000fffff 	.word	0x000fffff
 800d9ac:	7fefffff 	.word	0x7fefffff
 800d9b0:	08010eb8 	.word	0x08010eb8
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f002 f958 	bl	800fc6c <__ratio>
 800d9bc:	ec59 8b10 	vmov	r8, r9, d0
 800d9c0:	ee10 0a10 	vmov	r0, s0
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9ca:	4649      	mov	r1, r9
 800d9cc:	f7f3 f898 	bl	8000b00 <__aeabi_dcmple>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d07a      	beq.n	800daca <_strtod_l+0xa8a>
 800d9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d04a      	beq.n	800da70 <_strtod_l+0xa30>
 800d9da:	4b95      	ldr	r3, [pc, #596]	; (800dc30 <_strtod_l+0xbf0>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dc30 <_strtod_l+0xbf0>
 800d9e6:	f04f 0800 	mov.w	r8, #0
 800d9ea:	4b92      	ldr	r3, [pc, #584]	; (800dc34 <_strtod_l+0xbf4>)
 800d9ec:	403b      	ands	r3, r7
 800d9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d9f2:	4b91      	ldr	r3, [pc, #580]	; (800dc38 <_strtod_l+0xbf8>)
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	f040 80b0 	bne.w	800db5a <_strtod_l+0xb1a>
 800d9fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800da02:	ec4b ab10 	vmov	d0, sl, fp
 800da06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da0a:	f002 f857 	bl	800fabc <__ulp>
 800da0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da12:	ec53 2b10 	vmov	r2, r3, d0
 800da16:	f7f2 fdf7 	bl	8000608 <__aeabi_dmul>
 800da1a:	4652      	mov	r2, sl
 800da1c:	465b      	mov	r3, fp
 800da1e:	f7f2 fc3d 	bl	800029c <__adddf3>
 800da22:	460b      	mov	r3, r1
 800da24:	4983      	ldr	r1, [pc, #524]	; (800dc34 <_strtod_l+0xbf4>)
 800da26:	4a85      	ldr	r2, [pc, #532]	; (800dc3c <_strtod_l+0xbfc>)
 800da28:	4019      	ands	r1, r3
 800da2a:	4291      	cmp	r1, r2
 800da2c:	4682      	mov	sl, r0
 800da2e:	d960      	bls.n	800daf2 <_strtod_l+0xab2>
 800da30:	ee18 3a90 	vmov	r3, s17
 800da34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da38:	4293      	cmp	r3, r2
 800da3a:	d104      	bne.n	800da46 <_strtod_l+0xa06>
 800da3c:	ee18 3a10 	vmov	r3, s16
 800da40:	3301      	adds	r3, #1
 800da42:	f43f ad45 	beq.w	800d4d0 <_strtod_l+0x490>
 800da46:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dc48 <_strtod_l+0xc08>
 800da4a:	f04f 3aff 	mov.w	sl, #4294967295
 800da4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da50:	4620      	mov	r0, r4
 800da52:	f001 fd01 	bl	800f458 <_Bfree>
 800da56:	9905      	ldr	r1, [sp, #20]
 800da58:	4620      	mov	r0, r4
 800da5a:	f001 fcfd 	bl	800f458 <_Bfree>
 800da5e:	4631      	mov	r1, r6
 800da60:	4620      	mov	r0, r4
 800da62:	f001 fcf9 	bl	800f458 <_Bfree>
 800da66:	4629      	mov	r1, r5
 800da68:	4620      	mov	r0, r4
 800da6a:	f001 fcf5 	bl	800f458 <_Bfree>
 800da6e:	e61a      	b.n	800d6a6 <_strtod_l+0x666>
 800da70:	f1ba 0f00 	cmp.w	sl, #0
 800da74:	d11b      	bne.n	800daae <_strtod_l+0xa6e>
 800da76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da7a:	b9f3      	cbnz	r3, 800daba <_strtod_l+0xa7a>
 800da7c:	4b6c      	ldr	r3, [pc, #432]	; (800dc30 <_strtod_l+0xbf0>)
 800da7e:	2200      	movs	r2, #0
 800da80:	4640      	mov	r0, r8
 800da82:	4649      	mov	r1, r9
 800da84:	f7f3 f832 	bl	8000aec <__aeabi_dcmplt>
 800da88:	b9d0      	cbnz	r0, 800dac0 <_strtod_l+0xa80>
 800da8a:	4640      	mov	r0, r8
 800da8c:	4649      	mov	r1, r9
 800da8e:	4b6c      	ldr	r3, [pc, #432]	; (800dc40 <_strtod_l+0xc00>)
 800da90:	2200      	movs	r2, #0
 800da92:	f7f2 fdb9 	bl	8000608 <__aeabi_dmul>
 800da96:	4680      	mov	r8, r0
 800da98:	4689      	mov	r9, r1
 800da9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800da9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800daa2:	9315      	str	r3, [sp, #84]	; 0x54
 800daa4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800daa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daac:	e79d      	b.n	800d9ea <_strtod_l+0x9aa>
 800daae:	f1ba 0f01 	cmp.w	sl, #1
 800dab2:	d102      	bne.n	800daba <_strtod_l+0xa7a>
 800dab4:	2f00      	cmp	r7, #0
 800dab6:	f43f ad83 	beq.w	800d5c0 <_strtod_l+0x580>
 800daba:	4b62      	ldr	r3, [pc, #392]	; (800dc44 <_strtod_l+0xc04>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	e78e      	b.n	800d9de <_strtod_l+0x99e>
 800dac0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dc40 <_strtod_l+0xc00>
 800dac4:	f04f 0800 	mov.w	r8, #0
 800dac8:	e7e7      	b.n	800da9a <_strtod_l+0xa5a>
 800daca:	4b5d      	ldr	r3, [pc, #372]	; (800dc40 <_strtod_l+0xc00>)
 800dacc:	4640      	mov	r0, r8
 800dace:	4649      	mov	r1, r9
 800dad0:	2200      	movs	r2, #0
 800dad2:	f7f2 fd99 	bl	8000608 <__aeabi_dmul>
 800dad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dad8:	4680      	mov	r8, r0
 800dada:	4689      	mov	r9, r1
 800dadc:	b933      	cbnz	r3, 800daec <_strtod_l+0xaac>
 800dade:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dae2:	900e      	str	r0, [sp, #56]	; 0x38
 800dae4:	930f      	str	r3, [sp, #60]	; 0x3c
 800dae6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800daea:	e7dd      	b.n	800daa8 <_strtod_l+0xa68>
 800daec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800daf0:	e7f9      	b.n	800dae6 <_strtod_l+0xaa6>
 800daf2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800daf6:	9b04      	ldr	r3, [sp, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1a8      	bne.n	800da4e <_strtod_l+0xa0e>
 800dafc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800db02:	0d1b      	lsrs	r3, r3, #20
 800db04:	051b      	lsls	r3, r3, #20
 800db06:	429a      	cmp	r2, r3
 800db08:	d1a1      	bne.n	800da4e <_strtod_l+0xa0e>
 800db0a:	4640      	mov	r0, r8
 800db0c:	4649      	mov	r1, r9
 800db0e:	f7f3 f8db 	bl	8000cc8 <__aeabi_d2lz>
 800db12:	f7f2 fd4b 	bl	80005ac <__aeabi_l2d>
 800db16:	4602      	mov	r2, r0
 800db18:	460b      	mov	r3, r1
 800db1a:	4640      	mov	r0, r8
 800db1c:	4649      	mov	r1, r9
 800db1e:	f7f2 fbbb 	bl	8000298 <__aeabi_dsub>
 800db22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db28:	ea43 030a 	orr.w	r3, r3, sl
 800db2c:	4313      	orrs	r3, r2
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	d055      	beq.n	800dbe0 <_strtod_l+0xba0>
 800db34:	a336      	add	r3, pc, #216	; (adr r3, 800dc10 <_strtod_l+0xbd0>)
 800db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3a:	f7f2 ffd7 	bl	8000aec <__aeabi_dcmplt>
 800db3e:	2800      	cmp	r0, #0
 800db40:	f47f acd0 	bne.w	800d4e4 <_strtod_l+0x4a4>
 800db44:	a334      	add	r3, pc, #208	; (adr r3, 800dc18 <_strtod_l+0xbd8>)
 800db46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db4a:	4640      	mov	r0, r8
 800db4c:	4649      	mov	r1, r9
 800db4e:	f7f2 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 800db52:	2800      	cmp	r0, #0
 800db54:	f43f af7b 	beq.w	800da4e <_strtod_l+0xa0e>
 800db58:	e4c4      	b.n	800d4e4 <_strtod_l+0x4a4>
 800db5a:	9b04      	ldr	r3, [sp, #16]
 800db5c:	b333      	cbz	r3, 800dbac <_strtod_l+0xb6c>
 800db5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db64:	d822      	bhi.n	800dbac <_strtod_l+0xb6c>
 800db66:	a32e      	add	r3, pc, #184	; (adr r3, 800dc20 <_strtod_l+0xbe0>)
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	f7f2 ffc6 	bl	8000b00 <__aeabi_dcmple>
 800db74:	b1a0      	cbz	r0, 800dba0 <_strtod_l+0xb60>
 800db76:	4649      	mov	r1, r9
 800db78:	4640      	mov	r0, r8
 800db7a:	f7f3 f81d 	bl	8000bb8 <__aeabi_d2uiz>
 800db7e:	2801      	cmp	r0, #1
 800db80:	bf38      	it	cc
 800db82:	2001      	movcc	r0, #1
 800db84:	f7f2 fcc6 	bl	8000514 <__aeabi_ui2d>
 800db88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db8a:	4680      	mov	r8, r0
 800db8c:	4689      	mov	r9, r1
 800db8e:	bb23      	cbnz	r3, 800dbda <_strtod_l+0xb9a>
 800db90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db94:	9010      	str	r0, [sp, #64]	; 0x40
 800db96:	9311      	str	r3, [sp, #68]	; 0x44
 800db98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800db9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dba4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dba8:	1a9b      	subs	r3, r3, r2
 800dbaa:	9309      	str	r3, [sp, #36]	; 0x24
 800dbac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbb0:	eeb0 0a48 	vmov.f32	s0, s16
 800dbb4:	eef0 0a68 	vmov.f32	s1, s17
 800dbb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dbbc:	f001 ff7e 	bl	800fabc <__ulp>
 800dbc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dbc4:	ec53 2b10 	vmov	r2, r3, d0
 800dbc8:	f7f2 fd1e 	bl	8000608 <__aeabi_dmul>
 800dbcc:	ec53 2b18 	vmov	r2, r3, d8
 800dbd0:	f7f2 fb64 	bl	800029c <__adddf3>
 800dbd4:	4682      	mov	sl, r0
 800dbd6:	468b      	mov	fp, r1
 800dbd8:	e78d      	b.n	800daf6 <_strtod_l+0xab6>
 800dbda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dbde:	e7db      	b.n	800db98 <_strtod_l+0xb58>
 800dbe0:	a311      	add	r3, pc, #68	; (adr r3, 800dc28 <_strtod_l+0xbe8>)
 800dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe6:	f7f2 ff81 	bl	8000aec <__aeabi_dcmplt>
 800dbea:	e7b2      	b.n	800db52 <_strtod_l+0xb12>
 800dbec:	2300      	movs	r3, #0
 800dbee:	930a      	str	r3, [sp, #40]	; 0x28
 800dbf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dbf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	f7ff ba6b 	b.w	800d0d0 <_strtod_l+0x90>
 800dbfa:	2a65      	cmp	r2, #101	; 0x65
 800dbfc:	f43f ab5f 	beq.w	800d2be <_strtod_l+0x27e>
 800dc00:	2a45      	cmp	r2, #69	; 0x45
 800dc02:	f43f ab5c 	beq.w	800d2be <_strtod_l+0x27e>
 800dc06:	2301      	movs	r3, #1
 800dc08:	f7ff bb94 	b.w	800d334 <_strtod_l+0x2f4>
 800dc0c:	f3af 8000 	nop.w
 800dc10:	94a03595 	.word	0x94a03595
 800dc14:	3fdfffff 	.word	0x3fdfffff
 800dc18:	35afe535 	.word	0x35afe535
 800dc1c:	3fe00000 	.word	0x3fe00000
 800dc20:	ffc00000 	.word	0xffc00000
 800dc24:	41dfffff 	.word	0x41dfffff
 800dc28:	94a03595 	.word	0x94a03595
 800dc2c:	3fcfffff 	.word	0x3fcfffff
 800dc30:	3ff00000 	.word	0x3ff00000
 800dc34:	7ff00000 	.word	0x7ff00000
 800dc38:	7fe00000 	.word	0x7fe00000
 800dc3c:	7c9fffff 	.word	0x7c9fffff
 800dc40:	3fe00000 	.word	0x3fe00000
 800dc44:	bff00000 	.word	0xbff00000
 800dc48:	7fefffff 	.word	0x7fefffff

0800dc4c <_strtod_r>:
 800dc4c:	4b01      	ldr	r3, [pc, #4]	; (800dc54 <_strtod_r+0x8>)
 800dc4e:	f7ff b9f7 	b.w	800d040 <_strtod_l>
 800dc52:	bf00      	nop
 800dc54:	20000080 	.word	0x20000080

0800dc58 <_strtol_l.constprop.0>:
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc5e:	d001      	beq.n	800dc64 <_strtol_l.constprop.0+0xc>
 800dc60:	2b24      	cmp	r3, #36	; 0x24
 800dc62:	d906      	bls.n	800dc72 <_strtol_l.constprop.0+0x1a>
 800dc64:	f7fd ffce 	bl	800bc04 <__errno>
 800dc68:	2316      	movs	r3, #22
 800dc6a:	6003      	str	r3, [r0, #0]
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dd58 <_strtol_l.constprop.0+0x100>
 800dc76:	460d      	mov	r5, r1
 800dc78:	462e      	mov	r6, r5
 800dc7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dc82:	f017 0708 	ands.w	r7, r7, #8
 800dc86:	d1f7      	bne.n	800dc78 <_strtol_l.constprop.0+0x20>
 800dc88:	2c2d      	cmp	r4, #45	; 0x2d
 800dc8a:	d132      	bne.n	800dcf2 <_strtol_l.constprop.0+0x9a>
 800dc8c:	782c      	ldrb	r4, [r5, #0]
 800dc8e:	2701      	movs	r7, #1
 800dc90:	1cb5      	adds	r5, r6, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d05b      	beq.n	800dd4e <_strtol_l.constprop.0+0xf6>
 800dc96:	2b10      	cmp	r3, #16
 800dc98:	d109      	bne.n	800dcae <_strtol_l.constprop.0+0x56>
 800dc9a:	2c30      	cmp	r4, #48	; 0x30
 800dc9c:	d107      	bne.n	800dcae <_strtol_l.constprop.0+0x56>
 800dc9e:	782c      	ldrb	r4, [r5, #0]
 800dca0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dca4:	2c58      	cmp	r4, #88	; 0x58
 800dca6:	d14d      	bne.n	800dd44 <_strtol_l.constprop.0+0xec>
 800dca8:	786c      	ldrb	r4, [r5, #1]
 800dcaa:	2310      	movs	r3, #16
 800dcac:	3502      	adds	r5, #2
 800dcae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dcb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dcb6:	f04f 0c00 	mov.w	ip, #0
 800dcba:	fbb8 f9f3 	udiv	r9, r8, r3
 800dcbe:	4666      	mov	r6, ip
 800dcc0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dcc4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dcc8:	f1be 0f09 	cmp.w	lr, #9
 800dccc:	d816      	bhi.n	800dcfc <_strtol_l.constprop.0+0xa4>
 800dcce:	4674      	mov	r4, lr
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	dd24      	ble.n	800dd1e <_strtol_l.constprop.0+0xc6>
 800dcd4:	f1bc 0f00 	cmp.w	ip, #0
 800dcd8:	db1e      	blt.n	800dd18 <_strtol_l.constprop.0+0xc0>
 800dcda:	45b1      	cmp	r9, r6
 800dcdc:	d31c      	bcc.n	800dd18 <_strtol_l.constprop.0+0xc0>
 800dcde:	d101      	bne.n	800dce4 <_strtol_l.constprop.0+0x8c>
 800dce0:	45a2      	cmp	sl, r4
 800dce2:	db19      	blt.n	800dd18 <_strtol_l.constprop.0+0xc0>
 800dce4:	fb06 4603 	mla	r6, r6, r3, r4
 800dce8:	f04f 0c01 	mov.w	ip, #1
 800dcec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dcf0:	e7e8      	b.n	800dcc4 <_strtol_l.constprop.0+0x6c>
 800dcf2:	2c2b      	cmp	r4, #43	; 0x2b
 800dcf4:	bf04      	itt	eq
 800dcf6:	782c      	ldrbeq	r4, [r5, #0]
 800dcf8:	1cb5      	addeq	r5, r6, #2
 800dcfa:	e7ca      	b.n	800dc92 <_strtol_l.constprop.0+0x3a>
 800dcfc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dd00:	f1be 0f19 	cmp.w	lr, #25
 800dd04:	d801      	bhi.n	800dd0a <_strtol_l.constprop.0+0xb2>
 800dd06:	3c37      	subs	r4, #55	; 0x37
 800dd08:	e7e2      	b.n	800dcd0 <_strtol_l.constprop.0+0x78>
 800dd0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dd0e:	f1be 0f19 	cmp.w	lr, #25
 800dd12:	d804      	bhi.n	800dd1e <_strtol_l.constprop.0+0xc6>
 800dd14:	3c57      	subs	r4, #87	; 0x57
 800dd16:	e7db      	b.n	800dcd0 <_strtol_l.constprop.0+0x78>
 800dd18:	f04f 3cff 	mov.w	ip, #4294967295
 800dd1c:	e7e6      	b.n	800dcec <_strtol_l.constprop.0+0x94>
 800dd1e:	f1bc 0f00 	cmp.w	ip, #0
 800dd22:	da05      	bge.n	800dd30 <_strtol_l.constprop.0+0xd8>
 800dd24:	2322      	movs	r3, #34	; 0x22
 800dd26:	6003      	str	r3, [r0, #0]
 800dd28:	4646      	mov	r6, r8
 800dd2a:	b942      	cbnz	r2, 800dd3e <_strtol_l.constprop.0+0xe6>
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	e79e      	b.n	800dc6e <_strtol_l.constprop.0+0x16>
 800dd30:	b107      	cbz	r7, 800dd34 <_strtol_l.constprop.0+0xdc>
 800dd32:	4276      	negs	r6, r6
 800dd34:	2a00      	cmp	r2, #0
 800dd36:	d0f9      	beq.n	800dd2c <_strtol_l.constprop.0+0xd4>
 800dd38:	f1bc 0f00 	cmp.w	ip, #0
 800dd3c:	d000      	beq.n	800dd40 <_strtol_l.constprop.0+0xe8>
 800dd3e:	1e69      	subs	r1, r5, #1
 800dd40:	6011      	str	r1, [r2, #0]
 800dd42:	e7f3      	b.n	800dd2c <_strtol_l.constprop.0+0xd4>
 800dd44:	2430      	movs	r4, #48	; 0x30
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1b1      	bne.n	800dcae <_strtol_l.constprop.0+0x56>
 800dd4a:	2308      	movs	r3, #8
 800dd4c:	e7af      	b.n	800dcae <_strtol_l.constprop.0+0x56>
 800dd4e:	2c30      	cmp	r4, #48	; 0x30
 800dd50:	d0a5      	beq.n	800dc9e <_strtol_l.constprop.0+0x46>
 800dd52:	230a      	movs	r3, #10
 800dd54:	e7ab      	b.n	800dcae <_strtol_l.constprop.0+0x56>
 800dd56:	bf00      	nop
 800dd58:	08010ee1 	.word	0x08010ee1

0800dd5c <_strtol_r>:
 800dd5c:	f7ff bf7c 	b.w	800dc58 <_strtol_l.constprop.0>

0800dd60 <_vsniprintf_r>:
 800dd60:	b530      	push	{r4, r5, lr}
 800dd62:	4614      	mov	r4, r2
 800dd64:	2c00      	cmp	r4, #0
 800dd66:	b09b      	sub	sp, #108	; 0x6c
 800dd68:	4605      	mov	r5, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	da05      	bge.n	800dd7a <_vsniprintf_r+0x1a>
 800dd6e:	238b      	movs	r3, #139	; 0x8b
 800dd70:	6003      	str	r3, [r0, #0]
 800dd72:	f04f 30ff 	mov.w	r0, #4294967295
 800dd76:	b01b      	add	sp, #108	; 0x6c
 800dd78:	bd30      	pop	{r4, r5, pc}
 800dd7a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dd7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dd82:	bf14      	ite	ne
 800dd84:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd88:	4623      	moveq	r3, r4
 800dd8a:	9302      	str	r3, [sp, #8]
 800dd8c:	9305      	str	r3, [sp, #20]
 800dd8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd92:	9100      	str	r1, [sp, #0]
 800dd94:	9104      	str	r1, [sp, #16]
 800dd96:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dd9a:	4669      	mov	r1, sp
 800dd9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd9e:	f002 f87d 	bl	800fe9c <_svfiprintf_r>
 800dda2:	1c43      	adds	r3, r0, #1
 800dda4:	bfbc      	itt	lt
 800dda6:	238b      	movlt	r3, #139	; 0x8b
 800dda8:	602b      	strlt	r3, [r5, #0]
 800ddaa:	2c00      	cmp	r4, #0
 800ddac:	d0e3      	beq.n	800dd76 <_vsniprintf_r+0x16>
 800ddae:	9b00      	ldr	r3, [sp, #0]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	701a      	strb	r2, [r3, #0]
 800ddb4:	e7df      	b.n	800dd76 <_vsniprintf_r+0x16>
	...

0800ddb8 <vsniprintf>:
 800ddb8:	b507      	push	{r0, r1, r2, lr}
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4613      	mov	r3, r2
 800ddbe:	460a      	mov	r2, r1
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4803      	ldr	r0, [pc, #12]	; (800ddd0 <vsniprintf+0x18>)
 800ddc4:	6800      	ldr	r0, [r0, #0]
 800ddc6:	f7ff ffcb 	bl	800dd60 <_vsniprintf_r>
 800ddca:	b003      	add	sp, #12
 800ddcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ddd0:	20000018 	.word	0x20000018

0800ddd4 <_write_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d07      	ldr	r5, [pc, #28]	; (800ddf4 <_write_r+0x20>)
 800ddd8:	4604      	mov	r4, r0
 800ddda:	4608      	mov	r0, r1
 800dddc:	4611      	mov	r1, r2
 800ddde:	2200      	movs	r2, #0
 800dde0:	602a      	str	r2, [r5, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	f7f6 fda5 	bl	8004932 <_write>
 800dde8:	1c43      	adds	r3, r0, #1
 800ddea:	d102      	bne.n	800ddf2 <_write_r+0x1e>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	b103      	cbz	r3, 800ddf2 <_write_r+0x1e>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	2000531c 	.word	0x2000531c

0800ddf8 <_close_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4d06      	ldr	r5, [pc, #24]	; (800de14 <_close_r+0x1c>)
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4604      	mov	r4, r0
 800de00:	4608      	mov	r0, r1
 800de02:	602b      	str	r3, [r5, #0]
 800de04:	f7f6 fdb1 	bl	800496a <_close>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_close_r+0x1a>
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_close_r+0x1a>
 800de10:	6023      	str	r3, [r4, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	2000531c 	.word	0x2000531c

0800de18 <quorem>:
 800de18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de1c:	6903      	ldr	r3, [r0, #16]
 800de1e:	690c      	ldr	r4, [r1, #16]
 800de20:	42a3      	cmp	r3, r4
 800de22:	4607      	mov	r7, r0
 800de24:	f2c0 8081 	blt.w	800df2a <quorem+0x112>
 800de28:	3c01      	subs	r4, #1
 800de2a:	f101 0814 	add.w	r8, r1, #20
 800de2e:	f100 0514 	add.w	r5, r0, #20
 800de32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de36:	9301      	str	r3, [sp, #4]
 800de38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800de3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de40:	3301      	adds	r3, #1
 800de42:	429a      	cmp	r2, r3
 800de44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800de48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800de50:	d331      	bcc.n	800deb6 <quorem+0x9e>
 800de52:	f04f 0e00 	mov.w	lr, #0
 800de56:	4640      	mov	r0, r8
 800de58:	46ac      	mov	ip, r5
 800de5a:	46f2      	mov	sl, lr
 800de5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800de60:	b293      	uxth	r3, r2
 800de62:	fb06 e303 	mla	r3, r6, r3, lr
 800de66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	ebaa 0303 	sub.w	r3, sl, r3
 800de70:	f8dc a000 	ldr.w	sl, [ip]
 800de74:	0c12      	lsrs	r2, r2, #16
 800de76:	fa13 f38a 	uxtah	r3, r3, sl
 800de7a:	fb06 e202 	mla	r2, r6, r2, lr
 800de7e:	9300      	str	r3, [sp, #0]
 800de80:	9b00      	ldr	r3, [sp, #0]
 800de82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de86:	b292      	uxth	r2, r2
 800de88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de90:	f8bd 3000 	ldrh.w	r3, [sp]
 800de94:	4581      	cmp	r9, r0
 800de96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de9a:	f84c 3b04 	str.w	r3, [ip], #4
 800de9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dea2:	d2db      	bcs.n	800de5c <quorem+0x44>
 800dea4:	f855 300b 	ldr.w	r3, [r5, fp]
 800dea8:	b92b      	cbnz	r3, 800deb6 <quorem+0x9e>
 800deaa:	9b01      	ldr	r3, [sp, #4]
 800deac:	3b04      	subs	r3, #4
 800deae:	429d      	cmp	r5, r3
 800deb0:	461a      	mov	r2, r3
 800deb2:	d32e      	bcc.n	800df12 <quorem+0xfa>
 800deb4:	613c      	str	r4, [r7, #16]
 800deb6:	4638      	mov	r0, r7
 800deb8:	f001 fd5a 	bl	800f970 <__mcmp>
 800debc:	2800      	cmp	r0, #0
 800debe:	db24      	blt.n	800df0a <quorem+0xf2>
 800dec0:	3601      	adds	r6, #1
 800dec2:	4628      	mov	r0, r5
 800dec4:	f04f 0c00 	mov.w	ip, #0
 800dec8:	f858 2b04 	ldr.w	r2, [r8], #4
 800decc:	f8d0 e000 	ldr.w	lr, [r0]
 800ded0:	b293      	uxth	r3, r2
 800ded2:	ebac 0303 	sub.w	r3, ip, r3
 800ded6:	0c12      	lsrs	r2, r2, #16
 800ded8:	fa13 f38e 	uxtah	r3, r3, lr
 800dedc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deea:	45c1      	cmp	r9, r8
 800deec:	f840 3b04 	str.w	r3, [r0], #4
 800def0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800def4:	d2e8      	bcs.n	800dec8 <quorem+0xb0>
 800def6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800defa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800defe:	b922      	cbnz	r2, 800df0a <quorem+0xf2>
 800df00:	3b04      	subs	r3, #4
 800df02:	429d      	cmp	r5, r3
 800df04:	461a      	mov	r2, r3
 800df06:	d30a      	bcc.n	800df1e <quorem+0x106>
 800df08:	613c      	str	r4, [r7, #16]
 800df0a:	4630      	mov	r0, r6
 800df0c:	b003      	add	sp, #12
 800df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df12:	6812      	ldr	r2, [r2, #0]
 800df14:	3b04      	subs	r3, #4
 800df16:	2a00      	cmp	r2, #0
 800df18:	d1cc      	bne.n	800deb4 <quorem+0x9c>
 800df1a:	3c01      	subs	r4, #1
 800df1c:	e7c7      	b.n	800deae <quorem+0x96>
 800df1e:	6812      	ldr	r2, [r2, #0]
 800df20:	3b04      	subs	r3, #4
 800df22:	2a00      	cmp	r2, #0
 800df24:	d1f0      	bne.n	800df08 <quorem+0xf0>
 800df26:	3c01      	subs	r4, #1
 800df28:	e7eb      	b.n	800df02 <quorem+0xea>
 800df2a:	2000      	movs	r0, #0
 800df2c:	e7ee      	b.n	800df0c <quorem+0xf4>
	...

0800df30 <_dtoa_r>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	ed2d 8b04 	vpush	{d8-d9}
 800df38:	ec57 6b10 	vmov	r6, r7, d0
 800df3c:	b093      	sub	sp, #76	; 0x4c
 800df3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800df44:	9106      	str	r1, [sp, #24]
 800df46:	ee10 aa10 	vmov	sl, s0
 800df4a:	4604      	mov	r4, r0
 800df4c:	9209      	str	r2, [sp, #36]	; 0x24
 800df4e:	930c      	str	r3, [sp, #48]	; 0x30
 800df50:	46bb      	mov	fp, r7
 800df52:	b975      	cbnz	r5, 800df72 <_dtoa_r+0x42>
 800df54:	2010      	movs	r0, #16
 800df56:	f7fd ff79 	bl	800be4c <malloc>
 800df5a:	4602      	mov	r2, r0
 800df5c:	6260      	str	r0, [r4, #36]	; 0x24
 800df5e:	b920      	cbnz	r0, 800df6a <_dtoa_r+0x3a>
 800df60:	4ba7      	ldr	r3, [pc, #668]	; (800e200 <_dtoa_r+0x2d0>)
 800df62:	21ea      	movs	r1, #234	; 0xea
 800df64:	48a7      	ldr	r0, [pc, #668]	; (800e204 <_dtoa_r+0x2d4>)
 800df66:	f002 f981 	bl	801026c <__assert_func>
 800df6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800df6e:	6005      	str	r5, [r0, #0]
 800df70:	60c5      	str	r5, [r0, #12]
 800df72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df74:	6819      	ldr	r1, [r3, #0]
 800df76:	b151      	cbz	r1, 800df8e <_dtoa_r+0x5e>
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	604a      	str	r2, [r1, #4]
 800df7c:	2301      	movs	r3, #1
 800df7e:	4093      	lsls	r3, r2
 800df80:	608b      	str	r3, [r1, #8]
 800df82:	4620      	mov	r0, r4
 800df84:	f001 fa68 	bl	800f458 <_Bfree>
 800df88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	1e3b      	subs	r3, r7, #0
 800df90:	bfaa      	itet	ge
 800df92:	2300      	movge	r3, #0
 800df94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df98:	f8c8 3000 	strge.w	r3, [r8]
 800df9c:	4b9a      	ldr	r3, [pc, #616]	; (800e208 <_dtoa_r+0x2d8>)
 800df9e:	bfbc      	itt	lt
 800dfa0:	2201      	movlt	r2, #1
 800dfa2:	f8c8 2000 	strlt.w	r2, [r8]
 800dfa6:	ea33 030b 	bics.w	r3, r3, fp
 800dfaa:	d11b      	bne.n	800dfe4 <_dtoa_r+0xb4>
 800dfac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfae:	f242 730f 	movw	r3, #9999	; 0x270f
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfb8:	4333      	orrs	r3, r6
 800dfba:	f000 8592 	beq.w	800eae2 <_dtoa_r+0xbb2>
 800dfbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dfc0:	b963      	cbnz	r3, 800dfdc <_dtoa_r+0xac>
 800dfc2:	4b92      	ldr	r3, [pc, #584]	; (800e20c <_dtoa_r+0x2dc>)
 800dfc4:	e022      	b.n	800e00c <_dtoa_r+0xdc>
 800dfc6:	4b92      	ldr	r3, [pc, #584]	; (800e210 <_dtoa_r+0x2e0>)
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dfce:	6013      	str	r3, [r2, #0]
 800dfd0:	9801      	ldr	r0, [sp, #4]
 800dfd2:	b013      	add	sp, #76	; 0x4c
 800dfd4:	ecbd 8b04 	vpop	{d8-d9}
 800dfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfdc:	4b8b      	ldr	r3, [pc, #556]	; (800e20c <_dtoa_r+0x2dc>)
 800dfde:	9301      	str	r3, [sp, #4]
 800dfe0:	3303      	adds	r3, #3
 800dfe2:	e7f3      	b.n	800dfcc <_dtoa_r+0x9c>
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	f7f2 fd74 	bl	8000ad8 <__aeabi_dcmpeq>
 800dff0:	ec4b ab19 	vmov	d9, sl, fp
 800dff4:	4680      	mov	r8, r0
 800dff6:	b158      	cbz	r0, 800e010 <_dtoa_r+0xe0>
 800dff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dffa:	2301      	movs	r3, #1
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e000:	2b00      	cmp	r3, #0
 800e002:	f000 856b 	beq.w	800eadc <_dtoa_r+0xbac>
 800e006:	4883      	ldr	r0, [pc, #524]	; (800e214 <_dtoa_r+0x2e4>)
 800e008:	6018      	str	r0, [r3, #0]
 800e00a:	1e43      	subs	r3, r0, #1
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	e7df      	b.n	800dfd0 <_dtoa_r+0xa0>
 800e010:	ec4b ab10 	vmov	d0, sl, fp
 800e014:	aa10      	add	r2, sp, #64	; 0x40
 800e016:	a911      	add	r1, sp, #68	; 0x44
 800e018:	4620      	mov	r0, r4
 800e01a:	f001 fdcb 	bl	800fbb4 <__d2b>
 800e01e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e022:	ee08 0a10 	vmov	s16, r0
 800e026:	2d00      	cmp	r5, #0
 800e028:	f000 8084 	beq.w	800e134 <_dtoa_r+0x204>
 800e02c:	ee19 3a90 	vmov	r3, s19
 800e030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e034:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e038:	4656      	mov	r6, sl
 800e03a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e03e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e042:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e046:	4b74      	ldr	r3, [pc, #464]	; (800e218 <_dtoa_r+0x2e8>)
 800e048:	2200      	movs	r2, #0
 800e04a:	4630      	mov	r0, r6
 800e04c:	4639      	mov	r1, r7
 800e04e:	f7f2 f923 	bl	8000298 <__aeabi_dsub>
 800e052:	a365      	add	r3, pc, #404	; (adr r3, 800e1e8 <_dtoa_r+0x2b8>)
 800e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e058:	f7f2 fad6 	bl	8000608 <__aeabi_dmul>
 800e05c:	a364      	add	r3, pc, #400	; (adr r3, 800e1f0 <_dtoa_r+0x2c0>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 f91b 	bl	800029c <__adddf3>
 800e066:	4606      	mov	r6, r0
 800e068:	4628      	mov	r0, r5
 800e06a:	460f      	mov	r7, r1
 800e06c:	f7f2 fa62 	bl	8000534 <__aeabi_i2d>
 800e070:	a361      	add	r3, pc, #388	; (adr r3, 800e1f8 <_dtoa_r+0x2c8>)
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	f7f2 fac7 	bl	8000608 <__aeabi_dmul>
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	4630      	mov	r0, r6
 800e080:	4639      	mov	r1, r7
 800e082:	f7f2 f90b 	bl	800029c <__adddf3>
 800e086:	4606      	mov	r6, r0
 800e088:	460f      	mov	r7, r1
 800e08a:	f7f2 fd6d 	bl	8000b68 <__aeabi_d2iz>
 800e08e:	2200      	movs	r2, #0
 800e090:	9000      	str	r0, [sp, #0]
 800e092:	2300      	movs	r3, #0
 800e094:	4630      	mov	r0, r6
 800e096:	4639      	mov	r1, r7
 800e098:	f7f2 fd28 	bl	8000aec <__aeabi_dcmplt>
 800e09c:	b150      	cbz	r0, 800e0b4 <_dtoa_r+0x184>
 800e09e:	9800      	ldr	r0, [sp, #0]
 800e0a0:	f7f2 fa48 	bl	8000534 <__aeabi_i2d>
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	f7f2 fd16 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0ac:	b910      	cbnz	r0, 800e0b4 <_dtoa_r+0x184>
 800e0ae:	9b00      	ldr	r3, [sp, #0]
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	2b16      	cmp	r3, #22
 800e0b8:	d85a      	bhi.n	800e170 <_dtoa_r+0x240>
 800e0ba:	9a00      	ldr	r2, [sp, #0]
 800e0bc:	4b57      	ldr	r3, [pc, #348]	; (800e21c <_dtoa_r+0x2ec>)
 800e0be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	ec51 0b19 	vmov	r0, r1, d9
 800e0ca:	f7f2 fd0f 	bl	8000aec <__aeabi_dcmplt>
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	d050      	beq.n	800e174 <_dtoa_r+0x244>
 800e0d2:	9b00      	ldr	r3, [sp, #0]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	2300      	movs	r3, #0
 800e0da:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0de:	1b5d      	subs	r5, r3, r5
 800e0e0:	1e6b      	subs	r3, r5, #1
 800e0e2:	9305      	str	r3, [sp, #20]
 800e0e4:	bf45      	ittet	mi
 800e0e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800e0ea:	9304      	strmi	r3, [sp, #16]
 800e0ec:	2300      	movpl	r3, #0
 800e0ee:	2300      	movmi	r3, #0
 800e0f0:	bf4c      	ite	mi
 800e0f2:	9305      	strmi	r3, [sp, #20]
 800e0f4:	9304      	strpl	r3, [sp, #16]
 800e0f6:	9b00      	ldr	r3, [sp, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	db3d      	blt.n	800e178 <_dtoa_r+0x248>
 800e0fc:	9b05      	ldr	r3, [sp, #20]
 800e0fe:	9a00      	ldr	r2, [sp, #0]
 800e100:	920a      	str	r2, [sp, #40]	; 0x28
 800e102:	4413      	add	r3, r2
 800e104:	9305      	str	r3, [sp, #20]
 800e106:	2300      	movs	r3, #0
 800e108:	9307      	str	r3, [sp, #28]
 800e10a:	9b06      	ldr	r3, [sp, #24]
 800e10c:	2b09      	cmp	r3, #9
 800e10e:	f200 8089 	bhi.w	800e224 <_dtoa_r+0x2f4>
 800e112:	2b05      	cmp	r3, #5
 800e114:	bfc4      	itt	gt
 800e116:	3b04      	subgt	r3, #4
 800e118:	9306      	strgt	r3, [sp, #24]
 800e11a:	9b06      	ldr	r3, [sp, #24]
 800e11c:	f1a3 0302 	sub.w	r3, r3, #2
 800e120:	bfcc      	ite	gt
 800e122:	2500      	movgt	r5, #0
 800e124:	2501      	movle	r5, #1
 800e126:	2b03      	cmp	r3, #3
 800e128:	f200 8087 	bhi.w	800e23a <_dtoa_r+0x30a>
 800e12c:	e8df f003 	tbb	[pc, r3]
 800e130:	59383a2d 	.word	0x59383a2d
 800e134:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e138:	441d      	add	r5, r3
 800e13a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e13e:	2b20      	cmp	r3, #32
 800e140:	bfc1      	itttt	gt
 800e142:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e146:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e14a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e14e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e152:	bfda      	itte	le
 800e154:	f1c3 0320 	rsble	r3, r3, #32
 800e158:	fa06 f003 	lslle.w	r0, r6, r3
 800e15c:	4318      	orrgt	r0, r3
 800e15e:	f7f2 f9d9 	bl	8000514 <__aeabi_ui2d>
 800e162:	2301      	movs	r3, #1
 800e164:	4606      	mov	r6, r0
 800e166:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e16a:	3d01      	subs	r5, #1
 800e16c:	930e      	str	r3, [sp, #56]	; 0x38
 800e16e:	e76a      	b.n	800e046 <_dtoa_r+0x116>
 800e170:	2301      	movs	r3, #1
 800e172:	e7b2      	b.n	800e0da <_dtoa_r+0x1aa>
 800e174:	900b      	str	r0, [sp, #44]	; 0x2c
 800e176:	e7b1      	b.n	800e0dc <_dtoa_r+0x1ac>
 800e178:	9b04      	ldr	r3, [sp, #16]
 800e17a:	9a00      	ldr	r2, [sp, #0]
 800e17c:	1a9b      	subs	r3, r3, r2
 800e17e:	9304      	str	r3, [sp, #16]
 800e180:	4253      	negs	r3, r2
 800e182:	9307      	str	r3, [sp, #28]
 800e184:	2300      	movs	r3, #0
 800e186:	930a      	str	r3, [sp, #40]	; 0x28
 800e188:	e7bf      	b.n	800e10a <_dtoa_r+0x1da>
 800e18a:	2300      	movs	r3, #0
 800e18c:	9308      	str	r3, [sp, #32]
 800e18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e190:	2b00      	cmp	r3, #0
 800e192:	dc55      	bgt.n	800e240 <_dtoa_r+0x310>
 800e194:	2301      	movs	r3, #1
 800e196:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e19a:	461a      	mov	r2, r3
 800e19c:	9209      	str	r2, [sp, #36]	; 0x24
 800e19e:	e00c      	b.n	800e1ba <_dtoa_r+0x28a>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e7f3      	b.n	800e18c <_dtoa_r+0x25c>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1a8:	9308      	str	r3, [sp, #32]
 800e1aa:	9b00      	ldr	r3, [sp, #0]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	9302      	str	r3, [sp, #8]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	9303      	str	r3, [sp, #12]
 800e1b6:	bfb8      	it	lt
 800e1b8:	2301      	movlt	r3, #1
 800e1ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e1bc:	2200      	movs	r2, #0
 800e1be:	6042      	str	r2, [r0, #4]
 800e1c0:	2204      	movs	r2, #4
 800e1c2:	f102 0614 	add.w	r6, r2, #20
 800e1c6:	429e      	cmp	r6, r3
 800e1c8:	6841      	ldr	r1, [r0, #4]
 800e1ca:	d93d      	bls.n	800e248 <_dtoa_r+0x318>
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	f001 f903 	bl	800f3d8 <_Balloc>
 800e1d2:	9001      	str	r0, [sp, #4]
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d13b      	bne.n	800e250 <_dtoa_r+0x320>
 800e1d8:	4b11      	ldr	r3, [pc, #68]	; (800e220 <_dtoa_r+0x2f0>)
 800e1da:	4602      	mov	r2, r0
 800e1dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e1e0:	e6c0      	b.n	800df64 <_dtoa_r+0x34>
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e7df      	b.n	800e1a6 <_dtoa_r+0x276>
 800e1e6:	bf00      	nop
 800e1e8:	636f4361 	.word	0x636f4361
 800e1ec:	3fd287a7 	.word	0x3fd287a7
 800e1f0:	8b60c8b3 	.word	0x8b60c8b3
 800e1f4:	3fc68a28 	.word	0x3fc68a28
 800e1f8:	509f79fb 	.word	0x509f79fb
 800e1fc:	3fd34413 	.word	0x3fd34413
 800e200:	08010fee 	.word	0x08010fee
 800e204:	08011005 	.word	0x08011005
 800e208:	7ff00000 	.word	0x7ff00000
 800e20c:	08010fea 	.word	0x08010fea
 800e210:	08010fe1 	.word	0x08010fe1
 800e214:	08010e65 	.word	0x08010e65
 800e218:	3ff80000 	.word	0x3ff80000
 800e21c:	08011170 	.word	0x08011170
 800e220:	08011060 	.word	0x08011060
 800e224:	2501      	movs	r5, #1
 800e226:	2300      	movs	r3, #0
 800e228:	9306      	str	r3, [sp, #24]
 800e22a:	9508      	str	r5, [sp, #32]
 800e22c:	f04f 33ff 	mov.w	r3, #4294967295
 800e230:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e234:	2200      	movs	r2, #0
 800e236:	2312      	movs	r3, #18
 800e238:	e7b0      	b.n	800e19c <_dtoa_r+0x26c>
 800e23a:	2301      	movs	r3, #1
 800e23c:	9308      	str	r3, [sp, #32]
 800e23e:	e7f5      	b.n	800e22c <_dtoa_r+0x2fc>
 800e240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e242:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e246:	e7b8      	b.n	800e1ba <_dtoa_r+0x28a>
 800e248:	3101      	adds	r1, #1
 800e24a:	6041      	str	r1, [r0, #4]
 800e24c:	0052      	lsls	r2, r2, #1
 800e24e:	e7b8      	b.n	800e1c2 <_dtoa_r+0x292>
 800e250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e252:	9a01      	ldr	r2, [sp, #4]
 800e254:	601a      	str	r2, [r3, #0]
 800e256:	9b03      	ldr	r3, [sp, #12]
 800e258:	2b0e      	cmp	r3, #14
 800e25a:	f200 809d 	bhi.w	800e398 <_dtoa_r+0x468>
 800e25e:	2d00      	cmp	r5, #0
 800e260:	f000 809a 	beq.w	800e398 <_dtoa_r+0x468>
 800e264:	9b00      	ldr	r3, [sp, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	dd32      	ble.n	800e2d0 <_dtoa_r+0x3a0>
 800e26a:	4ab7      	ldr	r2, [pc, #732]	; (800e548 <_dtoa_r+0x618>)
 800e26c:	f003 030f 	and.w	r3, r3, #15
 800e270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e274:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e278:	9b00      	ldr	r3, [sp, #0]
 800e27a:	05d8      	lsls	r0, r3, #23
 800e27c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e280:	d516      	bpl.n	800e2b0 <_dtoa_r+0x380>
 800e282:	4bb2      	ldr	r3, [pc, #712]	; (800e54c <_dtoa_r+0x61c>)
 800e284:	ec51 0b19 	vmov	r0, r1, d9
 800e288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e28c:	f7f2 fae6 	bl	800085c <__aeabi_ddiv>
 800e290:	f007 070f 	and.w	r7, r7, #15
 800e294:	4682      	mov	sl, r0
 800e296:	468b      	mov	fp, r1
 800e298:	2503      	movs	r5, #3
 800e29a:	4eac      	ldr	r6, [pc, #688]	; (800e54c <_dtoa_r+0x61c>)
 800e29c:	b957      	cbnz	r7, 800e2b4 <_dtoa_r+0x384>
 800e29e:	4642      	mov	r2, r8
 800e2a0:	464b      	mov	r3, r9
 800e2a2:	4650      	mov	r0, sl
 800e2a4:	4659      	mov	r1, fp
 800e2a6:	f7f2 fad9 	bl	800085c <__aeabi_ddiv>
 800e2aa:	4682      	mov	sl, r0
 800e2ac:	468b      	mov	fp, r1
 800e2ae:	e028      	b.n	800e302 <_dtoa_r+0x3d2>
 800e2b0:	2502      	movs	r5, #2
 800e2b2:	e7f2      	b.n	800e29a <_dtoa_r+0x36a>
 800e2b4:	07f9      	lsls	r1, r7, #31
 800e2b6:	d508      	bpl.n	800e2ca <_dtoa_r+0x39a>
 800e2b8:	4640      	mov	r0, r8
 800e2ba:	4649      	mov	r1, r9
 800e2bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e2c0:	f7f2 f9a2 	bl	8000608 <__aeabi_dmul>
 800e2c4:	3501      	adds	r5, #1
 800e2c6:	4680      	mov	r8, r0
 800e2c8:	4689      	mov	r9, r1
 800e2ca:	107f      	asrs	r7, r7, #1
 800e2cc:	3608      	adds	r6, #8
 800e2ce:	e7e5      	b.n	800e29c <_dtoa_r+0x36c>
 800e2d0:	f000 809b 	beq.w	800e40a <_dtoa_r+0x4da>
 800e2d4:	9b00      	ldr	r3, [sp, #0]
 800e2d6:	4f9d      	ldr	r7, [pc, #628]	; (800e54c <_dtoa_r+0x61c>)
 800e2d8:	425e      	negs	r6, r3
 800e2da:	4b9b      	ldr	r3, [pc, #620]	; (800e548 <_dtoa_r+0x618>)
 800e2dc:	f006 020f 	and.w	r2, r6, #15
 800e2e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	ec51 0b19 	vmov	r0, r1, d9
 800e2ec:	f7f2 f98c 	bl	8000608 <__aeabi_dmul>
 800e2f0:	1136      	asrs	r6, r6, #4
 800e2f2:	4682      	mov	sl, r0
 800e2f4:	468b      	mov	fp, r1
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	2502      	movs	r5, #2
 800e2fa:	2e00      	cmp	r6, #0
 800e2fc:	d17a      	bne.n	800e3f4 <_dtoa_r+0x4c4>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1d3      	bne.n	800e2aa <_dtoa_r+0x37a>
 800e302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 8082 	beq.w	800e40e <_dtoa_r+0x4de>
 800e30a:	4b91      	ldr	r3, [pc, #580]	; (800e550 <_dtoa_r+0x620>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	4650      	mov	r0, sl
 800e310:	4659      	mov	r1, fp
 800e312:	f7f2 fbeb 	bl	8000aec <__aeabi_dcmplt>
 800e316:	2800      	cmp	r0, #0
 800e318:	d079      	beq.n	800e40e <_dtoa_r+0x4de>
 800e31a:	9b03      	ldr	r3, [sp, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d076      	beq.n	800e40e <_dtoa_r+0x4de>
 800e320:	9b02      	ldr	r3, [sp, #8]
 800e322:	2b00      	cmp	r3, #0
 800e324:	dd36      	ble.n	800e394 <_dtoa_r+0x464>
 800e326:	9b00      	ldr	r3, [sp, #0]
 800e328:	4650      	mov	r0, sl
 800e32a:	4659      	mov	r1, fp
 800e32c:	1e5f      	subs	r7, r3, #1
 800e32e:	2200      	movs	r2, #0
 800e330:	4b88      	ldr	r3, [pc, #544]	; (800e554 <_dtoa_r+0x624>)
 800e332:	f7f2 f969 	bl	8000608 <__aeabi_dmul>
 800e336:	9e02      	ldr	r6, [sp, #8]
 800e338:	4682      	mov	sl, r0
 800e33a:	468b      	mov	fp, r1
 800e33c:	3501      	adds	r5, #1
 800e33e:	4628      	mov	r0, r5
 800e340:	f7f2 f8f8 	bl	8000534 <__aeabi_i2d>
 800e344:	4652      	mov	r2, sl
 800e346:	465b      	mov	r3, fp
 800e348:	f7f2 f95e 	bl	8000608 <__aeabi_dmul>
 800e34c:	4b82      	ldr	r3, [pc, #520]	; (800e558 <_dtoa_r+0x628>)
 800e34e:	2200      	movs	r2, #0
 800e350:	f7f1 ffa4 	bl	800029c <__adddf3>
 800e354:	46d0      	mov	r8, sl
 800e356:	46d9      	mov	r9, fp
 800e358:	4682      	mov	sl, r0
 800e35a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e35e:	2e00      	cmp	r6, #0
 800e360:	d158      	bne.n	800e414 <_dtoa_r+0x4e4>
 800e362:	4b7e      	ldr	r3, [pc, #504]	; (800e55c <_dtoa_r+0x62c>)
 800e364:	2200      	movs	r2, #0
 800e366:	4640      	mov	r0, r8
 800e368:	4649      	mov	r1, r9
 800e36a:	f7f1 ff95 	bl	8000298 <__aeabi_dsub>
 800e36e:	4652      	mov	r2, sl
 800e370:	465b      	mov	r3, fp
 800e372:	4680      	mov	r8, r0
 800e374:	4689      	mov	r9, r1
 800e376:	f7f2 fbd7 	bl	8000b28 <__aeabi_dcmpgt>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	f040 8295 	bne.w	800e8aa <_dtoa_r+0x97a>
 800e380:	4652      	mov	r2, sl
 800e382:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e386:	4640      	mov	r0, r8
 800e388:	4649      	mov	r1, r9
 800e38a:	f7f2 fbaf 	bl	8000aec <__aeabi_dcmplt>
 800e38e:	2800      	cmp	r0, #0
 800e390:	f040 8289 	bne.w	800e8a6 <_dtoa_r+0x976>
 800e394:	ec5b ab19 	vmov	sl, fp, d9
 800e398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f2c0 8148 	blt.w	800e630 <_dtoa_r+0x700>
 800e3a0:	9a00      	ldr	r2, [sp, #0]
 800e3a2:	2a0e      	cmp	r2, #14
 800e3a4:	f300 8144 	bgt.w	800e630 <_dtoa_r+0x700>
 800e3a8:	4b67      	ldr	r3, [pc, #412]	; (800e548 <_dtoa_r+0x618>)
 800e3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f280 80d5 	bge.w	800e564 <_dtoa_r+0x634>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	f300 80d1 	bgt.w	800e564 <_dtoa_r+0x634>
 800e3c2:	f040 826f 	bne.w	800e8a4 <_dtoa_r+0x974>
 800e3c6:	4b65      	ldr	r3, [pc, #404]	; (800e55c <_dtoa_r+0x62c>)
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	4640      	mov	r0, r8
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	f7f2 f91b 	bl	8000608 <__aeabi_dmul>
 800e3d2:	4652      	mov	r2, sl
 800e3d4:	465b      	mov	r3, fp
 800e3d6:	f7f2 fb9d 	bl	8000b14 <__aeabi_dcmpge>
 800e3da:	9e03      	ldr	r6, [sp, #12]
 800e3dc:	4637      	mov	r7, r6
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f040 8245 	bne.w	800e86e <_dtoa_r+0x93e>
 800e3e4:	9d01      	ldr	r5, [sp, #4]
 800e3e6:	2331      	movs	r3, #49	; 0x31
 800e3e8:	f805 3b01 	strb.w	r3, [r5], #1
 800e3ec:	9b00      	ldr	r3, [sp, #0]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	e240      	b.n	800e876 <_dtoa_r+0x946>
 800e3f4:	07f2      	lsls	r2, r6, #31
 800e3f6:	d505      	bpl.n	800e404 <_dtoa_r+0x4d4>
 800e3f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3fc:	f7f2 f904 	bl	8000608 <__aeabi_dmul>
 800e400:	3501      	adds	r5, #1
 800e402:	2301      	movs	r3, #1
 800e404:	1076      	asrs	r6, r6, #1
 800e406:	3708      	adds	r7, #8
 800e408:	e777      	b.n	800e2fa <_dtoa_r+0x3ca>
 800e40a:	2502      	movs	r5, #2
 800e40c:	e779      	b.n	800e302 <_dtoa_r+0x3d2>
 800e40e:	9f00      	ldr	r7, [sp, #0]
 800e410:	9e03      	ldr	r6, [sp, #12]
 800e412:	e794      	b.n	800e33e <_dtoa_r+0x40e>
 800e414:	9901      	ldr	r1, [sp, #4]
 800e416:	4b4c      	ldr	r3, [pc, #304]	; (800e548 <_dtoa_r+0x618>)
 800e418:	4431      	add	r1, r6
 800e41a:	910d      	str	r1, [sp, #52]	; 0x34
 800e41c:	9908      	ldr	r1, [sp, #32]
 800e41e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e422:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e426:	2900      	cmp	r1, #0
 800e428:	d043      	beq.n	800e4b2 <_dtoa_r+0x582>
 800e42a:	494d      	ldr	r1, [pc, #308]	; (800e560 <_dtoa_r+0x630>)
 800e42c:	2000      	movs	r0, #0
 800e42e:	f7f2 fa15 	bl	800085c <__aeabi_ddiv>
 800e432:	4652      	mov	r2, sl
 800e434:	465b      	mov	r3, fp
 800e436:	f7f1 ff2f 	bl	8000298 <__aeabi_dsub>
 800e43a:	9d01      	ldr	r5, [sp, #4]
 800e43c:	4682      	mov	sl, r0
 800e43e:	468b      	mov	fp, r1
 800e440:	4649      	mov	r1, r9
 800e442:	4640      	mov	r0, r8
 800e444:	f7f2 fb90 	bl	8000b68 <__aeabi_d2iz>
 800e448:	4606      	mov	r6, r0
 800e44a:	f7f2 f873 	bl	8000534 <__aeabi_i2d>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4640      	mov	r0, r8
 800e454:	4649      	mov	r1, r9
 800e456:	f7f1 ff1f 	bl	8000298 <__aeabi_dsub>
 800e45a:	3630      	adds	r6, #48	; 0x30
 800e45c:	f805 6b01 	strb.w	r6, [r5], #1
 800e460:	4652      	mov	r2, sl
 800e462:	465b      	mov	r3, fp
 800e464:	4680      	mov	r8, r0
 800e466:	4689      	mov	r9, r1
 800e468:	f7f2 fb40 	bl	8000aec <__aeabi_dcmplt>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d163      	bne.n	800e538 <_dtoa_r+0x608>
 800e470:	4642      	mov	r2, r8
 800e472:	464b      	mov	r3, r9
 800e474:	4936      	ldr	r1, [pc, #216]	; (800e550 <_dtoa_r+0x620>)
 800e476:	2000      	movs	r0, #0
 800e478:	f7f1 ff0e 	bl	8000298 <__aeabi_dsub>
 800e47c:	4652      	mov	r2, sl
 800e47e:	465b      	mov	r3, fp
 800e480:	f7f2 fb34 	bl	8000aec <__aeabi_dcmplt>
 800e484:	2800      	cmp	r0, #0
 800e486:	f040 80b5 	bne.w	800e5f4 <_dtoa_r+0x6c4>
 800e48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e48c:	429d      	cmp	r5, r3
 800e48e:	d081      	beq.n	800e394 <_dtoa_r+0x464>
 800e490:	4b30      	ldr	r3, [pc, #192]	; (800e554 <_dtoa_r+0x624>)
 800e492:	2200      	movs	r2, #0
 800e494:	4650      	mov	r0, sl
 800e496:	4659      	mov	r1, fp
 800e498:	f7f2 f8b6 	bl	8000608 <__aeabi_dmul>
 800e49c:	4b2d      	ldr	r3, [pc, #180]	; (800e554 <_dtoa_r+0x624>)
 800e49e:	4682      	mov	sl, r0
 800e4a0:	468b      	mov	fp, r1
 800e4a2:	4640      	mov	r0, r8
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f7f2 f8ae 	bl	8000608 <__aeabi_dmul>
 800e4ac:	4680      	mov	r8, r0
 800e4ae:	4689      	mov	r9, r1
 800e4b0:	e7c6      	b.n	800e440 <_dtoa_r+0x510>
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	f7f2 f8a7 	bl	8000608 <__aeabi_dmul>
 800e4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4bc:	9d01      	ldr	r5, [sp, #4]
 800e4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4c0:	4682      	mov	sl, r0
 800e4c2:	468b      	mov	fp, r1
 800e4c4:	4649      	mov	r1, r9
 800e4c6:	4640      	mov	r0, r8
 800e4c8:	f7f2 fb4e 	bl	8000b68 <__aeabi_d2iz>
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	f7f2 f831 	bl	8000534 <__aeabi_i2d>
 800e4d2:	3630      	adds	r6, #48	; 0x30
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4640      	mov	r0, r8
 800e4da:	4649      	mov	r1, r9
 800e4dc:	f7f1 fedc 	bl	8000298 <__aeabi_dsub>
 800e4e0:	f805 6b01 	strb.w	r6, [r5], #1
 800e4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e6:	429d      	cmp	r5, r3
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	f04f 0200 	mov.w	r2, #0
 800e4f0:	d124      	bne.n	800e53c <_dtoa_r+0x60c>
 800e4f2:	4b1b      	ldr	r3, [pc, #108]	; (800e560 <_dtoa_r+0x630>)
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	4659      	mov	r1, fp
 800e4f8:	f7f1 fed0 	bl	800029c <__adddf3>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	4640      	mov	r0, r8
 800e502:	4649      	mov	r1, r9
 800e504:	f7f2 fb10 	bl	8000b28 <__aeabi_dcmpgt>
 800e508:	2800      	cmp	r0, #0
 800e50a:	d173      	bne.n	800e5f4 <_dtoa_r+0x6c4>
 800e50c:	4652      	mov	r2, sl
 800e50e:	465b      	mov	r3, fp
 800e510:	4913      	ldr	r1, [pc, #76]	; (800e560 <_dtoa_r+0x630>)
 800e512:	2000      	movs	r0, #0
 800e514:	f7f1 fec0 	bl	8000298 <__aeabi_dsub>
 800e518:	4602      	mov	r2, r0
 800e51a:	460b      	mov	r3, r1
 800e51c:	4640      	mov	r0, r8
 800e51e:	4649      	mov	r1, r9
 800e520:	f7f2 fae4 	bl	8000aec <__aeabi_dcmplt>
 800e524:	2800      	cmp	r0, #0
 800e526:	f43f af35 	beq.w	800e394 <_dtoa_r+0x464>
 800e52a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e52c:	1e6b      	subs	r3, r5, #1
 800e52e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e530:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e534:	2b30      	cmp	r3, #48	; 0x30
 800e536:	d0f8      	beq.n	800e52a <_dtoa_r+0x5fa>
 800e538:	9700      	str	r7, [sp, #0]
 800e53a:	e049      	b.n	800e5d0 <_dtoa_r+0x6a0>
 800e53c:	4b05      	ldr	r3, [pc, #20]	; (800e554 <_dtoa_r+0x624>)
 800e53e:	f7f2 f863 	bl	8000608 <__aeabi_dmul>
 800e542:	4680      	mov	r8, r0
 800e544:	4689      	mov	r9, r1
 800e546:	e7bd      	b.n	800e4c4 <_dtoa_r+0x594>
 800e548:	08011170 	.word	0x08011170
 800e54c:	08011148 	.word	0x08011148
 800e550:	3ff00000 	.word	0x3ff00000
 800e554:	40240000 	.word	0x40240000
 800e558:	401c0000 	.word	0x401c0000
 800e55c:	40140000 	.word	0x40140000
 800e560:	3fe00000 	.word	0x3fe00000
 800e564:	9d01      	ldr	r5, [sp, #4]
 800e566:	4656      	mov	r6, sl
 800e568:	465f      	mov	r7, fp
 800e56a:	4642      	mov	r2, r8
 800e56c:	464b      	mov	r3, r9
 800e56e:	4630      	mov	r0, r6
 800e570:	4639      	mov	r1, r7
 800e572:	f7f2 f973 	bl	800085c <__aeabi_ddiv>
 800e576:	f7f2 faf7 	bl	8000b68 <__aeabi_d2iz>
 800e57a:	4682      	mov	sl, r0
 800e57c:	f7f1 ffda 	bl	8000534 <__aeabi_i2d>
 800e580:	4642      	mov	r2, r8
 800e582:	464b      	mov	r3, r9
 800e584:	f7f2 f840 	bl	8000608 <__aeabi_dmul>
 800e588:	4602      	mov	r2, r0
 800e58a:	460b      	mov	r3, r1
 800e58c:	4630      	mov	r0, r6
 800e58e:	4639      	mov	r1, r7
 800e590:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e594:	f7f1 fe80 	bl	8000298 <__aeabi_dsub>
 800e598:	f805 6b01 	strb.w	r6, [r5], #1
 800e59c:	9e01      	ldr	r6, [sp, #4]
 800e59e:	9f03      	ldr	r7, [sp, #12]
 800e5a0:	1bae      	subs	r6, r5, r6
 800e5a2:	42b7      	cmp	r7, r6
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	d135      	bne.n	800e616 <_dtoa_r+0x6e6>
 800e5aa:	f7f1 fe77 	bl	800029c <__adddf3>
 800e5ae:	4642      	mov	r2, r8
 800e5b0:	464b      	mov	r3, r9
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	460f      	mov	r7, r1
 800e5b6:	f7f2 fab7 	bl	8000b28 <__aeabi_dcmpgt>
 800e5ba:	b9d0      	cbnz	r0, 800e5f2 <_dtoa_r+0x6c2>
 800e5bc:	4642      	mov	r2, r8
 800e5be:	464b      	mov	r3, r9
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	4639      	mov	r1, r7
 800e5c4:	f7f2 fa88 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5c8:	b110      	cbz	r0, 800e5d0 <_dtoa_r+0x6a0>
 800e5ca:	f01a 0f01 	tst.w	sl, #1
 800e5ce:	d110      	bne.n	800e5f2 <_dtoa_r+0x6c2>
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	ee18 1a10 	vmov	r1, s16
 800e5d6:	f000 ff3f 	bl	800f458 <_Bfree>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9800      	ldr	r0, [sp, #0]
 800e5de:	702b      	strb	r3, [r5, #0]
 800e5e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5e2:	3001      	adds	r0, #1
 800e5e4:	6018      	str	r0, [r3, #0]
 800e5e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f43f acf1 	beq.w	800dfd0 <_dtoa_r+0xa0>
 800e5ee:	601d      	str	r5, [r3, #0]
 800e5f0:	e4ee      	b.n	800dfd0 <_dtoa_r+0xa0>
 800e5f2:	9f00      	ldr	r7, [sp, #0]
 800e5f4:	462b      	mov	r3, r5
 800e5f6:	461d      	mov	r5, r3
 800e5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5fc:	2a39      	cmp	r2, #57	; 0x39
 800e5fe:	d106      	bne.n	800e60e <_dtoa_r+0x6de>
 800e600:	9a01      	ldr	r2, [sp, #4]
 800e602:	429a      	cmp	r2, r3
 800e604:	d1f7      	bne.n	800e5f6 <_dtoa_r+0x6c6>
 800e606:	9901      	ldr	r1, [sp, #4]
 800e608:	2230      	movs	r2, #48	; 0x30
 800e60a:	3701      	adds	r7, #1
 800e60c:	700a      	strb	r2, [r1, #0]
 800e60e:	781a      	ldrb	r2, [r3, #0]
 800e610:	3201      	adds	r2, #1
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	e790      	b.n	800e538 <_dtoa_r+0x608>
 800e616:	4ba6      	ldr	r3, [pc, #664]	; (800e8b0 <_dtoa_r+0x980>)
 800e618:	2200      	movs	r2, #0
 800e61a:	f7f1 fff5 	bl	8000608 <__aeabi_dmul>
 800e61e:	2200      	movs	r2, #0
 800e620:	2300      	movs	r3, #0
 800e622:	4606      	mov	r6, r0
 800e624:	460f      	mov	r7, r1
 800e626:	f7f2 fa57 	bl	8000ad8 <__aeabi_dcmpeq>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	d09d      	beq.n	800e56a <_dtoa_r+0x63a>
 800e62e:	e7cf      	b.n	800e5d0 <_dtoa_r+0x6a0>
 800e630:	9a08      	ldr	r2, [sp, #32]
 800e632:	2a00      	cmp	r2, #0
 800e634:	f000 80d7 	beq.w	800e7e6 <_dtoa_r+0x8b6>
 800e638:	9a06      	ldr	r2, [sp, #24]
 800e63a:	2a01      	cmp	r2, #1
 800e63c:	f300 80ba 	bgt.w	800e7b4 <_dtoa_r+0x884>
 800e640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e642:	2a00      	cmp	r2, #0
 800e644:	f000 80b2 	beq.w	800e7ac <_dtoa_r+0x87c>
 800e648:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e64c:	9e07      	ldr	r6, [sp, #28]
 800e64e:	9d04      	ldr	r5, [sp, #16]
 800e650:	9a04      	ldr	r2, [sp, #16]
 800e652:	441a      	add	r2, r3
 800e654:	9204      	str	r2, [sp, #16]
 800e656:	9a05      	ldr	r2, [sp, #20]
 800e658:	2101      	movs	r1, #1
 800e65a:	441a      	add	r2, r3
 800e65c:	4620      	mov	r0, r4
 800e65e:	9205      	str	r2, [sp, #20]
 800e660:	f000 fffc 	bl	800f65c <__i2b>
 800e664:	4607      	mov	r7, r0
 800e666:	2d00      	cmp	r5, #0
 800e668:	dd0c      	ble.n	800e684 <_dtoa_r+0x754>
 800e66a:	9b05      	ldr	r3, [sp, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dd09      	ble.n	800e684 <_dtoa_r+0x754>
 800e670:	42ab      	cmp	r3, r5
 800e672:	9a04      	ldr	r2, [sp, #16]
 800e674:	bfa8      	it	ge
 800e676:	462b      	movge	r3, r5
 800e678:	1ad2      	subs	r2, r2, r3
 800e67a:	9204      	str	r2, [sp, #16]
 800e67c:	9a05      	ldr	r2, [sp, #20]
 800e67e:	1aed      	subs	r5, r5, r3
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	9305      	str	r3, [sp, #20]
 800e684:	9b07      	ldr	r3, [sp, #28]
 800e686:	b31b      	cbz	r3, 800e6d0 <_dtoa_r+0x7a0>
 800e688:	9b08      	ldr	r3, [sp, #32]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f000 80af 	beq.w	800e7ee <_dtoa_r+0x8be>
 800e690:	2e00      	cmp	r6, #0
 800e692:	dd13      	ble.n	800e6bc <_dtoa_r+0x78c>
 800e694:	4639      	mov	r1, r7
 800e696:	4632      	mov	r2, r6
 800e698:	4620      	mov	r0, r4
 800e69a:	f001 f89f 	bl	800f7dc <__pow5mult>
 800e69e:	ee18 2a10 	vmov	r2, s16
 800e6a2:	4601      	mov	r1, r0
 800e6a4:	4607      	mov	r7, r0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f000 ffee 	bl	800f688 <__multiply>
 800e6ac:	ee18 1a10 	vmov	r1, s16
 800e6b0:	4680      	mov	r8, r0
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 fed0 	bl	800f458 <_Bfree>
 800e6b8:	ee08 8a10 	vmov	s16, r8
 800e6bc:	9b07      	ldr	r3, [sp, #28]
 800e6be:	1b9a      	subs	r2, r3, r6
 800e6c0:	d006      	beq.n	800e6d0 <_dtoa_r+0x7a0>
 800e6c2:	ee18 1a10 	vmov	r1, s16
 800e6c6:	4620      	mov	r0, r4
 800e6c8:	f001 f888 	bl	800f7dc <__pow5mult>
 800e6cc:	ee08 0a10 	vmov	s16, r0
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f000 ffc2 	bl	800f65c <__i2b>
 800e6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	4606      	mov	r6, r0
 800e6de:	f340 8088 	ble.w	800e7f2 <_dtoa_r+0x8c2>
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	4601      	mov	r1, r0
 800e6e6:	4620      	mov	r0, r4
 800e6e8:	f001 f878 	bl	800f7dc <__pow5mult>
 800e6ec:	9b06      	ldr	r3, [sp, #24]
 800e6ee:	2b01      	cmp	r3, #1
 800e6f0:	4606      	mov	r6, r0
 800e6f2:	f340 8081 	ble.w	800e7f8 <_dtoa_r+0x8c8>
 800e6f6:	f04f 0800 	mov.w	r8, #0
 800e6fa:	6933      	ldr	r3, [r6, #16]
 800e6fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e700:	6918      	ldr	r0, [r3, #16]
 800e702:	f000 ff5b 	bl	800f5bc <__hi0bits>
 800e706:	f1c0 0020 	rsb	r0, r0, #32
 800e70a:	9b05      	ldr	r3, [sp, #20]
 800e70c:	4418      	add	r0, r3
 800e70e:	f010 001f 	ands.w	r0, r0, #31
 800e712:	f000 8092 	beq.w	800e83a <_dtoa_r+0x90a>
 800e716:	f1c0 0320 	rsb	r3, r0, #32
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	f340 808a 	ble.w	800e834 <_dtoa_r+0x904>
 800e720:	f1c0 001c 	rsb	r0, r0, #28
 800e724:	9b04      	ldr	r3, [sp, #16]
 800e726:	4403      	add	r3, r0
 800e728:	9304      	str	r3, [sp, #16]
 800e72a:	9b05      	ldr	r3, [sp, #20]
 800e72c:	4403      	add	r3, r0
 800e72e:	4405      	add	r5, r0
 800e730:	9305      	str	r3, [sp, #20]
 800e732:	9b04      	ldr	r3, [sp, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd07      	ble.n	800e748 <_dtoa_r+0x818>
 800e738:	ee18 1a10 	vmov	r1, s16
 800e73c:	461a      	mov	r2, r3
 800e73e:	4620      	mov	r0, r4
 800e740:	f001 f8a6 	bl	800f890 <__lshift>
 800e744:	ee08 0a10 	vmov	s16, r0
 800e748:	9b05      	ldr	r3, [sp, #20]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	dd05      	ble.n	800e75a <_dtoa_r+0x82a>
 800e74e:	4631      	mov	r1, r6
 800e750:	461a      	mov	r2, r3
 800e752:	4620      	mov	r0, r4
 800e754:	f001 f89c 	bl	800f890 <__lshift>
 800e758:	4606      	mov	r6, r0
 800e75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d06e      	beq.n	800e83e <_dtoa_r+0x90e>
 800e760:	ee18 0a10 	vmov	r0, s16
 800e764:	4631      	mov	r1, r6
 800e766:	f001 f903 	bl	800f970 <__mcmp>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	da67      	bge.n	800e83e <_dtoa_r+0x90e>
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	3b01      	subs	r3, #1
 800e772:	ee18 1a10 	vmov	r1, s16
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	220a      	movs	r2, #10
 800e77a:	2300      	movs	r3, #0
 800e77c:	4620      	mov	r0, r4
 800e77e:	f000 fe8d 	bl	800f49c <__multadd>
 800e782:	9b08      	ldr	r3, [sp, #32]
 800e784:	ee08 0a10 	vmov	s16, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f000 81b1 	beq.w	800eaf0 <_dtoa_r+0xbc0>
 800e78e:	2300      	movs	r3, #0
 800e790:	4639      	mov	r1, r7
 800e792:	220a      	movs	r2, #10
 800e794:	4620      	mov	r0, r4
 800e796:	f000 fe81 	bl	800f49c <__multadd>
 800e79a:	9b02      	ldr	r3, [sp, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	4607      	mov	r7, r0
 800e7a0:	f300 808e 	bgt.w	800e8c0 <_dtoa_r+0x990>
 800e7a4:	9b06      	ldr	r3, [sp, #24]
 800e7a6:	2b02      	cmp	r3, #2
 800e7a8:	dc51      	bgt.n	800e84e <_dtoa_r+0x91e>
 800e7aa:	e089      	b.n	800e8c0 <_dtoa_r+0x990>
 800e7ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e7ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7b2:	e74b      	b.n	800e64c <_dtoa_r+0x71c>
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	1e5e      	subs	r6, r3, #1
 800e7b8:	9b07      	ldr	r3, [sp, #28]
 800e7ba:	42b3      	cmp	r3, r6
 800e7bc:	bfbf      	itttt	lt
 800e7be:	9b07      	ldrlt	r3, [sp, #28]
 800e7c0:	9607      	strlt	r6, [sp, #28]
 800e7c2:	1af2      	sublt	r2, r6, r3
 800e7c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e7c6:	bfb6      	itet	lt
 800e7c8:	189b      	addlt	r3, r3, r2
 800e7ca:	1b9e      	subge	r6, r3, r6
 800e7cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	bfb8      	it	lt
 800e7d2:	2600      	movlt	r6, #0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	bfb7      	itett	lt
 800e7d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e7dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e7e0:	1a9d      	sublt	r5, r3, r2
 800e7e2:	2300      	movlt	r3, #0
 800e7e4:	e734      	b.n	800e650 <_dtoa_r+0x720>
 800e7e6:	9e07      	ldr	r6, [sp, #28]
 800e7e8:	9d04      	ldr	r5, [sp, #16]
 800e7ea:	9f08      	ldr	r7, [sp, #32]
 800e7ec:	e73b      	b.n	800e666 <_dtoa_r+0x736>
 800e7ee:	9a07      	ldr	r2, [sp, #28]
 800e7f0:	e767      	b.n	800e6c2 <_dtoa_r+0x792>
 800e7f2:	9b06      	ldr	r3, [sp, #24]
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	dc18      	bgt.n	800e82a <_dtoa_r+0x8fa>
 800e7f8:	f1ba 0f00 	cmp.w	sl, #0
 800e7fc:	d115      	bne.n	800e82a <_dtoa_r+0x8fa>
 800e7fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e802:	b993      	cbnz	r3, 800e82a <_dtoa_r+0x8fa>
 800e804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e808:	0d1b      	lsrs	r3, r3, #20
 800e80a:	051b      	lsls	r3, r3, #20
 800e80c:	b183      	cbz	r3, 800e830 <_dtoa_r+0x900>
 800e80e:	9b04      	ldr	r3, [sp, #16]
 800e810:	3301      	adds	r3, #1
 800e812:	9304      	str	r3, [sp, #16]
 800e814:	9b05      	ldr	r3, [sp, #20]
 800e816:	3301      	adds	r3, #1
 800e818:	9305      	str	r3, [sp, #20]
 800e81a:	f04f 0801 	mov.w	r8, #1
 800e81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e820:	2b00      	cmp	r3, #0
 800e822:	f47f af6a 	bne.w	800e6fa <_dtoa_r+0x7ca>
 800e826:	2001      	movs	r0, #1
 800e828:	e76f      	b.n	800e70a <_dtoa_r+0x7da>
 800e82a:	f04f 0800 	mov.w	r8, #0
 800e82e:	e7f6      	b.n	800e81e <_dtoa_r+0x8ee>
 800e830:	4698      	mov	r8, r3
 800e832:	e7f4      	b.n	800e81e <_dtoa_r+0x8ee>
 800e834:	f43f af7d 	beq.w	800e732 <_dtoa_r+0x802>
 800e838:	4618      	mov	r0, r3
 800e83a:	301c      	adds	r0, #28
 800e83c:	e772      	b.n	800e724 <_dtoa_r+0x7f4>
 800e83e:	9b03      	ldr	r3, [sp, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	dc37      	bgt.n	800e8b4 <_dtoa_r+0x984>
 800e844:	9b06      	ldr	r3, [sp, #24]
 800e846:	2b02      	cmp	r3, #2
 800e848:	dd34      	ble.n	800e8b4 <_dtoa_r+0x984>
 800e84a:	9b03      	ldr	r3, [sp, #12]
 800e84c:	9302      	str	r3, [sp, #8]
 800e84e:	9b02      	ldr	r3, [sp, #8]
 800e850:	b96b      	cbnz	r3, 800e86e <_dtoa_r+0x93e>
 800e852:	4631      	mov	r1, r6
 800e854:	2205      	movs	r2, #5
 800e856:	4620      	mov	r0, r4
 800e858:	f000 fe20 	bl	800f49c <__multadd>
 800e85c:	4601      	mov	r1, r0
 800e85e:	4606      	mov	r6, r0
 800e860:	ee18 0a10 	vmov	r0, s16
 800e864:	f001 f884 	bl	800f970 <__mcmp>
 800e868:	2800      	cmp	r0, #0
 800e86a:	f73f adbb 	bgt.w	800e3e4 <_dtoa_r+0x4b4>
 800e86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e870:	9d01      	ldr	r5, [sp, #4]
 800e872:	43db      	mvns	r3, r3
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	f04f 0800 	mov.w	r8, #0
 800e87a:	4631      	mov	r1, r6
 800e87c:	4620      	mov	r0, r4
 800e87e:	f000 fdeb 	bl	800f458 <_Bfree>
 800e882:	2f00      	cmp	r7, #0
 800e884:	f43f aea4 	beq.w	800e5d0 <_dtoa_r+0x6a0>
 800e888:	f1b8 0f00 	cmp.w	r8, #0
 800e88c:	d005      	beq.n	800e89a <_dtoa_r+0x96a>
 800e88e:	45b8      	cmp	r8, r7
 800e890:	d003      	beq.n	800e89a <_dtoa_r+0x96a>
 800e892:	4641      	mov	r1, r8
 800e894:	4620      	mov	r0, r4
 800e896:	f000 fddf 	bl	800f458 <_Bfree>
 800e89a:	4639      	mov	r1, r7
 800e89c:	4620      	mov	r0, r4
 800e89e:	f000 fddb 	bl	800f458 <_Bfree>
 800e8a2:	e695      	b.n	800e5d0 <_dtoa_r+0x6a0>
 800e8a4:	2600      	movs	r6, #0
 800e8a6:	4637      	mov	r7, r6
 800e8a8:	e7e1      	b.n	800e86e <_dtoa_r+0x93e>
 800e8aa:	9700      	str	r7, [sp, #0]
 800e8ac:	4637      	mov	r7, r6
 800e8ae:	e599      	b.n	800e3e4 <_dtoa_r+0x4b4>
 800e8b0:	40240000 	.word	0x40240000
 800e8b4:	9b08      	ldr	r3, [sp, #32]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	f000 80ca 	beq.w	800ea50 <_dtoa_r+0xb20>
 800e8bc:	9b03      	ldr	r3, [sp, #12]
 800e8be:	9302      	str	r3, [sp, #8]
 800e8c0:	2d00      	cmp	r5, #0
 800e8c2:	dd05      	ble.n	800e8d0 <_dtoa_r+0x9a0>
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	462a      	mov	r2, r5
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f000 ffe1 	bl	800f890 <__lshift>
 800e8ce:	4607      	mov	r7, r0
 800e8d0:	f1b8 0f00 	cmp.w	r8, #0
 800e8d4:	d05b      	beq.n	800e98e <_dtoa_r+0xa5e>
 800e8d6:	6879      	ldr	r1, [r7, #4]
 800e8d8:	4620      	mov	r0, r4
 800e8da:	f000 fd7d 	bl	800f3d8 <_Balloc>
 800e8de:	4605      	mov	r5, r0
 800e8e0:	b928      	cbnz	r0, 800e8ee <_dtoa_r+0x9be>
 800e8e2:	4b87      	ldr	r3, [pc, #540]	; (800eb00 <_dtoa_r+0xbd0>)
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e8ea:	f7ff bb3b 	b.w	800df64 <_dtoa_r+0x34>
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	3202      	adds	r2, #2
 800e8f2:	0092      	lsls	r2, r2, #2
 800e8f4:	f107 010c 	add.w	r1, r7, #12
 800e8f8:	300c      	adds	r0, #12
 800e8fa:	f7fd fab7 	bl	800be6c <memcpy>
 800e8fe:	2201      	movs	r2, #1
 800e900:	4629      	mov	r1, r5
 800e902:	4620      	mov	r0, r4
 800e904:	f000 ffc4 	bl	800f890 <__lshift>
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	f103 0901 	add.w	r9, r3, #1
 800e90e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e912:	4413      	add	r3, r2
 800e914:	9305      	str	r3, [sp, #20]
 800e916:	f00a 0301 	and.w	r3, sl, #1
 800e91a:	46b8      	mov	r8, r7
 800e91c:	9304      	str	r3, [sp, #16]
 800e91e:	4607      	mov	r7, r0
 800e920:	4631      	mov	r1, r6
 800e922:	ee18 0a10 	vmov	r0, s16
 800e926:	f7ff fa77 	bl	800de18 <quorem>
 800e92a:	4641      	mov	r1, r8
 800e92c:	9002      	str	r0, [sp, #8]
 800e92e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e932:	ee18 0a10 	vmov	r0, s16
 800e936:	f001 f81b 	bl	800f970 <__mcmp>
 800e93a:	463a      	mov	r2, r7
 800e93c:	9003      	str	r0, [sp, #12]
 800e93e:	4631      	mov	r1, r6
 800e940:	4620      	mov	r0, r4
 800e942:	f001 f831 	bl	800f9a8 <__mdiff>
 800e946:	68c2      	ldr	r2, [r0, #12]
 800e948:	f109 3bff 	add.w	fp, r9, #4294967295
 800e94c:	4605      	mov	r5, r0
 800e94e:	bb02      	cbnz	r2, 800e992 <_dtoa_r+0xa62>
 800e950:	4601      	mov	r1, r0
 800e952:	ee18 0a10 	vmov	r0, s16
 800e956:	f001 f80b 	bl	800f970 <__mcmp>
 800e95a:	4602      	mov	r2, r0
 800e95c:	4629      	mov	r1, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	9207      	str	r2, [sp, #28]
 800e962:	f000 fd79 	bl	800f458 <_Bfree>
 800e966:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e96a:	ea43 0102 	orr.w	r1, r3, r2
 800e96e:	9b04      	ldr	r3, [sp, #16]
 800e970:	430b      	orrs	r3, r1
 800e972:	464d      	mov	r5, r9
 800e974:	d10f      	bne.n	800e996 <_dtoa_r+0xa66>
 800e976:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e97a:	d02a      	beq.n	800e9d2 <_dtoa_r+0xaa2>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	dd02      	ble.n	800e988 <_dtoa_r+0xa58>
 800e982:	9b02      	ldr	r3, [sp, #8]
 800e984:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e988:	f88b a000 	strb.w	sl, [fp]
 800e98c:	e775      	b.n	800e87a <_dtoa_r+0x94a>
 800e98e:	4638      	mov	r0, r7
 800e990:	e7ba      	b.n	800e908 <_dtoa_r+0x9d8>
 800e992:	2201      	movs	r2, #1
 800e994:	e7e2      	b.n	800e95c <_dtoa_r+0xa2c>
 800e996:	9b03      	ldr	r3, [sp, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	db04      	blt.n	800e9a6 <_dtoa_r+0xa76>
 800e99c:	9906      	ldr	r1, [sp, #24]
 800e99e:	430b      	orrs	r3, r1
 800e9a0:	9904      	ldr	r1, [sp, #16]
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	d122      	bne.n	800e9ec <_dtoa_r+0xabc>
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	ddee      	ble.n	800e988 <_dtoa_r+0xa58>
 800e9aa:	ee18 1a10 	vmov	r1, s16
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f000 ff6d 	bl	800f890 <__lshift>
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	ee08 0a10 	vmov	s16, r0
 800e9bc:	f000 ffd8 	bl	800f970 <__mcmp>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	dc03      	bgt.n	800e9cc <_dtoa_r+0xa9c>
 800e9c4:	d1e0      	bne.n	800e988 <_dtoa_r+0xa58>
 800e9c6:	f01a 0f01 	tst.w	sl, #1
 800e9ca:	d0dd      	beq.n	800e988 <_dtoa_r+0xa58>
 800e9cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e9d0:	d1d7      	bne.n	800e982 <_dtoa_r+0xa52>
 800e9d2:	2339      	movs	r3, #57	; 0x39
 800e9d4:	f88b 3000 	strb.w	r3, [fp]
 800e9d8:	462b      	mov	r3, r5
 800e9da:	461d      	mov	r5, r3
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e9e2:	2a39      	cmp	r2, #57	; 0x39
 800e9e4:	d071      	beq.n	800eaca <_dtoa_r+0xb9a>
 800e9e6:	3201      	adds	r2, #1
 800e9e8:	701a      	strb	r2, [r3, #0]
 800e9ea:	e746      	b.n	800e87a <_dtoa_r+0x94a>
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	dd07      	ble.n	800ea00 <_dtoa_r+0xad0>
 800e9f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e9f4:	d0ed      	beq.n	800e9d2 <_dtoa_r+0xaa2>
 800e9f6:	f10a 0301 	add.w	r3, sl, #1
 800e9fa:	f88b 3000 	strb.w	r3, [fp]
 800e9fe:	e73c      	b.n	800e87a <_dtoa_r+0x94a>
 800ea00:	9b05      	ldr	r3, [sp, #20]
 800ea02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ea06:	4599      	cmp	r9, r3
 800ea08:	d047      	beq.n	800ea9a <_dtoa_r+0xb6a>
 800ea0a:	ee18 1a10 	vmov	r1, s16
 800ea0e:	2300      	movs	r3, #0
 800ea10:	220a      	movs	r2, #10
 800ea12:	4620      	mov	r0, r4
 800ea14:	f000 fd42 	bl	800f49c <__multadd>
 800ea18:	45b8      	cmp	r8, r7
 800ea1a:	ee08 0a10 	vmov	s16, r0
 800ea1e:	f04f 0300 	mov.w	r3, #0
 800ea22:	f04f 020a 	mov.w	r2, #10
 800ea26:	4641      	mov	r1, r8
 800ea28:	4620      	mov	r0, r4
 800ea2a:	d106      	bne.n	800ea3a <_dtoa_r+0xb0a>
 800ea2c:	f000 fd36 	bl	800f49c <__multadd>
 800ea30:	4680      	mov	r8, r0
 800ea32:	4607      	mov	r7, r0
 800ea34:	f109 0901 	add.w	r9, r9, #1
 800ea38:	e772      	b.n	800e920 <_dtoa_r+0x9f0>
 800ea3a:	f000 fd2f 	bl	800f49c <__multadd>
 800ea3e:	4639      	mov	r1, r7
 800ea40:	4680      	mov	r8, r0
 800ea42:	2300      	movs	r3, #0
 800ea44:	220a      	movs	r2, #10
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 fd28 	bl	800f49c <__multadd>
 800ea4c:	4607      	mov	r7, r0
 800ea4e:	e7f1      	b.n	800ea34 <_dtoa_r+0xb04>
 800ea50:	9b03      	ldr	r3, [sp, #12]
 800ea52:	9302      	str	r3, [sp, #8]
 800ea54:	9d01      	ldr	r5, [sp, #4]
 800ea56:	ee18 0a10 	vmov	r0, s16
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	f7ff f9dc 	bl	800de18 <quorem>
 800ea60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ea64:	9b01      	ldr	r3, [sp, #4]
 800ea66:	f805 ab01 	strb.w	sl, [r5], #1
 800ea6a:	1aea      	subs	r2, r5, r3
 800ea6c:	9b02      	ldr	r3, [sp, #8]
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	dd09      	ble.n	800ea86 <_dtoa_r+0xb56>
 800ea72:	ee18 1a10 	vmov	r1, s16
 800ea76:	2300      	movs	r3, #0
 800ea78:	220a      	movs	r2, #10
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 fd0e 	bl	800f49c <__multadd>
 800ea80:	ee08 0a10 	vmov	s16, r0
 800ea84:	e7e7      	b.n	800ea56 <_dtoa_r+0xb26>
 800ea86:	9b02      	ldr	r3, [sp, #8]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bfc8      	it	gt
 800ea8c:	461d      	movgt	r5, r3
 800ea8e:	9b01      	ldr	r3, [sp, #4]
 800ea90:	bfd8      	it	le
 800ea92:	2501      	movle	r5, #1
 800ea94:	441d      	add	r5, r3
 800ea96:	f04f 0800 	mov.w	r8, #0
 800ea9a:	ee18 1a10 	vmov	r1, s16
 800ea9e:	2201      	movs	r2, #1
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 fef5 	bl	800f890 <__lshift>
 800eaa6:	4631      	mov	r1, r6
 800eaa8:	ee08 0a10 	vmov	s16, r0
 800eaac:	f000 ff60 	bl	800f970 <__mcmp>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	dc91      	bgt.n	800e9d8 <_dtoa_r+0xaa8>
 800eab4:	d102      	bne.n	800eabc <_dtoa_r+0xb8c>
 800eab6:	f01a 0f01 	tst.w	sl, #1
 800eaba:	d18d      	bne.n	800e9d8 <_dtoa_r+0xaa8>
 800eabc:	462b      	mov	r3, r5
 800eabe:	461d      	mov	r5, r3
 800eac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eac4:	2a30      	cmp	r2, #48	; 0x30
 800eac6:	d0fa      	beq.n	800eabe <_dtoa_r+0xb8e>
 800eac8:	e6d7      	b.n	800e87a <_dtoa_r+0x94a>
 800eaca:	9a01      	ldr	r2, [sp, #4]
 800eacc:	429a      	cmp	r2, r3
 800eace:	d184      	bne.n	800e9da <_dtoa_r+0xaaa>
 800ead0:	9b00      	ldr	r3, [sp, #0]
 800ead2:	3301      	adds	r3, #1
 800ead4:	9300      	str	r3, [sp, #0]
 800ead6:	2331      	movs	r3, #49	; 0x31
 800ead8:	7013      	strb	r3, [r2, #0]
 800eada:	e6ce      	b.n	800e87a <_dtoa_r+0x94a>
 800eadc:	4b09      	ldr	r3, [pc, #36]	; (800eb04 <_dtoa_r+0xbd4>)
 800eade:	f7ff ba95 	b.w	800e00c <_dtoa_r+0xdc>
 800eae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f47f aa6e 	bne.w	800dfc6 <_dtoa_r+0x96>
 800eaea:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <_dtoa_r+0xbd8>)
 800eaec:	f7ff ba8e 	b.w	800e00c <_dtoa_r+0xdc>
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dcae      	bgt.n	800ea54 <_dtoa_r+0xb24>
 800eaf6:	9b06      	ldr	r3, [sp, #24]
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	f73f aea8 	bgt.w	800e84e <_dtoa_r+0x91e>
 800eafe:	e7a9      	b.n	800ea54 <_dtoa_r+0xb24>
 800eb00:	08011060 	.word	0x08011060
 800eb04:	08010e64 	.word	0x08010e64
 800eb08:	08010fe1 	.word	0x08010fe1

0800eb0c <__sflush_r>:
 800eb0c:	898a      	ldrh	r2, [r1, #12]
 800eb0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb12:	4605      	mov	r5, r0
 800eb14:	0710      	lsls	r0, r2, #28
 800eb16:	460c      	mov	r4, r1
 800eb18:	d458      	bmi.n	800ebcc <__sflush_r+0xc0>
 800eb1a:	684b      	ldr	r3, [r1, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	dc05      	bgt.n	800eb2c <__sflush_r+0x20>
 800eb20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	dc02      	bgt.n	800eb2c <__sflush_r+0x20>
 800eb26:	2000      	movs	r0, #0
 800eb28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb2e:	2e00      	cmp	r6, #0
 800eb30:	d0f9      	beq.n	800eb26 <__sflush_r+0x1a>
 800eb32:	2300      	movs	r3, #0
 800eb34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb38:	682f      	ldr	r7, [r5, #0]
 800eb3a:	602b      	str	r3, [r5, #0]
 800eb3c:	d032      	beq.n	800eba4 <__sflush_r+0x98>
 800eb3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb40:	89a3      	ldrh	r3, [r4, #12]
 800eb42:	075a      	lsls	r2, r3, #29
 800eb44:	d505      	bpl.n	800eb52 <__sflush_r+0x46>
 800eb46:	6863      	ldr	r3, [r4, #4]
 800eb48:	1ac0      	subs	r0, r0, r3
 800eb4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb4c:	b10b      	cbz	r3, 800eb52 <__sflush_r+0x46>
 800eb4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb50:	1ac0      	subs	r0, r0, r3
 800eb52:	2300      	movs	r3, #0
 800eb54:	4602      	mov	r2, r0
 800eb56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb58:	6a21      	ldr	r1, [r4, #32]
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	47b0      	blx	r6
 800eb5e:	1c43      	adds	r3, r0, #1
 800eb60:	89a3      	ldrh	r3, [r4, #12]
 800eb62:	d106      	bne.n	800eb72 <__sflush_r+0x66>
 800eb64:	6829      	ldr	r1, [r5, #0]
 800eb66:	291d      	cmp	r1, #29
 800eb68:	d82c      	bhi.n	800ebc4 <__sflush_r+0xb8>
 800eb6a:	4a2a      	ldr	r2, [pc, #168]	; (800ec14 <__sflush_r+0x108>)
 800eb6c:	40ca      	lsrs	r2, r1
 800eb6e:	07d6      	lsls	r6, r2, #31
 800eb70:	d528      	bpl.n	800ebc4 <__sflush_r+0xb8>
 800eb72:	2200      	movs	r2, #0
 800eb74:	6062      	str	r2, [r4, #4]
 800eb76:	04d9      	lsls	r1, r3, #19
 800eb78:	6922      	ldr	r2, [r4, #16]
 800eb7a:	6022      	str	r2, [r4, #0]
 800eb7c:	d504      	bpl.n	800eb88 <__sflush_r+0x7c>
 800eb7e:	1c42      	adds	r2, r0, #1
 800eb80:	d101      	bne.n	800eb86 <__sflush_r+0x7a>
 800eb82:	682b      	ldr	r3, [r5, #0]
 800eb84:	b903      	cbnz	r3, 800eb88 <__sflush_r+0x7c>
 800eb86:	6560      	str	r0, [r4, #84]	; 0x54
 800eb88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb8a:	602f      	str	r7, [r5, #0]
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	d0ca      	beq.n	800eb26 <__sflush_r+0x1a>
 800eb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb94:	4299      	cmp	r1, r3
 800eb96:	d002      	beq.n	800eb9e <__sflush_r+0x92>
 800eb98:	4628      	mov	r0, r5
 800eb9a:	f7fd f997 	bl	800becc <_free_r>
 800eb9e:	2000      	movs	r0, #0
 800eba0:	6360      	str	r0, [r4, #52]	; 0x34
 800eba2:	e7c1      	b.n	800eb28 <__sflush_r+0x1c>
 800eba4:	6a21      	ldr	r1, [r4, #32]
 800eba6:	2301      	movs	r3, #1
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b0      	blx	r6
 800ebac:	1c41      	adds	r1, r0, #1
 800ebae:	d1c7      	bne.n	800eb40 <__sflush_r+0x34>
 800ebb0:	682b      	ldr	r3, [r5, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d0c4      	beq.n	800eb40 <__sflush_r+0x34>
 800ebb6:	2b1d      	cmp	r3, #29
 800ebb8:	d001      	beq.n	800ebbe <__sflush_r+0xb2>
 800ebba:	2b16      	cmp	r3, #22
 800ebbc:	d101      	bne.n	800ebc2 <__sflush_r+0xb6>
 800ebbe:	602f      	str	r7, [r5, #0]
 800ebc0:	e7b1      	b.n	800eb26 <__sflush_r+0x1a>
 800ebc2:	89a3      	ldrh	r3, [r4, #12]
 800ebc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebc8:	81a3      	strh	r3, [r4, #12]
 800ebca:	e7ad      	b.n	800eb28 <__sflush_r+0x1c>
 800ebcc:	690f      	ldr	r7, [r1, #16]
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	d0a9      	beq.n	800eb26 <__sflush_r+0x1a>
 800ebd2:	0793      	lsls	r3, r2, #30
 800ebd4:	680e      	ldr	r6, [r1, #0]
 800ebd6:	bf08      	it	eq
 800ebd8:	694b      	ldreq	r3, [r1, #20]
 800ebda:	600f      	str	r7, [r1, #0]
 800ebdc:	bf18      	it	ne
 800ebde:	2300      	movne	r3, #0
 800ebe0:	eba6 0807 	sub.w	r8, r6, r7
 800ebe4:	608b      	str	r3, [r1, #8]
 800ebe6:	f1b8 0f00 	cmp.w	r8, #0
 800ebea:	dd9c      	ble.n	800eb26 <__sflush_r+0x1a>
 800ebec:	6a21      	ldr	r1, [r4, #32]
 800ebee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebf0:	4643      	mov	r3, r8
 800ebf2:	463a      	mov	r2, r7
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	47b0      	blx	r6
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	dc06      	bgt.n	800ec0a <__sflush_r+0xfe>
 800ebfc:	89a3      	ldrh	r3, [r4, #12]
 800ebfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec02:	81a3      	strh	r3, [r4, #12]
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	e78e      	b.n	800eb28 <__sflush_r+0x1c>
 800ec0a:	4407      	add	r7, r0
 800ec0c:	eba8 0800 	sub.w	r8, r8, r0
 800ec10:	e7e9      	b.n	800ebe6 <__sflush_r+0xda>
 800ec12:	bf00      	nop
 800ec14:	20400001 	.word	0x20400001

0800ec18 <_fflush_r>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	690b      	ldr	r3, [r1, #16]
 800ec1c:	4605      	mov	r5, r0
 800ec1e:	460c      	mov	r4, r1
 800ec20:	b913      	cbnz	r3, 800ec28 <_fflush_r+0x10>
 800ec22:	2500      	movs	r5, #0
 800ec24:	4628      	mov	r0, r5
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	b118      	cbz	r0, 800ec32 <_fflush_r+0x1a>
 800ec2a:	6983      	ldr	r3, [r0, #24]
 800ec2c:	b90b      	cbnz	r3, 800ec32 <_fflush_r+0x1a>
 800ec2e:	f7fd f847 	bl	800bcc0 <__sinit>
 800ec32:	4b14      	ldr	r3, [pc, #80]	; (800ec84 <_fflush_r+0x6c>)
 800ec34:	429c      	cmp	r4, r3
 800ec36:	d11b      	bne.n	800ec70 <_fflush_r+0x58>
 800ec38:	686c      	ldr	r4, [r5, #4]
 800ec3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d0ef      	beq.n	800ec22 <_fflush_r+0xa>
 800ec42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec44:	07d0      	lsls	r0, r2, #31
 800ec46:	d404      	bmi.n	800ec52 <_fflush_r+0x3a>
 800ec48:	0599      	lsls	r1, r3, #22
 800ec4a:	d402      	bmi.n	800ec52 <_fflush_r+0x3a>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f7fd f8fa 	bl	800be46 <__retarget_lock_acquire_recursive>
 800ec52:	4628      	mov	r0, r5
 800ec54:	4621      	mov	r1, r4
 800ec56:	f7ff ff59 	bl	800eb0c <__sflush_r>
 800ec5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec5c:	07da      	lsls	r2, r3, #31
 800ec5e:	4605      	mov	r5, r0
 800ec60:	d4e0      	bmi.n	800ec24 <_fflush_r+0xc>
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	059b      	lsls	r3, r3, #22
 800ec66:	d4dd      	bmi.n	800ec24 <_fflush_r+0xc>
 800ec68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec6a:	f7fd f8ed 	bl	800be48 <__retarget_lock_release_recursive>
 800ec6e:	e7d9      	b.n	800ec24 <_fflush_r+0xc>
 800ec70:	4b05      	ldr	r3, [pc, #20]	; (800ec88 <_fflush_r+0x70>)
 800ec72:	429c      	cmp	r4, r3
 800ec74:	d101      	bne.n	800ec7a <_fflush_r+0x62>
 800ec76:	68ac      	ldr	r4, [r5, #8]
 800ec78:	e7df      	b.n	800ec3a <_fflush_r+0x22>
 800ec7a:	4b04      	ldr	r3, [pc, #16]	; (800ec8c <_fflush_r+0x74>)
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	bf08      	it	eq
 800ec80:	68ec      	ldreq	r4, [r5, #12]
 800ec82:	e7da      	b.n	800ec3a <_fflush_r+0x22>
 800ec84:	08010e10 	.word	0x08010e10
 800ec88:	08010e30 	.word	0x08010e30
 800ec8c:	08010df0 	.word	0x08010df0

0800ec90 <rshift>:
 800ec90:	6903      	ldr	r3, [r0, #16]
 800ec92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec9e:	f100 0414 	add.w	r4, r0, #20
 800eca2:	dd45      	ble.n	800ed30 <rshift+0xa0>
 800eca4:	f011 011f 	ands.w	r1, r1, #31
 800eca8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ecac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ecb0:	d10c      	bne.n	800eccc <rshift+0x3c>
 800ecb2:	f100 0710 	add.w	r7, r0, #16
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	42b1      	cmp	r1, r6
 800ecba:	d334      	bcc.n	800ed26 <rshift+0x96>
 800ecbc:	1a9b      	subs	r3, r3, r2
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	1eea      	subs	r2, r5, #3
 800ecc2:	4296      	cmp	r6, r2
 800ecc4:	bf38      	it	cc
 800ecc6:	2300      	movcc	r3, #0
 800ecc8:	4423      	add	r3, r4
 800ecca:	e015      	b.n	800ecf8 <rshift+0x68>
 800eccc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecd0:	f1c1 0820 	rsb	r8, r1, #32
 800ecd4:	40cf      	lsrs	r7, r1
 800ecd6:	f105 0e04 	add.w	lr, r5, #4
 800ecda:	46a1      	mov	r9, r4
 800ecdc:	4576      	cmp	r6, lr
 800ecde:	46f4      	mov	ip, lr
 800ece0:	d815      	bhi.n	800ed0e <rshift+0x7e>
 800ece2:	1a9a      	subs	r2, r3, r2
 800ece4:	0092      	lsls	r2, r2, #2
 800ece6:	3a04      	subs	r2, #4
 800ece8:	3501      	adds	r5, #1
 800ecea:	42ae      	cmp	r6, r5
 800ecec:	bf38      	it	cc
 800ecee:	2200      	movcc	r2, #0
 800ecf0:	18a3      	adds	r3, r4, r2
 800ecf2:	50a7      	str	r7, [r4, r2]
 800ecf4:	b107      	cbz	r7, 800ecf8 <rshift+0x68>
 800ecf6:	3304      	adds	r3, #4
 800ecf8:	1b1a      	subs	r2, r3, r4
 800ecfa:	42a3      	cmp	r3, r4
 800ecfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed00:	bf08      	it	eq
 800ed02:	2300      	moveq	r3, #0
 800ed04:	6102      	str	r2, [r0, #16]
 800ed06:	bf08      	it	eq
 800ed08:	6143      	streq	r3, [r0, #20]
 800ed0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed0e:	f8dc c000 	ldr.w	ip, [ip]
 800ed12:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed16:	ea4c 0707 	orr.w	r7, ip, r7
 800ed1a:	f849 7b04 	str.w	r7, [r9], #4
 800ed1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed22:	40cf      	lsrs	r7, r1
 800ed24:	e7da      	b.n	800ecdc <rshift+0x4c>
 800ed26:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed2a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed2e:	e7c3      	b.n	800ecb8 <rshift+0x28>
 800ed30:	4623      	mov	r3, r4
 800ed32:	e7e1      	b.n	800ecf8 <rshift+0x68>

0800ed34 <__hexdig_fun>:
 800ed34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ed38:	2b09      	cmp	r3, #9
 800ed3a:	d802      	bhi.n	800ed42 <__hexdig_fun+0xe>
 800ed3c:	3820      	subs	r0, #32
 800ed3e:	b2c0      	uxtb	r0, r0
 800ed40:	4770      	bx	lr
 800ed42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed46:	2b05      	cmp	r3, #5
 800ed48:	d801      	bhi.n	800ed4e <__hexdig_fun+0x1a>
 800ed4a:	3847      	subs	r0, #71	; 0x47
 800ed4c:	e7f7      	b.n	800ed3e <__hexdig_fun+0xa>
 800ed4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ed52:	2b05      	cmp	r3, #5
 800ed54:	d801      	bhi.n	800ed5a <__hexdig_fun+0x26>
 800ed56:	3827      	subs	r0, #39	; 0x27
 800ed58:	e7f1      	b.n	800ed3e <__hexdig_fun+0xa>
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	4770      	bx	lr
	...

0800ed60 <__gethex>:
 800ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	ed2d 8b02 	vpush	{d8}
 800ed68:	b089      	sub	sp, #36	; 0x24
 800ed6a:	ee08 0a10 	vmov	s16, r0
 800ed6e:	9304      	str	r3, [sp, #16]
 800ed70:	4bb4      	ldr	r3, [pc, #720]	; (800f044 <__gethex+0x2e4>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	4618      	mov	r0, r3
 800ed78:	468b      	mov	fp, r1
 800ed7a:	4690      	mov	r8, r2
 800ed7c:	f7f1 fa30 	bl	80001e0 <strlen>
 800ed80:	9b01      	ldr	r3, [sp, #4]
 800ed82:	f8db 2000 	ldr.w	r2, [fp]
 800ed86:	4403      	add	r3, r0
 800ed88:	4682      	mov	sl, r0
 800ed8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ed8e:	9305      	str	r3, [sp, #20]
 800ed90:	1c93      	adds	r3, r2, #2
 800ed92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ed96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ed9a:	32fe      	adds	r2, #254	; 0xfe
 800ed9c:	18d1      	adds	r1, r2, r3
 800ed9e:	461f      	mov	r7, r3
 800eda0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eda4:	9100      	str	r1, [sp, #0]
 800eda6:	2830      	cmp	r0, #48	; 0x30
 800eda8:	d0f8      	beq.n	800ed9c <__gethex+0x3c>
 800edaa:	f7ff ffc3 	bl	800ed34 <__hexdig_fun>
 800edae:	4604      	mov	r4, r0
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d13a      	bne.n	800ee2a <__gethex+0xca>
 800edb4:	9901      	ldr	r1, [sp, #4]
 800edb6:	4652      	mov	r2, sl
 800edb8:	4638      	mov	r0, r7
 800edba:	f7fe f910 	bl	800cfde <strncmp>
 800edbe:	4605      	mov	r5, r0
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d168      	bne.n	800ee96 <__gethex+0x136>
 800edc4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800edc8:	eb07 060a 	add.w	r6, r7, sl
 800edcc:	f7ff ffb2 	bl	800ed34 <__hexdig_fun>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d062      	beq.n	800ee9a <__gethex+0x13a>
 800edd4:	4633      	mov	r3, r6
 800edd6:	7818      	ldrb	r0, [r3, #0]
 800edd8:	2830      	cmp	r0, #48	; 0x30
 800edda:	461f      	mov	r7, r3
 800eddc:	f103 0301 	add.w	r3, r3, #1
 800ede0:	d0f9      	beq.n	800edd6 <__gethex+0x76>
 800ede2:	f7ff ffa7 	bl	800ed34 <__hexdig_fun>
 800ede6:	2301      	movs	r3, #1
 800ede8:	fab0 f480 	clz	r4, r0
 800edec:	0964      	lsrs	r4, r4, #5
 800edee:	4635      	mov	r5, r6
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	463a      	mov	r2, r7
 800edf4:	4616      	mov	r6, r2
 800edf6:	3201      	adds	r2, #1
 800edf8:	7830      	ldrb	r0, [r6, #0]
 800edfa:	f7ff ff9b 	bl	800ed34 <__hexdig_fun>
 800edfe:	2800      	cmp	r0, #0
 800ee00:	d1f8      	bne.n	800edf4 <__gethex+0x94>
 800ee02:	9901      	ldr	r1, [sp, #4]
 800ee04:	4652      	mov	r2, sl
 800ee06:	4630      	mov	r0, r6
 800ee08:	f7fe f8e9 	bl	800cfde <strncmp>
 800ee0c:	b980      	cbnz	r0, 800ee30 <__gethex+0xd0>
 800ee0e:	b94d      	cbnz	r5, 800ee24 <__gethex+0xc4>
 800ee10:	eb06 050a 	add.w	r5, r6, sl
 800ee14:	462a      	mov	r2, r5
 800ee16:	4616      	mov	r6, r2
 800ee18:	3201      	adds	r2, #1
 800ee1a:	7830      	ldrb	r0, [r6, #0]
 800ee1c:	f7ff ff8a 	bl	800ed34 <__hexdig_fun>
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d1f8      	bne.n	800ee16 <__gethex+0xb6>
 800ee24:	1bad      	subs	r5, r5, r6
 800ee26:	00ad      	lsls	r5, r5, #2
 800ee28:	e004      	b.n	800ee34 <__gethex+0xd4>
 800ee2a:	2400      	movs	r4, #0
 800ee2c:	4625      	mov	r5, r4
 800ee2e:	e7e0      	b.n	800edf2 <__gethex+0x92>
 800ee30:	2d00      	cmp	r5, #0
 800ee32:	d1f7      	bne.n	800ee24 <__gethex+0xc4>
 800ee34:	7833      	ldrb	r3, [r6, #0]
 800ee36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee3a:	2b50      	cmp	r3, #80	; 0x50
 800ee3c:	d13b      	bne.n	800eeb6 <__gethex+0x156>
 800ee3e:	7873      	ldrb	r3, [r6, #1]
 800ee40:	2b2b      	cmp	r3, #43	; 0x2b
 800ee42:	d02c      	beq.n	800ee9e <__gethex+0x13e>
 800ee44:	2b2d      	cmp	r3, #45	; 0x2d
 800ee46:	d02e      	beq.n	800eea6 <__gethex+0x146>
 800ee48:	1c71      	adds	r1, r6, #1
 800ee4a:	f04f 0900 	mov.w	r9, #0
 800ee4e:	7808      	ldrb	r0, [r1, #0]
 800ee50:	f7ff ff70 	bl	800ed34 <__hexdig_fun>
 800ee54:	1e43      	subs	r3, r0, #1
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b18      	cmp	r3, #24
 800ee5a:	d82c      	bhi.n	800eeb6 <__gethex+0x156>
 800ee5c:	f1a0 0210 	sub.w	r2, r0, #16
 800ee60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee64:	f7ff ff66 	bl	800ed34 <__hexdig_fun>
 800ee68:	1e43      	subs	r3, r0, #1
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b18      	cmp	r3, #24
 800ee6e:	d91d      	bls.n	800eeac <__gethex+0x14c>
 800ee70:	f1b9 0f00 	cmp.w	r9, #0
 800ee74:	d000      	beq.n	800ee78 <__gethex+0x118>
 800ee76:	4252      	negs	r2, r2
 800ee78:	4415      	add	r5, r2
 800ee7a:	f8cb 1000 	str.w	r1, [fp]
 800ee7e:	b1e4      	cbz	r4, 800eeba <__gethex+0x15a>
 800ee80:	9b00      	ldr	r3, [sp, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	bf14      	ite	ne
 800ee86:	2700      	movne	r7, #0
 800ee88:	2706      	moveq	r7, #6
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	b009      	add	sp, #36	; 0x24
 800ee8e:	ecbd 8b02 	vpop	{d8}
 800ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee96:	463e      	mov	r6, r7
 800ee98:	4625      	mov	r5, r4
 800ee9a:	2401      	movs	r4, #1
 800ee9c:	e7ca      	b.n	800ee34 <__gethex+0xd4>
 800ee9e:	f04f 0900 	mov.w	r9, #0
 800eea2:	1cb1      	adds	r1, r6, #2
 800eea4:	e7d3      	b.n	800ee4e <__gethex+0xee>
 800eea6:	f04f 0901 	mov.w	r9, #1
 800eeaa:	e7fa      	b.n	800eea2 <__gethex+0x142>
 800eeac:	230a      	movs	r3, #10
 800eeae:	fb03 0202 	mla	r2, r3, r2, r0
 800eeb2:	3a10      	subs	r2, #16
 800eeb4:	e7d4      	b.n	800ee60 <__gethex+0x100>
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	e7df      	b.n	800ee7a <__gethex+0x11a>
 800eeba:	1bf3      	subs	r3, r6, r7
 800eebc:	3b01      	subs	r3, #1
 800eebe:	4621      	mov	r1, r4
 800eec0:	2b07      	cmp	r3, #7
 800eec2:	dc0b      	bgt.n	800eedc <__gethex+0x17c>
 800eec4:	ee18 0a10 	vmov	r0, s16
 800eec8:	f000 fa86 	bl	800f3d8 <_Balloc>
 800eecc:	4604      	mov	r4, r0
 800eece:	b940      	cbnz	r0, 800eee2 <__gethex+0x182>
 800eed0:	4b5d      	ldr	r3, [pc, #372]	; (800f048 <__gethex+0x2e8>)
 800eed2:	4602      	mov	r2, r0
 800eed4:	21de      	movs	r1, #222	; 0xde
 800eed6:	485d      	ldr	r0, [pc, #372]	; (800f04c <__gethex+0x2ec>)
 800eed8:	f001 f9c8 	bl	801026c <__assert_func>
 800eedc:	3101      	adds	r1, #1
 800eede:	105b      	asrs	r3, r3, #1
 800eee0:	e7ee      	b.n	800eec0 <__gethex+0x160>
 800eee2:	f100 0914 	add.w	r9, r0, #20
 800eee6:	f04f 0b00 	mov.w	fp, #0
 800eeea:	f1ca 0301 	rsb	r3, sl, #1
 800eeee:	f8cd 9008 	str.w	r9, [sp, #8]
 800eef2:	f8cd b000 	str.w	fp, [sp]
 800eef6:	9306      	str	r3, [sp, #24]
 800eef8:	42b7      	cmp	r7, r6
 800eefa:	d340      	bcc.n	800ef7e <__gethex+0x21e>
 800eefc:	9802      	ldr	r0, [sp, #8]
 800eefe:	9b00      	ldr	r3, [sp, #0]
 800ef00:	f840 3b04 	str.w	r3, [r0], #4
 800ef04:	eba0 0009 	sub.w	r0, r0, r9
 800ef08:	1080      	asrs	r0, r0, #2
 800ef0a:	0146      	lsls	r6, r0, #5
 800ef0c:	6120      	str	r0, [r4, #16]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 fb54 	bl	800f5bc <__hi0bits>
 800ef14:	1a30      	subs	r0, r6, r0
 800ef16:	f8d8 6000 	ldr.w	r6, [r8]
 800ef1a:	42b0      	cmp	r0, r6
 800ef1c:	dd63      	ble.n	800efe6 <__gethex+0x286>
 800ef1e:	1b87      	subs	r7, r0, r6
 800ef20:	4639      	mov	r1, r7
 800ef22:	4620      	mov	r0, r4
 800ef24:	f000 fef8 	bl	800fd18 <__any_on>
 800ef28:	4682      	mov	sl, r0
 800ef2a:	b1a8      	cbz	r0, 800ef58 <__gethex+0x1f8>
 800ef2c:	1e7b      	subs	r3, r7, #1
 800ef2e:	1159      	asrs	r1, r3, #5
 800ef30:	f003 021f 	and.w	r2, r3, #31
 800ef34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ef38:	f04f 0a01 	mov.w	sl, #1
 800ef3c:	fa0a f202 	lsl.w	r2, sl, r2
 800ef40:	420a      	tst	r2, r1
 800ef42:	d009      	beq.n	800ef58 <__gethex+0x1f8>
 800ef44:	4553      	cmp	r3, sl
 800ef46:	dd05      	ble.n	800ef54 <__gethex+0x1f4>
 800ef48:	1eb9      	subs	r1, r7, #2
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 fee4 	bl	800fd18 <__any_on>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	d145      	bne.n	800efe0 <__gethex+0x280>
 800ef54:	f04f 0a02 	mov.w	sl, #2
 800ef58:	4639      	mov	r1, r7
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f7ff fe98 	bl	800ec90 <rshift>
 800ef60:	443d      	add	r5, r7
 800ef62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef66:	42ab      	cmp	r3, r5
 800ef68:	da4c      	bge.n	800f004 <__gethex+0x2a4>
 800ef6a:	ee18 0a10 	vmov	r0, s16
 800ef6e:	4621      	mov	r1, r4
 800ef70:	f000 fa72 	bl	800f458 <_Bfree>
 800ef74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef76:	2300      	movs	r3, #0
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	27a3      	movs	r7, #163	; 0xa3
 800ef7c:	e785      	b.n	800ee8a <__gethex+0x12a>
 800ef7e:	1e73      	subs	r3, r6, #1
 800ef80:	9a05      	ldr	r2, [sp, #20]
 800ef82:	9303      	str	r3, [sp, #12]
 800ef84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d019      	beq.n	800efc0 <__gethex+0x260>
 800ef8c:	f1bb 0f20 	cmp.w	fp, #32
 800ef90:	d107      	bne.n	800efa2 <__gethex+0x242>
 800ef92:	9b02      	ldr	r3, [sp, #8]
 800ef94:	9a00      	ldr	r2, [sp, #0]
 800ef96:	f843 2b04 	str.w	r2, [r3], #4
 800ef9a:	9302      	str	r3, [sp, #8]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	469b      	mov	fp, r3
 800efa2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800efa6:	f7ff fec5 	bl	800ed34 <__hexdig_fun>
 800efaa:	9b00      	ldr	r3, [sp, #0]
 800efac:	f000 000f 	and.w	r0, r0, #15
 800efb0:	fa00 f00b 	lsl.w	r0, r0, fp
 800efb4:	4303      	orrs	r3, r0
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	f10b 0b04 	add.w	fp, fp, #4
 800efbc:	9b03      	ldr	r3, [sp, #12]
 800efbe:	e00d      	b.n	800efdc <__gethex+0x27c>
 800efc0:	9b03      	ldr	r3, [sp, #12]
 800efc2:	9a06      	ldr	r2, [sp, #24]
 800efc4:	4413      	add	r3, r2
 800efc6:	42bb      	cmp	r3, r7
 800efc8:	d3e0      	bcc.n	800ef8c <__gethex+0x22c>
 800efca:	4618      	mov	r0, r3
 800efcc:	9901      	ldr	r1, [sp, #4]
 800efce:	9307      	str	r3, [sp, #28]
 800efd0:	4652      	mov	r2, sl
 800efd2:	f7fe f804 	bl	800cfde <strncmp>
 800efd6:	9b07      	ldr	r3, [sp, #28]
 800efd8:	2800      	cmp	r0, #0
 800efda:	d1d7      	bne.n	800ef8c <__gethex+0x22c>
 800efdc:	461e      	mov	r6, r3
 800efde:	e78b      	b.n	800eef8 <__gethex+0x198>
 800efe0:	f04f 0a03 	mov.w	sl, #3
 800efe4:	e7b8      	b.n	800ef58 <__gethex+0x1f8>
 800efe6:	da0a      	bge.n	800effe <__gethex+0x29e>
 800efe8:	1a37      	subs	r7, r6, r0
 800efea:	4621      	mov	r1, r4
 800efec:	ee18 0a10 	vmov	r0, s16
 800eff0:	463a      	mov	r2, r7
 800eff2:	f000 fc4d 	bl	800f890 <__lshift>
 800eff6:	1bed      	subs	r5, r5, r7
 800eff8:	4604      	mov	r4, r0
 800effa:	f100 0914 	add.w	r9, r0, #20
 800effe:	f04f 0a00 	mov.w	sl, #0
 800f002:	e7ae      	b.n	800ef62 <__gethex+0x202>
 800f004:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f008:	42a8      	cmp	r0, r5
 800f00a:	dd72      	ble.n	800f0f2 <__gethex+0x392>
 800f00c:	1b45      	subs	r5, r0, r5
 800f00e:	42ae      	cmp	r6, r5
 800f010:	dc36      	bgt.n	800f080 <__gethex+0x320>
 800f012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f016:	2b02      	cmp	r3, #2
 800f018:	d02a      	beq.n	800f070 <__gethex+0x310>
 800f01a:	2b03      	cmp	r3, #3
 800f01c:	d02c      	beq.n	800f078 <__gethex+0x318>
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d11c      	bne.n	800f05c <__gethex+0x2fc>
 800f022:	42ae      	cmp	r6, r5
 800f024:	d11a      	bne.n	800f05c <__gethex+0x2fc>
 800f026:	2e01      	cmp	r6, #1
 800f028:	d112      	bne.n	800f050 <__gethex+0x2f0>
 800f02a:	9a04      	ldr	r2, [sp, #16]
 800f02c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f030:	6013      	str	r3, [r2, #0]
 800f032:	2301      	movs	r3, #1
 800f034:	6123      	str	r3, [r4, #16]
 800f036:	f8c9 3000 	str.w	r3, [r9]
 800f03a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f03c:	2762      	movs	r7, #98	; 0x62
 800f03e:	601c      	str	r4, [r3, #0]
 800f040:	e723      	b.n	800ee8a <__gethex+0x12a>
 800f042:	bf00      	nop
 800f044:	080110d8 	.word	0x080110d8
 800f048:	08011060 	.word	0x08011060
 800f04c:	08011071 	.word	0x08011071
 800f050:	1e71      	subs	r1, r6, #1
 800f052:	4620      	mov	r0, r4
 800f054:	f000 fe60 	bl	800fd18 <__any_on>
 800f058:	2800      	cmp	r0, #0
 800f05a:	d1e6      	bne.n	800f02a <__gethex+0x2ca>
 800f05c:	ee18 0a10 	vmov	r0, s16
 800f060:	4621      	mov	r1, r4
 800f062:	f000 f9f9 	bl	800f458 <_Bfree>
 800f066:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f068:	2300      	movs	r3, #0
 800f06a:	6013      	str	r3, [r2, #0]
 800f06c:	2750      	movs	r7, #80	; 0x50
 800f06e:	e70c      	b.n	800ee8a <__gethex+0x12a>
 800f070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1f2      	bne.n	800f05c <__gethex+0x2fc>
 800f076:	e7d8      	b.n	800f02a <__gethex+0x2ca>
 800f078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1d5      	bne.n	800f02a <__gethex+0x2ca>
 800f07e:	e7ed      	b.n	800f05c <__gethex+0x2fc>
 800f080:	1e6f      	subs	r7, r5, #1
 800f082:	f1ba 0f00 	cmp.w	sl, #0
 800f086:	d131      	bne.n	800f0ec <__gethex+0x38c>
 800f088:	b127      	cbz	r7, 800f094 <__gethex+0x334>
 800f08a:	4639      	mov	r1, r7
 800f08c:	4620      	mov	r0, r4
 800f08e:	f000 fe43 	bl	800fd18 <__any_on>
 800f092:	4682      	mov	sl, r0
 800f094:	117b      	asrs	r3, r7, #5
 800f096:	2101      	movs	r1, #1
 800f098:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f09c:	f007 071f 	and.w	r7, r7, #31
 800f0a0:	fa01 f707 	lsl.w	r7, r1, r7
 800f0a4:	421f      	tst	r7, r3
 800f0a6:	4629      	mov	r1, r5
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	bf18      	it	ne
 800f0ac:	f04a 0a02 	orrne.w	sl, sl, #2
 800f0b0:	1b76      	subs	r6, r6, r5
 800f0b2:	f7ff fded 	bl	800ec90 <rshift>
 800f0b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f0ba:	2702      	movs	r7, #2
 800f0bc:	f1ba 0f00 	cmp.w	sl, #0
 800f0c0:	d048      	beq.n	800f154 <__gethex+0x3f4>
 800f0c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d015      	beq.n	800f0f6 <__gethex+0x396>
 800f0ca:	2b03      	cmp	r3, #3
 800f0cc:	d017      	beq.n	800f0fe <__gethex+0x39e>
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d109      	bne.n	800f0e6 <__gethex+0x386>
 800f0d2:	f01a 0f02 	tst.w	sl, #2
 800f0d6:	d006      	beq.n	800f0e6 <__gethex+0x386>
 800f0d8:	f8d9 0000 	ldr.w	r0, [r9]
 800f0dc:	ea4a 0a00 	orr.w	sl, sl, r0
 800f0e0:	f01a 0f01 	tst.w	sl, #1
 800f0e4:	d10e      	bne.n	800f104 <__gethex+0x3a4>
 800f0e6:	f047 0710 	orr.w	r7, r7, #16
 800f0ea:	e033      	b.n	800f154 <__gethex+0x3f4>
 800f0ec:	f04f 0a01 	mov.w	sl, #1
 800f0f0:	e7d0      	b.n	800f094 <__gethex+0x334>
 800f0f2:	2701      	movs	r7, #1
 800f0f4:	e7e2      	b.n	800f0bc <__gethex+0x35c>
 800f0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0f8:	f1c3 0301 	rsb	r3, r3, #1
 800f0fc:	9315      	str	r3, [sp, #84]	; 0x54
 800f0fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f100:	2b00      	cmp	r3, #0
 800f102:	d0f0      	beq.n	800f0e6 <__gethex+0x386>
 800f104:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f108:	f104 0314 	add.w	r3, r4, #20
 800f10c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f110:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f114:	f04f 0c00 	mov.w	ip, #0
 800f118:	4618      	mov	r0, r3
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f122:	d01c      	beq.n	800f15e <__gethex+0x3fe>
 800f124:	3201      	adds	r2, #1
 800f126:	6002      	str	r2, [r0, #0]
 800f128:	2f02      	cmp	r7, #2
 800f12a:	f104 0314 	add.w	r3, r4, #20
 800f12e:	d13f      	bne.n	800f1b0 <__gethex+0x450>
 800f130:	f8d8 2000 	ldr.w	r2, [r8]
 800f134:	3a01      	subs	r2, #1
 800f136:	42b2      	cmp	r2, r6
 800f138:	d10a      	bne.n	800f150 <__gethex+0x3f0>
 800f13a:	1171      	asrs	r1, r6, #5
 800f13c:	2201      	movs	r2, #1
 800f13e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f142:	f006 061f 	and.w	r6, r6, #31
 800f146:	fa02 f606 	lsl.w	r6, r2, r6
 800f14a:	421e      	tst	r6, r3
 800f14c:	bf18      	it	ne
 800f14e:	4617      	movne	r7, r2
 800f150:	f047 0720 	orr.w	r7, r7, #32
 800f154:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f156:	601c      	str	r4, [r3, #0]
 800f158:	9b04      	ldr	r3, [sp, #16]
 800f15a:	601d      	str	r5, [r3, #0]
 800f15c:	e695      	b.n	800ee8a <__gethex+0x12a>
 800f15e:	4299      	cmp	r1, r3
 800f160:	f843 cc04 	str.w	ip, [r3, #-4]
 800f164:	d8d8      	bhi.n	800f118 <__gethex+0x3b8>
 800f166:	68a3      	ldr	r3, [r4, #8]
 800f168:	459b      	cmp	fp, r3
 800f16a:	db19      	blt.n	800f1a0 <__gethex+0x440>
 800f16c:	6861      	ldr	r1, [r4, #4]
 800f16e:	ee18 0a10 	vmov	r0, s16
 800f172:	3101      	adds	r1, #1
 800f174:	f000 f930 	bl	800f3d8 <_Balloc>
 800f178:	4681      	mov	r9, r0
 800f17a:	b918      	cbnz	r0, 800f184 <__gethex+0x424>
 800f17c:	4b1a      	ldr	r3, [pc, #104]	; (800f1e8 <__gethex+0x488>)
 800f17e:	4602      	mov	r2, r0
 800f180:	2184      	movs	r1, #132	; 0x84
 800f182:	e6a8      	b.n	800eed6 <__gethex+0x176>
 800f184:	6922      	ldr	r2, [r4, #16]
 800f186:	3202      	adds	r2, #2
 800f188:	f104 010c 	add.w	r1, r4, #12
 800f18c:	0092      	lsls	r2, r2, #2
 800f18e:	300c      	adds	r0, #12
 800f190:	f7fc fe6c 	bl	800be6c <memcpy>
 800f194:	4621      	mov	r1, r4
 800f196:	ee18 0a10 	vmov	r0, s16
 800f19a:	f000 f95d 	bl	800f458 <_Bfree>
 800f19e:	464c      	mov	r4, r9
 800f1a0:	6923      	ldr	r3, [r4, #16]
 800f1a2:	1c5a      	adds	r2, r3, #1
 800f1a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1a8:	6122      	str	r2, [r4, #16]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	615a      	str	r2, [r3, #20]
 800f1ae:	e7bb      	b.n	800f128 <__gethex+0x3c8>
 800f1b0:	6922      	ldr	r2, [r4, #16]
 800f1b2:	455a      	cmp	r2, fp
 800f1b4:	dd0b      	ble.n	800f1ce <__gethex+0x46e>
 800f1b6:	2101      	movs	r1, #1
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7ff fd69 	bl	800ec90 <rshift>
 800f1be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f1c2:	3501      	adds	r5, #1
 800f1c4:	42ab      	cmp	r3, r5
 800f1c6:	f6ff aed0 	blt.w	800ef6a <__gethex+0x20a>
 800f1ca:	2701      	movs	r7, #1
 800f1cc:	e7c0      	b.n	800f150 <__gethex+0x3f0>
 800f1ce:	f016 061f 	ands.w	r6, r6, #31
 800f1d2:	d0fa      	beq.n	800f1ca <__gethex+0x46a>
 800f1d4:	4453      	add	r3, sl
 800f1d6:	f1c6 0620 	rsb	r6, r6, #32
 800f1da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f1de:	f000 f9ed 	bl	800f5bc <__hi0bits>
 800f1e2:	42b0      	cmp	r0, r6
 800f1e4:	dbe7      	blt.n	800f1b6 <__gethex+0x456>
 800f1e6:	e7f0      	b.n	800f1ca <__gethex+0x46a>
 800f1e8:	08011060 	.word	0x08011060

0800f1ec <L_shift>:
 800f1ec:	f1c2 0208 	rsb	r2, r2, #8
 800f1f0:	0092      	lsls	r2, r2, #2
 800f1f2:	b570      	push	{r4, r5, r6, lr}
 800f1f4:	f1c2 0620 	rsb	r6, r2, #32
 800f1f8:	6843      	ldr	r3, [r0, #4]
 800f1fa:	6804      	ldr	r4, [r0, #0]
 800f1fc:	fa03 f506 	lsl.w	r5, r3, r6
 800f200:	432c      	orrs	r4, r5
 800f202:	40d3      	lsrs	r3, r2
 800f204:	6004      	str	r4, [r0, #0]
 800f206:	f840 3f04 	str.w	r3, [r0, #4]!
 800f20a:	4288      	cmp	r0, r1
 800f20c:	d3f4      	bcc.n	800f1f8 <L_shift+0xc>
 800f20e:	bd70      	pop	{r4, r5, r6, pc}

0800f210 <__match>:
 800f210:	b530      	push	{r4, r5, lr}
 800f212:	6803      	ldr	r3, [r0, #0]
 800f214:	3301      	adds	r3, #1
 800f216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f21a:	b914      	cbnz	r4, 800f222 <__match+0x12>
 800f21c:	6003      	str	r3, [r0, #0]
 800f21e:	2001      	movs	r0, #1
 800f220:	bd30      	pop	{r4, r5, pc}
 800f222:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f226:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f22a:	2d19      	cmp	r5, #25
 800f22c:	bf98      	it	ls
 800f22e:	3220      	addls	r2, #32
 800f230:	42a2      	cmp	r2, r4
 800f232:	d0f0      	beq.n	800f216 <__match+0x6>
 800f234:	2000      	movs	r0, #0
 800f236:	e7f3      	b.n	800f220 <__match+0x10>

0800f238 <__hexnan>:
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	680b      	ldr	r3, [r1, #0]
 800f23e:	115e      	asrs	r6, r3, #5
 800f240:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f244:	f013 031f 	ands.w	r3, r3, #31
 800f248:	b087      	sub	sp, #28
 800f24a:	bf18      	it	ne
 800f24c:	3604      	addne	r6, #4
 800f24e:	2500      	movs	r5, #0
 800f250:	1f37      	subs	r7, r6, #4
 800f252:	4690      	mov	r8, r2
 800f254:	6802      	ldr	r2, [r0, #0]
 800f256:	9301      	str	r3, [sp, #4]
 800f258:	4682      	mov	sl, r0
 800f25a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f25e:	46b9      	mov	r9, r7
 800f260:	463c      	mov	r4, r7
 800f262:	9502      	str	r5, [sp, #8]
 800f264:	46ab      	mov	fp, r5
 800f266:	7851      	ldrb	r1, [r2, #1]
 800f268:	1c53      	adds	r3, r2, #1
 800f26a:	9303      	str	r3, [sp, #12]
 800f26c:	b341      	cbz	r1, 800f2c0 <__hexnan+0x88>
 800f26e:	4608      	mov	r0, r1
 800f270:	9205      	str	r2, [sp, #20]
 800f272:	9104      	str	r1, [sp, #16]
 800f274:	f7ff fd5e 	bl	800ed34 <__hexdig_fun>
 800f278:	2800      	cmp	r0, #0
 800f27a:	d14f      	bne.n	800f31c <__hexnan+0xe4>
 800f27c:	9904      	ldr	r1, [sp, #16]
 800f27e:	9a05      	ldr	r2, [sp, #20]
 800f280:	2920      	cmp	r1, #32
 800f282:	d818      	bhi.n	800f2b6 <__hexnan+0x7e>
 800f284:	9b02      	ldr	r3, [sp, #8]
 800f286:	459b      	cmp	fp, r3
 800f288:	dd13      	ble.n	800f2b2 <__hexnan+0x7a>
 800f28a:	454c      	cmp	r4, r9
 800f28c:	d206      	bcs.n	800f29c <__hexnan+0x64>
 800f28e:	2d07      	cmp	r5, #7
 800f290:	dc04      	bgt.n	800f29c <__hexnan+0x64>
 800f292:	462a      	mov	r2, r5
 800f294:	4649      	mov	r1, r9
 800f296:	4620      	mov	r0, r4
 800f298:	f7ff ffa8 	bl	800f1ec <L_shift>
 800f29c:	4544      	cmp	r4, r8
 800f29e:	d950      	bls.n	800f342 <__hexnan+0x10a>
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f1a4 0904 	sub.w	r9, r4, #4
 800f2a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f2aa:	f8cd b008 	str.w	fp, [sp, #8]
 800f2ae:	464c      	mov	r4, r9
 800f2b0:	461d      	mov	r5, r3
 800f2b2:	9a03      	ldr	r2, [sp, #12]
 800f2b4:	e7d7      	b.n	800f266 <__hexnan+0x2e>
 800f2b6:	2929      	cmp	r1, #41	; 0x29
 800f2b8:	d156      	bne.n	800f368 <__hexnan+0x130>
 800f2ba:	3202      	adds	r2, #2
 800f2bc:	f8ca 2000 	str.w	r2, [sl]
 800f2c0:	f1bb 0f00 	cmp.w	fp, #0
 800f2c4:	d050      	beq.n	800f368 <__hexnan+0x130>
 800f2c6:	454c      	cmp	r4, r9
 800f2c8:	d206      	bcs.n	800f2d8 <__hexnan+0xa0>
 800f2ca:	2d07      	cmp	r5, #7
 800f2cc:	dc04      	bgt.n	800f2d8 <__hexnan+0xa0>
 800f2ce:	462a      	mov	r2, r5
 800f2d0:	4649      	mov	r1, r9
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f7ff ff8a 	bl	800f1ec <L_shift>
 800f2d8:	4544      	cmp	r4, r8
 800f2da:	d934      	bls.n	800f346 <__hexnan+0x10e>
 800f2dc:	f1a8 0204 	sub.w	r2, r8, #4
 800f2e0:	4623      	mov	r3, r4
 800f2e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800f2e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800f2ea:	429f      	cmp	r7, r3
 800f2ec:	d2f9      	bcs.n	800f2e2 <__hexnan+0xaa>
 800f2ee:	1b3b      	subs	r3, r7, r4
 800f2f0:	f023 0303 	bic.w	r3, r3, #3
 800f2f4:	3304      	adds	r3, #4
 800f2f6:	3401      	adds	r4, #1
 800f2f8:	3e03      	subs	r6, #3
 800f2fa:	42b4      	cmp	r4, r6
 800f2fc:	bf88      	it	hi
 800f2fe:	2304      	movhi	r3, #4
 800f300:	4443      	add	r3, r8
 800f302:	2200      	movs	r2, #0
 800f304:	f843 2b04 	str.w	r2, [r3], #4
 800f308:	429f      	cmp	r7, r3
 800f30a:	d2fb      	bcs.n	800f304 <__hexnan+0xcc>
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	b91b      	cbnz	r3, 800f318 <__hexnan+0xe0>
 800f310:	4547      	cmp	r7, r8
 800f312:	d127      	bne.n	800f364 <__hexnan+0x12c>
 800f314:	2301      	movs	r3, #1
 800f316:	603b      	str	r3, [r7, #0]
 800f318:	2005      	movs	r0, #5
 800f31a:	e026      	b.n	800f36a <__hexnan+0x132>
 800f31c:	3501      	adds	r5, #1
 800f31e:	2d08      	cmp	r5, #8
 800f320:	f10b 0b01 	add.w	fp, fp, #1
 800f324:	dd06      	ble.n	800f334 <__hexnan+0xfc>
 800f326:	4544      	cmp	r4, r8
 800f328:	d9c3      	bls.n	800f2b2 <__hexnan+0x7a>
 800f32a:	2300      	movs	r3, #0
 800f32c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f330:	2501      	movs	r5, #1
 800f332:	3c04      	subs	r4, #4
 800f334:	6822      	ldr	r2, [r4, #0]
 800f336:	f000 000f 	and.w	r0, r0, #15
 800f33a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f33e:	6022      	str	r2, [r4, #0]
 800f340:	e7b7      	b.n	800f2b2 <__hexnan+0x7a>
 800f342:	2508      	movs	r5, #8
 800f344:	e7b5      	b.n	800f2b2 <__hexnan+0x7a>
 800f346:	9b01      	ldr	r3, [sp, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d0df      	beq.n	800f30c <__hexnan+0xd4>
 800f34c:	f04f 32ff 	mov.w	r2, #4294967295
 800f350:	f1c3 0320 	rsb	r3, r3, #32
 800f354:	fa22 f303 	lsr.w	r3, r2, r3
 800f358:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f35c:	401a      	ands	r2, r3
 800f35e:	f846 2c04 	str.w	r2, [r6, #-4]
 800f362:	e7d3      	b.n	800f30c <__hexnan+0xd4>
 800f364:	3f04      	subs	r7, #4
 800f366:	e7d1      	b.n	800f30c <__hexnan+0xd4>
 800f368:	2004      	movs	r0, #4
 800f36a:	b007      	add	sp, #28
 800f36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f370 <_localeconv_r>:
 800f370:	4800      	ldr	r0, [pc, #0]	; (800f374 <_localeconv_r+0x4>)
 800f372:	4770      	bx	lr
 800f374:	20000170 	.word	0x20000170

0800f378 <_lseek_r>:
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4d07      	ldr	r5, [pc, #28]	; (800f398 <_lseek_r+0x20>)
 800f37c:	4604      	mov	r4, r0
 800f37e:	4608      	mov	r0, r1
 800f380:	4611      	mov	r1, r2
 800f382:	2200      	movs	r2, #0
 800f384:	602a      	str	r2, [r5, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	f7f5 fb16 	bl	80049b8 <_lseek>
 800f38c:	1c43      	adds	r3, r0, #1
 800f38e:	d102      	bne.n	800f396 <_lseek_r+0x1e>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b103      	cbz	r3, 800f396 <_lseek_r+0x1e>
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	2000531c 	.word	0x2000531c

0800f39c <__ascii_mbtowc>:
 800f39c:	b082      	sub	sp, #8
 800f39e:	b901      	cbnz	r1, 800f3a2 <__ascii_mbtowc+0x6>
 800f3a0:	a901      	add	r1, sp, #4
 800f3a2:	b142      	cbz	r2, 800f3b6 <__ascii_mbtowc+0x1a>
 800f3a4:	b14b      	cbz	r3, 800f3ba <__ascii_mbtowc+0x1e>
 800f3a6:	7813      	ldrb	r3, [r2, #0]
 800f3a8:	600b      	str	r3, [r1, #0]
 800f3aa:	7812      	ldrb	r2, [r2, #0]
 800f3ac:	1e10      	subs	r0, r2, #0
 800f3ae:	bf18      	it	ne
 800f3b0:	2001      	movne	r0, #1
 800f3b2:	b002      	add	sp, #8
 800f3b4:	4770      	bx	lr
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	e7fb      	b.n	800f3b2 <__ascii_mbtowc+0x16>
 800f3ba:	f06f 0001 	mvn.w	r0, #1
 800f3be:	e7f8      	b.n	800f3b2 <__ascii_mbtowc+0x16>

0800f3c0 <__malloc_lock>:
 800f3c0:	4801      	ldr	r0, [pc, #4]	; (800f3c8 <__malloc_lock+0x8>)
 800f3c2:	f7fc bd40 	b.w	800be46 <__retarget_lock_acquire_recursive>
 800f3c6:	bf00      	nop
 800f3c8:	20005310 	.word	0x20005310

0800f3cc <__malloc_unlock>:
 800f3cc:	4801      	ldr	r0, [pc, #4]	; (800f3d4 <__malloc_unlock+0x8>)
 800f3ce:	f7fc bd3b 	b.w	800be48 <__retarget_lock_release_recursive>
 800f3d2:	bf00      	nop
 800f3d4:	20005310 	.word	0x20005310

0800f3d8 <_Balloc>:
 800f3d8:	b570      	push	{r4, r5, r6, lr}
 800f3da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3dc:	4604      	mov	r4, r0
 800f3de:	460d      	mov	r5, r1
 800f3e0:	b976      	cbnz	r6, 800f400 <_Balloc+0x28>
 800f3e2:	2010      	movs	r0, #16
 800f3e4:	f7fc fd32 	bl	800be4c <malloc>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	6260      	str	r0, [r4, #36]	; 0x24
 800f3ec:	b920      	cbnz	r0, 800f3f8 <_Balloc+0x20>
 800f3ee:	4b18      	ldr	r3, [pc, #96]	; (800f450 <_Balloc+0x78>)
 800f3f0:	4818      	ldr	r0, [pc, #96]	; (800f454 <_Balloc+0x7c>)
 800f3f2:	2166      	movs	r1, #102	; 0x66
 800f3f4:	f000 ff3a 	bl	801026c <__assert_func>
 800f3f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3fc:	6006      	str	r6, [r0, #0]
 800f3fe:	60c6      	str	r6, [r0, #12]
 800f400:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f402:	68f3      	ldr	r3, [r6, #12]
 800f404:	b183      	cbz	r3, 800f428 <_Balloc+0x50>
 800f406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f40e:	b9b8      	cbnz	r0, 800f440 <_Balloc+0x68>
 800f410:	2101      	movs	r1, #1
 800f412:	fa01 f605 	lsl.w	r6, r1, r5
 800f416:	1d72      	adds	r2, r6, #5
 800f418:	0092      	lsls	r2, r2, #2
 800f41a:	4620      	mov	r0, r4
 800f41c:	f000 fc9d 	bl	800fd5a <_calloc_r>
 800f420:	b160      	cbz	r0, 800f43c <_Balloc+0x64>
 800f422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f426:	e00e      	b.n	800f446 <_Balloc+0x6e>
 800f428:	2221      	movs	r2, #33	; 0x21
 800f42a:	2104      	movs	r1, #4
 800f42c:	4620      	mov	r0, r4
 800f42e:	f000 fc94 	bl	800fd5a <_calloc_r>
 800f432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f434:	60f0      	str	r0, [r6, #12]
 800f436:	68db      	ldr	r3, [r3, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d1e4      	bne.n	800f406 <_Balloc+0x2e>
 800f43c:	2000      	movs	r0, #0
 800f43e:	bd70      	pop	{r4, r5, r6, pc}
 800f440:	6802      	ldr	r2, [r0, #0]
 800f442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f446:	2300      	movs	r3, #0
 800f448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f44c:	e7f7      	b.n	800f43e <_Balloc+0x66>
 800f44e:	bf00      	nop
 800f450:	08010fee 	.word	0x08010fee
 800f454:	080110ec 	.word	0x080110ec

0800f458 <_Bfree>:
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f45c:	4605      	mov	r5, r0
 800f45e:	460c      	mov	r4, r1
 800f460:	b976      	cbnz	r6, 800f480 <_Bfree+0x28>
 800f462:	2010      	movs	r0, #16
 800f464:	f7fc fcf2 	bl	800be4c <malloc>
 800f468:	4602      	mov	r2, r0
 800f46a:	6268      	str	r0, [r5, #36]	; 0x24
 800f46c:	b920      	cbnz	r0, 800f478 <_Bfree+0x20>
 800f46e:	4b09      	ldr	r3, [pc, #36]	; (800f494 <_Bfree+0x3c>)
 800f470:	4809      	ldr	r0, [pc, #36]	; (800f498 <_Bfree+0x40>)
 800f472:	218a      	movs	r1, #138	; 0x8a
 800f474:	f000 fefa 	bl	801026c <__assert_func>
 800f478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f47c:	6006      	str	r6, [r0, #0]
 800f47e:	60c6      	str	r6, [r0, #12]
 800f480:	b13c      	cbz	r4, 800f492 <_Bfree+0x3a>
 800f482:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f484:	6862      	ldr	r2, [r4, #4]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f48c:	6021      	str	r1, [r4, #0]
 800f48e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f492:	bd70      	pop	{r4, r5, r6, pc}
 800f494:	08010fee 	.word	0x08010fee
 800f498:	080110ec 	.word	0x080110ec

0800f49c <__multadd>:
 800f49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a0:	690d      	ldr	r5, [r1, #16]
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	460c      	mov	r4, r1
 800f4a6:	461e      	mov	r6, r3
 800f4a8:	f101 0c14 	add.w	ip, r1, #20
 800f4ac:	2000      	movs	r0, #0
 800f4ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f4b2:	b299      	uxth	r1, r3
 800f4b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f4b8:	0c1e      	lsrs	r6, r3, #16
 800f4ba:	0c0b      	lsrs	r3, r1, #16
 800f4bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f4c0:	b289      	uxth	r1, r1
 800f4c2:	3001      	adds	r0, #1
 800f4c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4c8:	4285      	cmp	r5, r0
 800f4ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f4ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4d2:	dcec      	bgt.n	800f4ae <__multadd+0x12>
 800f4d4:	b30e      	cbz	r6, 800f51a <__multadd+0x7e>
 800f4d6:	68a3      	ldr	r3, [r4, #8]
 800f4d8:	42ab      	cmp	r3, r5
 800f4da:	dc19      	bgt.n	800f510 <__multadd+0x74>
 800f4dc:	6861      	ldr	r1, [r4, #4]
 800f4de:	4638      	mov	r0, r7
 800f4e0:	3101      	adds	r1, #1
 800f4e2:	f7ff ff79 	bl	800f3d8 <_Balloc>
 800f4e6:	4680      	mov	r8, r0
 800f4e8:	b928      	cbnz	r0, 800f4f6 <__multadd+0x5a>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	4b0c      	ldr	r3, [pc, #48]	; (800f520 <__multadd+0x84>)
 800f4ee:	480d      	ldr	r0, [pc, #52]	; (800f524 <__multadd+0x88>)
 800f4f0:	21b5      	movs	r1, #181	; 0xb5
 800f4f2:	f000 febb 	bl	801026c <__assert_func>
 800f4f6:	6922      	ldr	r2, [r4, #16]
 800f4f8:	3202      	adds	r2, #2
 800f4fa:	f104 010c 	add.w	r1, r4, #12
 800f4fe:	0092      	lsls	r2, r2, #2
 800f500:	300c      	adds	r0, #12
 800f502:	f7fc fcb3 	bl	800be6c <memcpy>
 800f506:	4621      	mov	r1, r4
 800f508:	4638      	mov	r0, r7
 800f50a:	f7ff ffa5 	bl	800f458 <_Bfree>
 800f50e:	4644      	mov	r4, r8
 800f510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f514:	3501      	adds	r5, #1
 800f516:	615e      	str	r6, [r3, #20]
 800f518:	6125      	str	r5, [r4, #16]
 800f51a:	4620      	mov	r0, r4
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	08011060 	.word	0x08011060
 800f524:	080110ec 	.word	0x080110ec

0800f528 <__s2b>:
 800f528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f52c:	460c      	mov	r4, r1
 800f52e:	4615      	mov	r5, r2
 800f530:	461f      	mov	r7, r3
 800f532:	2209      	movs	r2, #9
 800f534:	3308      	adds	r3, #8
 800f536:	4606      	mov	r6, r0
 800f538:	fb93 f3f2 	sdiv	r3, r3, r2
 800f53c:	2100      	movs	r1, #0
 800f53e:	2201      	movs	r2, #1
 800f540:	429a      	cmp	r2, r3
 800f542:	db09      	blt.n	800f558 <__s2b+0x30>
 800f544:	4630      	mov	r0, r6
 800f546:	f7ff ff47 	bl	800f3d8 <_Balloc>
 800f54a:	b940      	cbnz	r0, 800f55e <__s2b+0x36>
 800f54c:	4602      	mov	r2, r0
 800f54e:	4b19      	ldr	r3, [pc, #100]	; (800f5b4 <__s2b+0x8c>)
 800f550:	4819      	ldr	r0, [pc, #100]	; (800f5b8 <__s2b+0x90>)
 800f552:	21ce      	movs	r1, #206	; 0xce
 800f554:	f000 fe8a 	bl	801026c <__assert_func>
 800f558:	0052      	lsls	r2, r2, #1
 800f55a:	3101      	adds	r1, #1
 800f55c:	e7f0      	b.n	800f540 <__s2b+0x18>
 800f55e:	9b08      	ldr	r3, [sp, #32]
 800f560:	6143      	str	r3, [r0, #20]
 800f562:	2d09      	cmp	r5, #9
 800f564:	f04f 0301 	mov.w	r3, #1
 800f568:	6103      	str	r3, [r0, #16]
 800f56a:	dd16      	ble.n	800f59a <__s2b+0x72>
 800f56c:	f104 0909 	add.w	r9, r4, #9
 800f570:	46c8      	mov	r8, r9
 800f572:	442c      	add	r4, r5
 800f574:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f578:	4601      	mov	r1, r0
 800f57a:	3b30      	subs	r3, #48	; 0x30
 800f57c:	220a      	movs	r2, #10
 800f57e:	4630      	mov	r0, r6
 800f580:	f7ff ff8c 	bl	800f49c <__multadd>
 800f584:	45a0      	cmp	r8, r4
 800f586:	d1f5      	bne.n	800f574 <__s2b+0x4c>
 800f588:	f1a5 0408 	sub.w	r4, r5, #8
 800f58c:	444c      	add	r4, r9
 800f58e:	1b2d      	subs	r5, r5, r4
 800f590:	1963      	adds	r3, r4, r5
 800f592:	42bb      	cmp	r3, r7
 800f594:	db04      	blt.n	800f5a0 <__s2b+0x78>
 800f596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f59a:	340a      	adds	r4, #10
 800f59c:	2509      	movs	r5, #9
 800f59e:	e7f6      	b.n	800f58e <__s2b+0x66>
 800f5a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5a4:	4601      	mov	r1, r0
 800f5a6:	3b30      	subs	r3, #48	; 0x30
 800f5a8:	220a      	movs	r2, #10
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	f7ff ff76 	bl	800f49c <__multadd>
 800f5b0:	e7ee      	b.n	800f590 <__s2b+0x68>
 800f5b2:	bf00      	nop
 800f5b4:	08011060 	.word	0x08011060
 800f5b8:	080110ec 	.word	0x080110ec

0800f5bc <__hi0bits>:
 800f5bc:	0c03      	lsrs	r3, r0, #16
 800f5be:	041b      	lsls	r3, r3, #16
 800f5c0:	b9d3      	cbnz	r3, 800f5f8 <__hi0bits+0x3c>
 800f5c2:	0400      	lsls	r0, r0, #16
 800f5c4:	2310      	movs	r3, #16
 800f5c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f5ca:	bf04      	itt	eq
 800f5cc:	0200      	lsleq	r0, r0, #8
 800f5ce:	3308      	addeq	r3, #8
 800f5d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f5d4:	bf04      	itt	eq
 800f5d6:	0100      	lsleq	r0, r0, #4
 800f5d8:	3304      	addeq	r3, #4
 800f5da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f5de:	bf04      	itt	eq
 800f5e0:	0080      	lsleq	r0, r0, #2
 800f5e2:	3302      	addeq	r3, #2
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	db05      	blt.n	800f5f4 <__hi0bits+0x38>
 800f5e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f5ec:	f103 0301 	add.w	r3, r3, #1
 800f5f0:	bf08      	it	eq
 800f5f2:	2320      	moveq	r3, #32
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	4770      	bx	lr
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	e7e4      	b.n	800f5c6 <__hi0bits+0xa>

0800f5fc <__lo0bits>:
 800f5fc:	6803      	ldr	r3, [r0, #0]
 800f5fe:	f013 0207 	ands.w	r2, r3, #7
 800f602:	4601      	mov	r1, r0
 800f604:	d00b      	beq.n	800f61e <__lo0bits+0x22>
 800f606:	07da      	lsls	r2, r3, #31
 800f608:	d423      	bmi.n	800f652 <__lo0bits+0x56>
 800f60a:	0798      	lsls	r0, r3, #30
 800f60c:	bf49      	itett	mi
 800f60e:	085b      	lsrmi	r3, r3, #1
 800f610:	089b      	lsrpl	r3, r3, #2
 800f612:	2001      	movmi	r0, #1
 800f614:	600b      	strmi	r3, [r1, #0]
 800f616:	bf5c      	itt	pl
 800f618:	600b      	strpl	r3, [r1, #0]
 800f61a:	2002      	movpl	r0, #2
 800f61c:	4770      	bx	lr
 800f61e:	b298      	uxth	r0, r3
 800f620:	b9a8      	cbnz	r0, 800f64e <__lo0bits+0x52>
 800f622:	0c1b      	lsrs	r3, r3, #16
 800f624:	2010      	movs	r0, #16
 800f626:	b2da      	uxtb	r2, r3
 800f628:	b90a      	cbnz	r2, 800f62e <__lo0bits+0x32>
 800f62a:	3008      	adds	r0, #8
 800f62c:	0a1b      	lsrs	r3, r3, #8
 800f62e:	071a      	lsls	r2, r3, #28
 800f630:	bf04      	itt	eq
 800f632:	091b      	lsreq	r3, r3, #4
 800f634:	3004      	addeq	r0, #4
 800f636:	079a      	lsls	r2, r3, #30
 800f638:	bf04      	itt	eq
 800f63a:	089b      	lsreq	r3, r3, #2
 800f63c:	3002      	addeq	r0, #2
 800f63e:	07da      	lsls	r2, r3, #31
 800f640:	d403      	bmi.n	800f64a <__lo0bits+0x4e>
 800f642:	085b      	lsrs	r3, r3, #1
 800f644:	f100 0001 	add.w	r0, r0, #1
 800f648:	d005      	beq.n	800f656 <__lo0bits+0x5a>
 800f64a:	600b      	str	r3, [r1, #0]
 800f64c:	4770      	bx	lr
 800f64e:	4610      	mov	r0, r2
 800f650:	e7e9      	b.n	800f626 <__lo0bits+0x2a>
 800f652:	2000      	movs	r0, #0
 800f654:	4770      	bx	lr
 800f656:	2020      	movs	r0, #32
 800f658:	4770      	bx	lr
	...

0800f65c <__i2b>:
 800f65c:	b510      	push	{r4, lr}
 800f65e:	460c      	mov	r4, r1
 800f660:	2101      	movs	r1, #1
 800f662:	f7ff feb9 	bl	800f3d8 <_Balloc>
 800f666:	4602      	mov	r2, r0
 800f668:	b928      	cbnz	r0, 800f676 <__i2b+0x1a>
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <__i2b+0x24>)
 800f66c:	4805      	ldr	r0, [pc, #20]	; (800f684 <__i2b+0x28>)
 800f66e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f672:	f000 fdfb 	bl	801026c <__assert_func>
 800f676:	2301      	movs	r3, #1
 800f678:	6144      	str	r4, [r0, #20]
 800f67a:	6103      	str	r3, [r0, #16]
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	bf00      	nop
 800f680:	08011060 	.word	0x08011060
 800f684:	080110ec 	.word	0x080110ec

0800f688 <__multiply>:
 800f688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f68c:	4691      	mov	r9, r2
 800f68e:	690a      	ldr	r2, [r1, #16]
 800f690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f694:	429a      	cmp	r2, r3
 800f696:	bfb8      	it	lt
 800f698:	460b      	movlt	r3, r1
 800f69a:	460c      	mov	r4, r1
 800f69c:	bfbc      	itt	lt
 800f69e:	464c      	movlt	r4, r9
 800f6a0:	4699      	movlt	r9, r3
 800f6a2:	6927      	ldr	r7, [r4, #16]
 800f6a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6a8:	68a3      	ldr	r3, [r4, #8]
 800f6aa:	6861      	ldr	r1, [r4, #4]
 800f6ac:	eb07 060a 	add.w	r6, r7, sl
 800f6b0:	42b3      	cmp	r3, r6
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	bfb8      	it	lt
 800f6b6:	3101      	addlt	r1, #1
 800f6b8:	f7ff fe8e 	bl	800f3d8 <_Balloc>
 800f6bc:	b930      	cbnz	r0, 800f6cc <__multiply+0x44>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	4b44      	ldr	r3, [pc, #272]	; (800f7d4 <__multiply+0x14c>)
 800f6c2:	4845      	ldr	r0, [pc, #276]	; (800f7d8 <__multiply+0x150>)
 800f6c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f6c8:	f000 fdd0 	bl	801026c <__assert_func>
 800f6cc:	f100 0514 	add.w	r5, r0, #20
 800f6d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4543      	cmp	r3, r8
 800f6da:	d321      	bcc.n	800f720 <__multiply+0x98>
 800f6dc:	f104 0314 	add.w	r3, r4, #20
 800f6e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f6e4:	f109 0314 	add.w	r3, r9, #20
 800f6e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f6ec:	9202      	str	r2, [sp, #8]
 800f6ee:	1b3a      	subs	r2, r7, r4
 800f6f0:	3a15      	subs	r2, #21
 800f6f2:	f022 0203 	bic.w	r2, r2, #3
 800f6f6:	3204      	adds	r2, #4
 800f6f8:	f104 0115 	add.w	r1, r4, #21
 800f6fc:	428f      	cmp	r7, r1
 800f6fe:	bf38      	it	cc
 800f700:	2204      	movcc	r2, #4
 800f702:	9201      	str	r2, [sp, #4]
 800f704:	9a02      	ldr	r2, [sp, #8]
 800f706:	9303      	str	r3, [sp, #12]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d80c      	bhi.n	800f726 <__multiply+0x9e>
 800f70c:	2e00      	cmp	r6, #0
 800f70e:	dd03      	ble.n	800f718 <__multiply+0x90>
 800f710:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f714:	2b00      	cmp	r3, #0
 800f716:	d05a      	beq.n	800f7ce <__multiply+0x146>
 800f718:	6106      	str	r6, [r0, #16]
 800f71a:	b005      	add	sp, #20
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f720:	f843 2b04 	str.w	r2, [r3], #4
 800f724:	e7d8      	b.n	800f6d8 <__multiply+0x50>
 800f726:	f8b3 a000 	ldrh.w	sl, [r3]
 800f72a:	f1ba 0f00 	cmp.w	sl, #0
 800f72e:	d024      	beq.n	800f77a <__multiply+0xf2>
 800f730:	f104 0e14 	add.w	lr, r4, #20
 800f734:	46a9      	mov	r9, r5
 800f736:	f04f 0c00 	mov.w	ip, #0
 800f73a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f73e:	f8d9 1000 	ldr.w	r1, [r9]
 800f742:	fa1f fb82 	uxth.w	fp, r2
 800f746:	b289      	uxth	r1, r1
 800f748:	fb0a 110b 	mla	r1, sl, fp, r1
 800f74c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f750:	f8d9 2000 	ldr.w	r2, [r9]
 800f754:	4461      	add	r1, ip
 800f756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f75a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f75e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f762:	b289      	uxth	r1, r1
 800f764:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f768:	4577      	cmp	r7, lr
 800f76a:	f849 1b04 	str.w	r1, [r9], #4
 800f76e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f772:	d8e2      	bhi.n	800f73a <__multiply+0xb2>
 800f774:	9a01      	ldr	r2, [sp, #4]
 800f776:	f845 c002 	str.w	ip, [r5, r2]
 800f77a:	9a03      	ldr	r2, [sp, #12]
 800f77c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f780:	3304      	adds	r3, #4
 800f782:	f1b9 0f00 	cmp.w	r9, #0
 800f786:	d020      	beq.n	800f7ca <__multiply+0x142>
 800f788:	6829      	ldr	r1, [r5, #0]
 800f78a:	f104 0c14 	add.w	ip, r4, #20
 800f78e:	46ae      	mov	lr, r5
 800f790:	f04f 0a00 	mov.w	sl, #0
 800f794:	f8bc b000 	ldrh.w	fp, [ip]
 800f798:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f79c:	fb09 220b 	mla	r2, r9, fp, r2
 800f7a0:	4492      	add	sl, r2
 800f7a2:	b289      	uxth	r1, r1
 800f7a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f7a8:	f84e 1b04 	str.w	r1, [lr], #4
 800f7ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f7b0:	f8be 1000 	ldrh.w	r1, [lr]
 800f7b4:	0c12      	lsrs	r2, r2, #16
 800f7b6:	fb09 1102 	mla	r1, r9, r2, r1
 800f7ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f7be:	4567      	cmp	r7, ip
 800f7c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f7c4:	d8e6      	bhi.n	800f794 <__multiply+0x10c>
 800f7c6:	9a01      	ldr	r2, [sp, #4]
 800f7c8:	50a9      	str	r1, [r5, r2]
 800f7ca:	3504      	adds	r5, #4
 800f7cc:	e79a      	b.n	800f704 <__multiply+0x7c>
 800f7ce:	3e01      	subs	r6, #1
 800f7d0:	e79c      	b.n	800f70c <__multiply+0x84>
 800f7d2:	bf00      	nop
 800f7d4:	08011060 	.word	0x08011060
 800f7d8:	080110ec 	.word	0x080110ec

0800f7dc <__pow5mult>:
 800f7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	4615      	mov	r5, r2
 800f7e2:	f012 0203 	ands.w	r2, r2, #3
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	460f      	mov	r7, r1
 800f7ea:	d007      	beq.n	800f7fc <__pow5mult+0x20>
 800f7ec:	4c25      	ldr	r4, [pc, #148]	; (800f884 <__pow5mult+0xa8>)
 800f7ee:	3a01      	subs	r2, #1
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f7f6:	f7ff fe51 	bl	800f49c <__multadd>
 800f7fa:	4607      	mov	r7, r0
 800f7fc:	10ad      	asrs	r5, r5, #2
 800f7fe:	d03d      	beq.n	800f87c <__pow5mult+0xa0>
 800f800:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f802:	b97c      	cbnz	r4, 800f824 <__pow5mult+0x48>
 800f804:	2010      	movs	r0, #16
 800f806:	f7fc fb21 	bl	800be4c <malloc>
 800f80a:	4602      	mov	r2, r0
 800f80c:	6270      	str	r0, [r6, #36]	; 0x24
 800f80e:	b928      	cbnz	r0, 800f81c <__pow5mult+0x40>
 800f810:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <__pow5mult+0xac>)
 800f812:	481e      	ldr	r0, [pc, #120]	; (800f88c <__pow5mult+0xb0>)
 800f814:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f818:	f000 fd28 	bl	801026c <__assert_func>
 800f81c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f820:	6004      	str	r4, [r0, #0]
 800f822:	60c4      	str	r4, [r0, #12]
 800f824:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f82c:	b94c      	cbnz	r4, 800f842 <__pow5mult+0x66>
 800f82e:	f240 2171 	movw	r1, #625	; 0x271
 800f832:	4630      	mov	r0, r6
 800f834:	f7ff ff12 	bl	800f65c <__i2b>
 800f838:	2300      	movs	r3, #0
 800f83a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f83e:	4604      	mov	r4, r0
 800f840:	6003      	str	r3, [r0, #0]
 800f842:	f04f 0900 	mov.w	r9, #0
 800f846:	07eb      	lsls	r3, r5, #31
 800f848:	d50a      	bpl.n	800f860 <__pow5mult+0x84>
 800f84a:	4639      	mov	r1, r7
 800f84c:	4622      	mov	r2, r4
 800f84e:	4630      	mov	r0, r6
 800f850:	f7ff ff1a 	bl	800f688 <__multiply>
 800f854:	4639      	mov	r1, r7
 800f856:	4680      	mov	r8, r0
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff fdfd 	bl	800f458 <_Bfree>
 800f85e:	4647      	mov	r7, r8
 800f860:	106d      	asrs	r5, r5, #1
 800f862:	d00b      	beq.n	800f87c <__pow5mult+0xa0>
 800f864:	6820      	ldr	r0, [r4, #0]
 800f866:	b938      	cbnz	r0, 800f878 <__pow5mult+0x9c>
 800f868:	4622      	mov	r2, r4
 800f86a:	4621      	mov	r1, r4
 800f86c:	4630      	mov	r0, r6
 800f86e:	f7ff ff0b 	bl	800f688 <__multiply>
 800f872:	6020      	str	r0, [r4, #0]
 800f874:	f8c0 9000 	str.w	r9, [r0]
 800f878:	4604      	mov	r4, r0
 800f87a:	e7e4      	b.n	800f846 <__pow5mult+0x6a>
 800f87c:	4638      	mov	r0, r7
 800f87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f882:	bf00      	nop
 800f884:	08011238 	.word	0x08011238
 800f888:	08010fee 	.word	0x08010fee
 800f88c:	080110ec 	.word	0x080110ec

0800f890 <__lshift>:
 800f890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f894:	460c      	mov	r4, r1
 800f896:	6849      	ldr	r1, [r1, #4]
 800f898:	6923      	ldr	r3, [r4, #16]
 800f89a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f89e:	68a3      	ldr	r3, [r4, #8]
 800f8a0:	4607      	mov	r7, r0
 800f8a2:	4691      	mov	r9, r2
 800f8a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8a8:	f108 0601 	add.w	r6, r8, #1
 800f8ac:	42b3      	cmp	r3, r6
 800f8ae:	db0b      	blt.n	800f8c8 <__lshift+0x38>
 800f8b0:	4638      	mov	r0, r7
 800f8b2:	f7ff fd91 	bl	800f3d8 <_Balloc>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	b948      	cbnz	r0, 800f8ce <__lshift+0x3e>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	4b2a      	ldr	r3, [pc, #168]	; (800f968 <__lshift+0xd8>)
 800f8be:	482b      	ldr	r0, [pc, #172]	; (800f96c <__lshift+0xdc>)
 800f8c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8c4:	f000 fcd2 	bl	801026c <__assert_func>
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	005b      	lsls	r3, r3, #1
 800f8cc:	e7ee      	b.n	800f8ac <__lshift+0x1c>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	f100 0114 	add.w	r1, r0, #20
 800f8d4:	f100 0210 	add.w	r2, r0, #16
 800f8d8:	4618      	mov	r0, r3
 800f8da:	4553      	cmp	r3, sl
 800f8dc:	db37      	blt.n	800f94e <__lshift+0xbe>
 800f8de:	6920      	ldr	r0, [r4, #16]
 800f8e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8e4:	f104 0314 	add.w	r3, r4, #20
 800f8e8:	f019 091f 	ands.w	r9, r9, #31
 800f8ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f8f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f8f4:	d02f      	beq.n	800f956 <__lshift+0xc6>
 800f8f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f8fa:	468a      	mov	sl, r1
 800f8fc:	f04f 0c00 	mov.w	ip, #0
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	fa02 f209 	lsl.w	r2, r2, r9
 800f906:	ea42 020c 	orr.w	r2, r2, ip
 800f90a:	f84a 2b04 	str.w	r2, [sl], #4
 800f90e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f912:	4298      	cmp	r0, r3
 800f914:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f918:	d8f2      	bhi.n	800f900 <__lshift+0x70>
 800f91a:	1b03      	subs	r3, r0, r4
 800f91c:	3b15      	subs	r3, #21
 800f91e:	f023 0303 	bic.w	r3, r3, #3
 800f922:	3304      	adds	r3, #4
 800f924:	f104 0215 	add.w	r2, r4, #21
 800f928:	4290      	cmp	r0, r2
 800f92a:	bf38      	it	cc
 800f92c:	2304      	movcc	r3, #4
 800f92e:	f841 c003 	str.w	ip, [r1, r3]
 800f932:	f1bc 0f00 	cmp.w	ip, #0
 800f936:	d001      	beq.n	800f93c <__lshift+0xac>
 800f938:	f108 0602 	add.w	r6, r8, #2
 800f93c:	3e01      	subs	r6, #1
 800f93e:	4638      	mov	r0, r7
 800f940:	612e      	str	r6, [r5, #16]
 800f942:	4621      	mov	r1, r4
 800f944:	f7ff fd88 	bl	800f458 <_Bfree>
 800f948:	4628      	mov	r0, r5
 800f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f94e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f952:	3301      	adds	r3, #1
 800f954:	e7c1      	b.n	800f8da <__lshift+0x4a>
 800f956:	3904      	subs	r1, #4
 800f958:	f853 2b04 	ldr.w	r2, [r3], #4
 800f95c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f960:	4298      	cmp	r0, r3
 800f962:	d8f9      	bhi.n	800f958 <__lshift+0xc8>
 800f964:	e7ea      	b.n	800f93c <__lshift+0xac>
 800f966:	bf00      	nop
 800f968:	08011060 	.word	0x08011060
 800f96c:	080110ec 	.word	0x080110ec

0800f970 <__mcmp>:
 800f970:	b530      	push	{r4, r5, lr}
 800f972:	6902      	ldr	r2, [r0, #16]
 800f974:	690c      	ldr	r4, [r1, #16]
 800f976:	1b12      	subs	r2, r2, r4
 800f978:	d10e      	bne.n	800f998 <__mcmp+0x28>
 800f97a:	f100 0314 	add.w	r3, r0, #20
 800f97e:	3114      	adds	r1, #20
 800f980:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f984:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f988:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f98c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f990:	42a5      	cmp	r5, r4
 800f992:	d003      	beq.n	800f99c <__mcmp+0x2c>
 800f994:	d305      	bcc.n	800f9a2 <__mcmp+0x32>
 800f996:	2201      	movs	r2, #1
 800f998:	4610      	mov	r0, r2
 800f99a:	bd30      	pop	{r4, r5, pc}
 800f99c:	4283      	cmp	r3, r0
 800f99e:	d3f3      	bcc.n	800f988 <__mcmp+0x18>
 800f9a0:	e7fa      	b.n	800f998 <__mcmp+0x28>
 800f9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9a6:	e7f7      	b.n	800f998 <__mcmp+0x28>

0800f9a8 <__mdiff>:
 800f9a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	4611      	mov	r1, r2
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	4690      	mov	r8, r2
 800f9b6:	f7ff ffdb 	bl	800f970 <__mcmp>
 800f9ba:	1e05      	subs	r5, r0, #0
 800f9bc:	d110      	bne.n	800f9e0 <__mdiff+0x38>
 800f9be:	4629      	mov	r1, r5
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	f7ff fd09 	bl	800f3d8 <_Balloc>
 800f9c6:	b930      	cbnz	r0, 800f9d6 <__mdiff+0x2e>
 800f9c8:	4b3a      	ldr	r3, [pc, #232]	; (800fab4 <__mdiff+0x10c>)
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	f240 2132 	movw	r1, #562	; 0x232
 800f9d0:	4839      	ldr	r0, [pc, #228]	; (800fab8 <__mdiff+0x110>)
 800f9d2:	f000 fc4b 	bl	801026c <__assert_func>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e0:	bfa4      	itt	ge
 800f9e2:	4643      	movge	r3, r8
 800f9e4:	46a0      	movge	r8, r4
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9ec:	bfa6      	itte	ge
 800f9ee:	461c      	movge	r4, r3
 800f9f0:	2500      	movge	r5, #0
 800f9f2:	2501      	movlt	r5, #1
 800f9f4:	f7ff fcf0 	bl	800f3d8 <_Balloc>
 800f9f8:	b920      	cbnz	r0, 800fa04 <__mdiff+0x5c>
 800f9fa:	4b2e      	ldr	r3, [pc, #184]	; (800fab4 <__mdiff+0x10c>)
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa02:	e7e5      	b.n	800f9d0 <__mdiff+0x28>
 800fa04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fa08:	6926      	ldr	r6, [r4, #16]
 800fa0a:	60c5      	str	r5, [r0, #12]
 800fa0c:	f104 0914 	add.w	r9, r4, #20
 800fa10:	f108 0514 	add.w	r5, r8, #20
 800fa14:	f100 0e14 	add.w	lr, r0, #20
 800fa18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fa1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa20:	f108 0210 	add.w	r2, r8, #16
 800fa24:	46f2      	mov	sl, lr
 800fa26:	2100      	movs	r1, #0
 800fa28:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fa30:	fa1f f883 	uxth.w	r8, r3
 800fa34:	fa11 f18b 	uxtah	r1, r1, fp
 800fa38:	0c1b      	lsrs	r3, r3, #16
 800fa3a:	eba1 0808 	sub.w	r8, r1, r8
 800fa3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fa46:	fa1f f888 	uxth.w	r8, r8
 800fa4a:	1419      	asrs	r1, r3, #16
 800fa4c:	454e      	cmp	r6, r9
 800fa4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fa52:	f84a 3b04 	str.w	r3, [sl], #4
 800fa56:	d8e7      	bhi.n	800fa28 <__mdiff+0x80>
 800fa58:	1b33      	subs	r3, r6, r4
 800fa5a:	3b15      	subs	r3, #21
 800fa5c:	f023 0303 	bic.w	r3, r3, #3
 800fa60:	3304      	adds	r3, #4
 800fa62:	3415      	adds	r4, #21
 800fa64:	42a6      	cmp	r6, r4
 800fa66:	bf38      	it	cc
 800fa68:	2304      	movcc	r3, #4
 800fa6a:	441d      	add	r5, r3
 800fa6c:	4473      	add	r3, lr
 800fa6e:	469e      	mov	lr, r3
 800fa70:	462e      	mov	r6, r5
 800fa72:	4566      	cmp	r6, ip
 800fa74:	d30e      	bcc.n	800fa94 <__mdiff+0xec>
 800fa76:	f10c 0203 	add.w	r2, ip, #3
 800fa7a:	1b52      	subs	r2, r2, r5
 800fa7c:	f022 0203 	bic.w	r2, r2, #3
 800fa80:	3d03      	subs	r5, #3
 800fa82:	45ac      	cmp	ip, r5
 800fa84:	bf38      	it	cc
 800fa86:	2200      	movcc	r2, #0
 800fa88:	441a      	add	r2, r3
 800fa8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fa8e:	b17b      	cbz	r3, 800fab0 <__mdiff+0x108>
 800fa90:	6107      	str	r7, [r0, #16]
 800fa92:	e7a3      	b.n	800f9dc <__mdiff+0x34>
 800fa94:	f856 8b04 	ldr.w	r8, [r6], #4
 800fa98:	fa11 f288 	uxtah	r2, r1, r8
 800fa9c:	1414      	asrs	r4, r2, #16
 800fa9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800faa2:	b292      	uxth	r2, r2
 800faa4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800faa8:	f84e 2b04 	str.w	r2, [lr], #4
 800faac:	1421      	asrs	r1, r4, #16
 800faae:	e7e0      	b.n	800fa72 <__mdiff+0xca>
 800fab0:	3f01      	subs	r7, #1
 800fab2:	e7ea      	b.n	800fa8a <__mdiff+0xe2>
 800fab4:	08011060 	.word	0x08011060
 800fab8:	080110ec 	.word	0x080110ec

0800fabc <__ulp>:
 800fabc:	b082      	sub	sp, #8
 800fabe:	ed8d 0b00 	vstr	d0, [sp]
 800fac2:	9b01      	ldr	r3, [sp, #4]
 800fac4:	4912      	ldr	r1, [pc, #72]	; (800fb10 <__ulp+0x54>)
 800fac6:	4019      	ands	r1, r3
 800fac8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800facc:	2900      	cmp	r1, #0
 800face:	dd05      	ble.n	800fadc <__ulp+0x20>
 800fad0:	2200      	movs	r2, #0
 800fad2:	460b      	mov	r3, r1
 800fad4:	ec43 2b10 	vmov	d0, r2, r3
 800fad8:	b002      	add	sp, #8
 800fada:	4770      	bx	lr
 800fadc:	4249      	negs	r1, r1
 800fade:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fae2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fae6:	f04f 0200 	mov.w	r2, #0
 800faea:	f04f 0300 	mov.w	r3, #0
 800faee:	da04      	bge.n	800fafa <__ulp+0x3e>
 800faf0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800faf4:	fa41 f300 	asr.w	r3, r1, r0
 800faf8:	e7ec      	b.n	800fad4 <__ulp+0x18>
 800fafa:	f1a0 0114 	sub.w	r1, r0, #20
 800fafe:	291e      	cmp	r1, #30
 800fb00:	bfda      	itte	le
 800fb02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fb06:	fa20 f101 	lsrle.w	r1, r0, r1
 800fb0a:	2101      	movgt	r1, #1
 800fb0c:	460a      	mov	r2, r1
 800fb0e:	e7e1      	b.n	800fad4 <__ulp+0x18>
 800fb10:	7ff00000 	.word	0x7ff00000

0800fb14 <__b2d>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	6905      	ldr	r5, [r0, #16]
 800fb18:	f100 0714 	add.w	r7, r0, #20
 800fb1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fb20:	1f2e      	subs	r6, r5, #4
 800fb22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fb26:	4620      	mov	r0, r4
 800fb28:	f7ff fd48 	bl	800f5bc <__hi0bits>
 800fb2c:	f1c0 0320 	rsb	r3, r0, #32
 800fb30:	280a      	cmp	r0, #10
 800fb32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fbb0 <__b2d+0x9c>
 800fb36:	600b      	str	r3, [r1, #0]
 800fb38:	dc14      	bgt.n	800fb64 <__b2d+0x50>
 800fb3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fb3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fb42:	42b7      	cmp	r7, r6
 800fb44:	ea41 030c 	orr.w	r3, r1, ip
 800fb48:	bf34      	ite	cc
 800fb4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb4e:	2100      	movcs	r1, #0
 800fb50:	3015      	adds	r0, #21
 800fb52:	fa04 f000 	lsl.w	r0, r4, r0
 800fb56:	fa21 f10e 	lsr.w	r1, r1, lr
 800fb5a:	ea40 0201 	orr.w	r2, r0, r1
 800fb5e:	ec43 2b10 	vmov	d0, r2, r3
 800fb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb64:	42b7      	cmp	r7, r6
 800fb66:	bf3a      	itte	cc
 800fb68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fb6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fb70:	2100      	movcs	r1, #0
 800fb72:	380b      	subs	r0, #11
 800fb74:	d017      	beq.n	800fba6 <__b2d+0x92>
 800fb76:	f1c0 0c20 	rsb	ip, r0, #32
 800fb7a:	fa04 f500 	lsl.w	r5, r4, r0
 800fb7e:	42be      	cmp	r6, r7
 800fb80:	fa21 f40c 	lsr.w	r4, r1, ip
 800fb84:	ea45 0504 	orr.w	r5, r5, r4
 800fb88:	bf8c      	ite	hi
 800fb8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fb8e:	2400      	movls	r4, #0
 800fb90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fb94:	fa01 f000 	lsl.w	r0, r1, r0
 800fb98:	fa24 f40c 	lsr.w	r4, r4, ip
 800fb9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fba0:	ea40 0204 	orr.w	r2, r0, r4
 800fba4:	e7db      	b.n	800fb5e <__b2d+0x4a>
 800fba6:	ea44 030c 	orr.w	r3, r4, ip
 800fbaa:	460a      	mov	r2, r1
 800fbac:	e7d7      	b.n	800fb5e <__b2d+0x4a>
 800fbae:	bf00      	nop
 800fbb0:	3ff00000 	.word	0x3ff00000

0800fbb4 <__d2b>:
 800fbb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fbb8:	4689      	mov	r9, r1
 800fbba:	2101      	movs	r1, #1
 800fbbc:	ec57 6b10 	vmov	r6, r7, d0
 800fbc0:	4690      	mov	r8, r2
 800fbc2:	f7ff fc09 	bl	800f3d8 <_Balloc>
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	b930      	cbnz	r0, 800fbd8 <__d2b+0x24>
 800fbca:	4602      	mov	r2, r0
 800fbcc:	4b25      	ldr	r3, [pc, #148]	; (800fc64 <__d2b+0xb0>)
 800fbce:	4826      	ldr	r0, [pc, #152]	; (800fc68 <__d2b+0xb4>)
 800fbd0:	f240 310a 	movw	r1, #778	; 0x30a
 800fbd4:	f000 fb4a 	bl	801026c <__assert_func>
 800fbd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fbdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fbe0:	bb35      	cbnz	r5, 800fc30 <__d2b+0x7c>
 800fbe2:	2e00      	cmp	r6, #0
 800fbe4:	9301      	str	r3, [sp, #4]
 800fbe6:	d028      	beq.n	800fc3a <__d2b+0x86>
 800fbe8:	4668      	mov	r0, sp
 800fbea:	9600      	str	r6, [sp, #0]
 800fbec:	f7ff fd06 	bl	800f5fc <__lo0bits>
 800fbf0:	9900      	ldr	r1, [sp, #0]
 800fbf2:	b300      	cbz	r0, 800fc36 <__d2b+0x82>
 800fbf4:	9a01      	ldr	r2, [sp, #4]
 800fbf6:	f1c0 0320 	rsb	r3, r0, #32
 800fbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800fbfe:	430b      	orrs	r3, r1
 800fc00:	40c2      	lsrs	r2, r0
 800fc02:	6163      	str	r3, [r4, #20]
 800fc04:	9201      	str	r2, [sp, #4]
 800fc06:	9b01      	ldr	r3, [sp, #4]
 800fc08:	61a3      	str	r3, [r4, #24]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	bf14      	ite	ne
 800fc0e:	2202      	movne	r2, #2
 800fc10:	2201      	moveq	r2, #1
 800fc12:	6122      	str	r2, [r4, #16]
 800fc14:	b1d5      	cbz	r5, 800fc4c <__d2b+0x98>
 800fc16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc1a:	4405      	add	r5, r0
 800fc1c:	f8c9 5000 	str.w	r5, [r9]
 800fc20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc24:	f8c8 0000 	str.w	r0, [r8]
 800fc28:	4620      	mov	r0, r4
 800fc2a:	b003      	add	sp, #12
 800fc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc34:	e7d5      	b.n	800fbe2 <__d2b+0x2e>
 800fc36:	6161      	str	r1, [r4, #20]
 800fc38:	e7e5      	b.n	800fc06 <__d2b+0x52>
 800fc3a:	a801      	add	r0, sp, #4
 800fc3c:	f7ff fcde 	bl	800f5fc <__lo0bits>
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	6163      	str	r3, [r4, #20]
 800fc44:	2201      	movs	r2, #1
 800fc46:	6122      	str	r2, [r4, #16]
 800fc48:	3020      	adds	r0, #32
 800fc4a:	e7e3      	b.n	800fc14 <__d2b+0x60>
 800fc4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fc50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc54:	f8c9 0000 	str.w	r0, [r9]
 800fc58:	6918      	ldr	r0, [r3, #16]
 800fc5a:	f7ff fcaf 	bl	800f5bc <__hi0bits>
 800fc5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fc62:	e7df      	b.n	800fc24 <__d2b+0x70>
 800fc64:	08011060 	.word	0x08011060
 800fc68:	080110ec 	.word	0x080110ec

0800fc6c <__ratio>:
 800fc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc70:	4688      	mov	r8, r1
 800fc72:	4669      	mov	r1, sp
 800fc74:	4681      	mov	r9, r0
 800fc76:	f7ff ff4d 	bl	800fb14 <__b2d>
 800fc7a:	a901      	add	r1, sp, #4
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	ec55 4b10 	vmov	r4, r5, d0
 800fc82:	f7ff ff47 	bl	800fb14 <__b2d>
 800fc86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fc8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fc8e:	eba3 0c02 	sub.w	ip, r3, r2
 800fc92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc96:	1a9b      	subs	r3, r3, r2
 800fc98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fc9c:	ec51 0b10 	vmov	r0, r1, d0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	bfd6      	itet	le
 800fca4:	460a      	movle	r2, r1
 800fca6:	462a      	movgt	r2, r5
 800fca8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcac:	468b      	mov	fp, r1
 800fcae:	462f      	mov	r7, r5
 800fcb0:	bfd4      	ite	le
 800fcb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fcb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcba:	4620      	mov	r0, r4
 800fcbc:	ee10 2a10 	vmov	r2, s0
 800fcc0:	465b      	mov	r3, fp
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f7f0 fdca 	bl	800085c <__aeabi_ddiv>
 800fcc8:	ec41 0b10 	vmov	d0, r0, r1
 800fccc:	b003      	add	sp, #12
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcd2 <__copybits>:
 800fcd2:	3901      	subs	r1, #1
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	1149      	asrs	r1, r1, #5
 800fcd8:	6914      	ldr	r4, [r2, #16]
 800fcda:	3101      	adds	r1, #1
 800fcdc:	f102 0314 	add.w	r3, r2, #20
 800fce0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fce4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fce8:	1f05      	subs	r5, r0, #4
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	d30c      	bcc.n	800fd08 <__copybits+0x36>
 800fcee:	1aa3      	subs	r3, r4, r2
 800fcf0:	3b11      	subs	r3, #17
 800fcf2:	f023 0303 	bic.w	r3, r3, #3
 800fcf6:	3211      	adds	r2, #17
 800fcf8:	42a2      	cmp	r2, r4
 800fcfa:	bf88      	it	hi
 800fcfc:	2300      	movhi	r3, #0
 800fcfe:	4418      	add	r0, r3
 800fd00:	2300      	movs	r3, #0
 800fd02:	4288      	cmp	r0, r1
 800fd04:	d305      	bcc.n	800fd12 <__copybits+0x40>
 800fd06:	bd70      	pop	{r4, r5, r6, pc}
 800fd08:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd10:	e7eb      	b.n	800fcea <__copybits+0x18>
 800fd12:	f840 3b04 	str.w	r3, [r0], #4
 800fd16:	e7f4      	b.n	800fd02 <__copybits+0x30>

0800fd18 <__any_on>:
 800fd18:	f100 0214 	add.w	r2, r0, #20
 800fd1c:	6900      	ldr	r0, [r0, #16]
 800fd1e:	114b      	asrs	r3, r1, #5
 800fd20:	4298      	cmp	r0, r3
 800fd22:	b510      	push	{r4, lr}
 800fd24:	db11      	blt.n	800fd4a <__any_on+0x32>
 800fd26:	dd0a      	ble.n	800fd3e <__any_on+0x26>
 800fd28:	f011 011f 	ands.w	r1, r1, #31
 800fd2c:	d007      	beq.n	800fd3e <__any_on+0x26>
 800fd2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd32:	fa24 f001 	lsr.w	r0, r4, r1
 800fd36:	fa00 f101 	lsl.w	r1, r0, r1
 800fd3a:	428c      	cmp	r4, r1
 800fd3c:	d10b      	bne.n	800fd56 <__any_on+0x3e>
 800fd3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d803      	bhi.n	800fd4e <__any_on+0x36>
 800fd46:	2000      	movs	r0, #0
 800fd48:	bd10      	pop	{r4, pc}
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	e7f7      	b.n	800fd3e <__any_on+0x26>
 800fd4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd52:	2900      	cmp	r1, #0
 800fd54:	d0f5      	beq.n	800fd42 <__any_on+0x2a>
 800fd56:	2001      	movs	r0, #1
 800fd58:	e7f6      	b.n	800fd48 <__any_on+0x30>

0800fd5a <_calloc_r>:
 800fd5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd5c:	fba1 2402 	umull	r2, r4, r1, r2
 800fd60:	b94c      	cbnz	r4, 800fd76 <_calloc_r+0x1c>
 800fd62:	4611      	mov	r1, r2
 800fd64:	9201      	str	r2, [sp, #4]
 800fd66:	f7fc f91d 	bl	800bfa4 <_malloc_r>
 800fd6a:	9a01      	ldr	r2, [sp, #4]
 800fd6c:	4605      	mov	r5, r0
 800fd6e:	b930      	cbnz	r0, 800fd7e <_calloc_r+0x24>
 800fd70:	4628      	mov	r0, r5
 800fd72:	b003      	add	sp, #12
 800fd74:	bd30      	pop	{r4, r5, pc}
 800fd76:	220c      	movs	r2, #12
 800fd78:	6002      	str	r2, [r0, #0]
 800fd7a:	2500      	movs	r5, #0
 800fd7c:	e7f8      	b.n	800fd70 <_calloc_r+0x16>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	f7fc f89c 	bl	800bebc <memset>
 800fd84:	e7f4      	b.n	800fd70 <_calloc_r+0x16>

0800fd86 <_realloc_r>:
 800fd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8a:	4680      	mov	r8, r0
 800fd8c:	4614      	mov	r4, r2
 800fd8e:	460e      	mov	r6, r1
 800fd90:	b921      	cbnz	r1, 800fd9c <_realloc_r+0x16>
 800fd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd96:	4611      	mov	r1, r2
 800fd98:	f7fc b904 	b.w	800bfa4 <_malloc_r>
 800fd9c:	b92a      	cbnz	r2, 800fdaa <_realloc_r+0x24>
 800fd9e:	f7fc f895 	bl	800becc <_free_r>
 800fda2:	4625      	mov	r5, r4
 800fda4:	4628      	mov	r0, r5
 800fda6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdaa:	f000 faf5 	bl	8010398 <_malloc_usable_size_r>
 800fdae:	4284      	cmp	r4, r0
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	d802      	bhi.n	800fdba <_realloc_r+0x34>
 800fdb4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fdb8:	d812      	bhi.n	800fde0 <_realloc_r+0x5a>
 800fdba:	4621      	mov	r1, r4
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	f7fc f8f1 	bl	800bfa4 <_malloc_r>
 800fdc2:	4605      	mov	r5, r0
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d0ed      	beq.n	800fda4 <_realloc_r+0x1e>
 800fdc8:	42bc      	cmp	r4, r7
 800fdca:	4622      	mov	r2, r4
 800fdcc:	4631      	mov	r1, r6
 800fdce:	bf28      	it	cs
 800fdd0:	463a      	movcs	r2, r7
 800fdd2:	f7fc f84b 	bl	800be6c <memcpy>
 800fdd6:	4631      	mov	r1, r6
 800fdd8:	4640      	mov	r0, r8
 800fdda:	f7fc f877 	bl	800becc <_free_r>
 800fdde:	e7e1      	b.n	800fda4 <_realloc_r+0x1e>
 800fde0:	4635      	mov	r5, r6
 800fde2:	e7df      	b.n	800fda4 <_realloc_r+0x1e>

0800fde4 <__ssputs_r>:
 800fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde8:	688e      	ldr	r6, [r1, #8]
 800fdea:	429e      	cmp	r6, r3
 800fdec:	4682      	mov	sl, r0
 800fdee:	460c      	mov	r4, r1
 800fdf0:	4690      	mov	r8, r2
 800fdf2:	461f      	mov	r7, r3
 800fdf4:	d838      	bhi.n	800fe68 <__ssputs_r+0x84>
 800fdf6:	898a      	ldrh	r2, [r1, #12]
 800fdf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdfc:	d032      	beq.n	800fe64 <__ssputs_r+0x80>
 800fdfe:	6825      	ldr	r5, [r4, #0]
 800fe00:	6909      	ldr	r1, [r1, #16]
 800fe02:	eba5 0901 	sub.w	r9, r5, r1
 800fe06:	6965      	ldr	r5, [r4, #20]
 800fe08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe10:	3301      	adds	r3, #1
 800fe12:	444b      	add	r3, r9
 800fe14:	106d      	asrs	r5, r5, #1
 800fe16:	429d      	cmp	r5, r3
 800fe18:	bf38      	it	cc
 800fe1a:	461d      	movcc	r5, r3
 800fe1c:	0553      	lsls	r3, r2, #21
 800fe1e:	d531      	bpl.n	800fe84 <__ssputs_r+0xa0>
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7fc f8bf 	bl	800bfa4 <_malloc_r>
 800fe26:	4606      	mov	r6, r0
 800fe28:	b950      	cbnz	r0, 800fe40 <__ssputs_r+0x5c>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	f8ca 3000 	str.w	r3, [sl]
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe36:	81a3      	strh	r3, [r4, #12]
 800fe38:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe40:	6921      	ldr	r1, [r4, #16]
 800fe42:	464a      	mov	r2, r9
 800fe44:	f7fc f812 	bl	800be6c <memcpy>
 800fe48:	89a3      	ldrh	r3, [r4, #12]
 800fe4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe52:	81a3      	strh	r3, [r4, #12]
 800fe54:	6126      	str	r6, [r4, #16]
 800fe56:	6165      	str	r5, [r4, #20]
 800fe58:	444e      	add	r6, r9
 800fe5a:	eba5 0509 	sub.w	r5, r5, r9
 800fe5e:	6026      	str	r6, [r4, #0]
 800fe60:	60a5      	str	r5, [r4, #8]
 800fe62:	463e      	mov	r6, r7
 800fe64:	42be      	cmp	r6, r7
 800fe66:	d900      	bls.n	800fe6a <__ssputs_r+0x86>
 800fe68:	463e      	mov	r6, r7
 800fe6a:	6820      	ldr	r0, [r4, #0]
 800fe6c:	4632      	mov	r2, r6
 800fe6e:	4641      	mov	r1, r8
 800fe70:	f7fc f80a 	bl	800be88 <memmove>
 800fe74:	68a3      	ldr	r3, [r4, #8]
 800fe76:	1b9b      	subs	r3, r3, r6
 800fe78:	60a3      	str	r3, [r4, #8]
 800fe7a:	6823      	ldr	r3, [r4, #0]
 800fe7c:	4433      	add	r3, r6
 800fe7e:	6023      	str	r3, [r4, #0]
 800fe80:	2000      	movs	r0, #0
 800fe82:	e7db      	b.n	800fe3c <__ssputs_r+0x58>
 800fe84:	462a      	mov	r2, r5
 800fe86:	f7ff ff7e 	bl	800fd86 <_realloc_r>
 800fe8a:	4606      	mov	r6, r0
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d1e1      	bne.n	800fe54 <__ssputs_r+0x70>
 800fe90:	6921      	ldr	r1, [r4, #16]
 800fe92:	4650      	mov	r0, sl
 800fe94:	f7fc f81a 	bl	800becc <_free_r>
 800fe98:	e7c7      	b.n	800fe2a <__ssputs_r+0x46>
	...

0800fe9c <_svfiprintf_r>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	4698      	mov	r8, r3
 800fea2:	898b      	ldrh	r3, [r1, #12]
 800fea4:	061b      	lsls	r3, r3, #24
 800fea6:	b09d      	sub	sp, #116	; 0x74
 800fea8:	4607      	mov	r7, r0
 800feaa:	460d      	mov	r5, r1
 800feac:	4614      	mov	r4, r2
 800feae:	d50e      	bpl.n	800fece <_svfiprintf_r+0x32>
 800feb0:	690b      	ldr	r3, [r1, #16]
 800feb2:	b963      	cbnz	r3, 800fece <_svfiprintf_r+0x32>
 800feb4:	2140      	movs	r1, #64	; 0x40
 800feb6:	f7fc f875 	bl	800bfa4 <_malloc_r>
 800feba:	6028      	str	r0, [r5, #0]
 800febc:	6128      	str	r0, [r5, #16]
 800febe:	b920      	cbnz	r0, 800feca <_svfiprintf_r+0x2e>
 800fec0:	230c      	movs	r3, #12
 800fec2:	603b      	str	r3, [r7, #0]
 800fec4:	f04f 30ff 	mov.w	r0, #4294967295
 800fec8:	e0d1      	b.n	801006e <_svfiprintf_r+0x1d2>
 800feca:	2340      	movs	r3, #64	; 0x40
 800fecc:	616b      	str	r3, [r5, #20]
 800fece:	2300      	movs	r3, #0
 800fed0:	9309      	str	r3, [sp, #36]	; 0x24
 800fed2:	2320      	movs	r3, #32
 800fed4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fed8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fedc:	2330      	movs	r3, #48	; 0x30
 800fede:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010088 <_svfiprintf_r+0x1ec>
 800fee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fee6:	f04f 0901 	mov.w	r9, #1
 800feea:	4623      	mov	r3, r4
 800feec:	469a      	mov	sl, r3
 800feee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fef2:	b10a      	cbz	r2, 800fef8 <_svfiprintf_r+0x5c>
 800fef4:	2a25      	cmp	r2, #37	; 0x25
 800fef6:	d1f9      	bne.n	800feec <_svfiprintf_r+0x50>
 800fef8:	ebba 0b04 	subs.w	fp, sl, r4
 800fefc:	d00b      	beq.n	800ff16 <_svfiprintf_r+0x7a>
 800fefe:	465b      	mov	r3, fp
 800ff00:	4622      	mov	r2, r4
 800ff02:	4629      	mov	r1, r5
 800ff04:	4638      	mov	r0, r7
 800ff06:	f7ff ff6d 	bl	800fde4 <__ssputs_r>
 800ff0a:	3001      	adds	r0, #1
 800ff0c:	f000 80aa 	beq.w	8010064 <_svfiprintf_r+0x1c8>
 800ff10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff12:	445a      	add	r2, fp
 800ff14:	9209      	str	r2, [sp, #36]	; 0x24
 800ff16:	f89a 3000 	ldrb.w	r3, [sl]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	f000 80a2 	beq.w	8010064 <_svfiprintf_r+0x1c8>
 800ff20:	2300      	movs	r3, #0
 800ff22:	f04f 32ff 	mov.w	r2, #4294967295
 800ff26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff2a:	f10a 0a01 	add.w	sl, sl, #1
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	9307      	str	r3, [sp, #28]
 800ff32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff36:	931a      	str	r3, [sp, #104]	; 0x68
 800ff38:	4654      	mov	r4, sl
 800ff3a:	2205      	movs	r2, #5
 800ff3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff40:	4851      	ldr	r0, [pc, #324]	; (8010088 <_svfiprintf_r+0x1ec>)
 800ff42:	f7f0 f955 	bl	80001f0 <memchr>
 800ff46:	9a04      	ldr	r2, [sp, #16]
 800ff48:	b9d8      	cbnz	r0, 800ff82 <_svfiprintf_r+0xe6>
 800ff4a:	06d0      	lsls	r0, r2, #27
 800ff4c:	bf44      	itt	mi
 800ff4e:	2320      	movmi	r3, #32
 800ff50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff54:	0711      	lsls	r1, r2, #28
 800ff56:	bf44      	itt	mi
 800ff58:	232b      	movmi	r3, #43	; 0x2b
 800ff5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff62:	2b2a      	cmp	r3, #42	; 0x2a
 800ff64:	d015      	beq.n	800ff92 <_svfiprintf_r+0xf6>
 800ff66:	9a07      	ldr	r2, [sp, #28]
 800ff68:	4654      	mov	r4, sl
 800ff6a:	2000      	movs	r0, #0
 800ff6c:	f04f 0c0a 	mov.w	ip, #10
 800ff70:	4621      	mov	r1, r4
 800ff72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff76:	3b30      	subs	r3, #48	; 0x30
 800ff78:	2b09      	cmp	r3, #9
 800ff7a:	d94e      	bls.n	801001a <_svfiprintf_r+0x17e>
 800ff7c:	b1b0      	cbz	r0, 800ffac <_svfiprintf_r+0x110>
 800ff7e:	9207      	str	r2, [sp, #28]
 800ff80:	e014      	b.n	800ffac <_svfiprintf_r+0x110>
 800ff82:	eba0 0308 	sub.w	r3, r0, r8
 800ff86:	fa09 f303 	lsl.w	r3, r9, r3
 800ff8a:	4313      	orrs	r3, r2
 800ff8c:	9304      	str	r3, [sp, #16]
 800ff8e:	46a2      	mov	sl, r4
 800ff90:	e7d2      	b.n	800ff38 <_svfiprintf_r+0x9c>
 800ff92:	9b03      	ldr	r3, [sp, #12]
 800ff94:	1d19      	adds	r1, r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	9103      	str	r1, [sp, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	bfbb      	ittet	lt
 800ff9e:	425b      	neglt	r3, r3
 800ffa0:	f042 0202 	orrlt.w	r2, r2, #2
 800ffa4:	9307      	strge	r3, [sp, #28]
 800ffa6:	9307      	strlt	r3, [sp, #28]
 800ffa8:	bfb8      	it	lt
 800ffaa:	9204      	strlt	r2, [sp, #16]
 800ffac:	7823      	ldrb	r3, [r4, #0]
 800ffae:	2b2e      	cmp	r3, #46	; 0x2e
 800ffb0:	d10c      	bne.n	800ffcc <_svfiprintf_r+0x130>
 800ffb2:	7863      	ldrb	r3, [r4, #1]
 800ffb4:	2b2a      	cmp	r3, #42	; 0x2a
 800ffb6:	d135      	bne.n	8010024 <_svfiprintf_r+0x188>
 800ffb8:	9b03      	ldr	r3, [sp, #12]
 800ffba:	1d1a      	adds	r2, r3, #4
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	9203      	str	r2, [sp, #12]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	bfb8      	it	lt
 800ffc4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffc8:	3402      	adds	r4, #2
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010098 <_svfiprintf_r+0x1fc>
 800ffd0:	7821      	ldrb	r1, [r4, #0]
 800ffd2:	2203      	movs	r2, #3
 800ffd4:	4650      	mov	r0, sl
 800ffd6:	f7f0 f90b 	bl	80001f0 <memchr>
 800ffda:	b140      	cbz	r0, 800ffee <_svfiprintf_r+0x152>
 800ffdc:	2340      	movs	r3, #64	; 0x40
 800ffde:	eba0 000a 	sub.w	r0, r0, sl
 800ffe2:	fa03 f000 	lsl.w	r0, r3, r0
 800ffe6:	9b04      	ldr	r3, [sp, #16]
 800ffe8:	4303      	orrs	r3, r0
 800ffea:	3401      	adds	r4, #1
 800ffec:	9304      	str	r3, [sp, #16]
 800ffee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff2:	4826      	ldr	r0, [pc, #152]	; (801008c <_svfiprintf_r+0x1f0>)
 800fff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fff8:	2206      	movs	r2, #6
 800fffa:	f7f0 f8f9 	bl	80001f0 <memchr>
 800fffe:	2800      	cmp	r0, #0
 8010000:	d038      	beq.n	8010074 <_svfiprintf_r+0x1d8>
 8010002:	4b23      	ldr	r3, [pc, #140]	; (8010090 <_svfiprintf_r+0x1f4>)
 8010004:	bb1b      	cbnz	r3, 801004e <_svfiprintf_r+0x1b2>
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	3307      	adds	r3, #7
 801000a:	f023 0307 	bic.w	r3, r3, #7
 801000e:	3308      	adds	r3, #8
 8010010:	9303      	str	r3, [sp, #12]
 8010012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010014:	4433      	add	r3, r6
 8010016:	9309      	str	r3, [sp, #36]	; 0x24
 8010018:	e767      	b.n	800feea <_svfiprintf_r+0x4e>
 801001a:	fb0c 3202 	mla	r2, ip, r2, r3
 801001e:	460c      	mov	r4, r1
 8010020:	2001      	movs	r0, #1
 8010022:	e7a5      	b.n	800ff70 <_svfiprintf_r+0xd4>
 8010024:	2300      	movs	r3, #0
 8010026:	3401      	adds	r4, #1
 8010028:	9305      	str	r3, [sp, #20]
 801002a:	4619      	mov	r1, r3
 801002c:	f04f 0c0a 	mov.w	ip, #10
 8010030:	4620      	mov	r0, r4
 8010032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010036:	3a30      	subs	r2, #48	; 0x30
 8010038:	2a09      	cmp	r2, #9
 801003a:	d903      	bls.n	8010044 <_svfiprintf_r+0x1a8>
 801003c:	2b00      	cmp	r3, #0
 801003e:	d0c5      	beq.n	800ffcc <_svfiprintf_r+0x130>
 8010040:	9105      	str	r1, [sp, #20]
 8010042:	e7c3      	b.n	800ffcc <_svfiprintf_r+0x130>
 8010044:	fb0c 2101 	mla	r1, ip, r1, r2
 8010048:	4604      	mov	r4, r0
 801004a:	2301      	movs	r3, #1
 801004c:	e7f0      	b.n	8010030 <_svfiprintf_r+0x194>
 801004e:	ab03      	add	r3, sp, #12
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	462a      	mov	r2, r5
 8010054:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <_svfiprintf_r+0x1f8>)
 8010056:	a904      	add	r1, sp, #16
 8010058:	4638      	mov	r0, r7
 801005a:	f7fc f8b7 	bl	800c1cc <_printf_float>
 801005e:	1c42      	adds	r2, r0, #1
 8010060:	4606      	mov	r6, r0
 8010062:	d1d6      	bne.n	8010012 <_svfiprintf_r+0x176>
 8010064:	89ab      	ldrh	r3, [r5, #12]
 8010066:	065b      	lsls	r3, r3, #25
 8010068:	f53f af2c 	bmi.w	800fec4 <_svfiprintf_r+0x28>
 801006c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801006e:	b01d      	add	sp, #116	; 0x74
 8010070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010074:	ab03      	add	r3, sp, #12
 8010076:	9300      	str	r3, [sp, #0]
 8010078:	462a      	mov	r2, r5
 801007a:	4b06      	ldr	r3, [pc, #24]	; (8010094 <_svfiprintf_r+0x1f8>)
 801007c:	a904      	add	r1, sp, #16
 801007e:	4638      	mov	r0, r7
 8010080:	f7fc fb48 	bl	800c714 <_printf_i>
 8010084:	e7eb      	b.n	801005e <_svfiprintf_r+0x1c2>
 8010086:	bf00      	nop
 8010088:	08011244 	.word	0x08011244
 801008c:	0801124e 	.word	0x0801124e
 8010090:	0800c1cd 	.word	0x0800c1cd
 8010094:	0800fde5 	.word	0x0800fde5
 8010098:	0801124a 	.word	0x0801124a

0801009c <_read_r>:
 801009c:	b538      	push	{r3, r4, r5, lr}
 801009e:	4d07      	ldr	r5, [pc, #28]	; (80100bc <_read_r+0x20>)
 80100a0:	4604      	mov	r4, r0
 80100a2:	4608      	mov	r0, r1
 80100a4:	4611      	mov	r1, r2
 80100a6:	2200      	movs	r2, #0
 80100a8:	602a      	str	r2, [r5, #0]
 80100aa:	461a      	mov	r2, r3
 80100ac:	f7f4 fc24 	bl	80048f8 <_read>
 80100b0:	1c43      	adds	r3, r0, #1
 80100b2:	d102      	bne.n	80100ba <_read_r+0x1e>
 80100b4:	682b      	ldr	r3, [r5, #0]
 80100b6:	b103      	cbz	r3, 80100ba <_read_r+0x1e>
 80100b8:	6023      	str	r3, [r4, #0]
 80100ba:	bd38      	pop	{r3, r4, r5, pc}
 80100bc:	2000531c 	.word	0x2000531c

080100c0 <nan>:
 80100c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80100c8 <nan+0x8>
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	00000000 	.word	0x00000000
 80100cc:	7ff80000 	.word	0x7ff80000

080100d0 <__swbuf_r>:
 80100d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d2:	460e      	mov	r6, r1
 80100d4:	4614      	mov	r4, r2
 80100d6:	4605      	mov	r5, r0
 80100d8:	b118      	cbz	r0, 80100e2 <__swbuf_r+0x12>
 80100da:	6983      	ldr	r3, [r0, #24]
 80100dc:	b90b      	cbnz	r3, 80100e2 <__swbuf_r+0x12>
 80100de:	f7fb fdef 	bl	800bcc0 <__sinit>
 80100e2:	4b21      	ldr	r3, [pc, #132]	; (8010168 <__swbuf_r+0x98>)
 80100e4:	429c      	cmp	r4, r3
 80100e6:	d12b      	bne.n	8010140 <__swbuf_r+0x70>
 80100e8:	686c      	ldr	r4, [r5, #4]
 80100ea:	69a3      	ldr	r3, [r4, #24]
 80100ec:	60a3      	str	r3, [r4, #8]
 80100ee:	89a3      	ldrh	r3, [r4, #12]
 80100f0:	071a      	lsls	r2, r3, #28
 80100f2:	d52f      	bpl.n	8010154 <__swbuf_r+0x84>
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	b36b      	cbz	r3, 8010154 <__swbuf_r+0x84>
 80100f8:	6923      	ldr	r3, [r4, #16]
 80100fa:	6820      	ldr	r0, [r4, #0]
 80100fc:	1ac0      	subs	r0, r0, r3
 80100fe:	6963      	ldr	r3, [r4, #20]
 8010100:	b2f6      	uxtb	r6, r6
 8010102:	4283      	cmp	r3, r0
 8010104:	4637      	mov	r7, r6
 8010106:	dc04      	bgt.n	8010112 <__swbuf_r+0x42>
 8010108:	4621      	mov	r1, r4
 801010a:	4628      	mov	r0, r5
 801010c:	f7fe fd84 	bl	800ec18 <_fflush_r>
 8010110:	bb30      	cbnz	r0, 8010160 <__swbuf_r+0x90>
 8010112:	68a3      	ldr	r3, [r4, #8]
 8010114:	3b01      	subs	r3, #1
 8010116:	60a3      	str	r3, [r4, #8]
 8010118:	6823      	ldr	r3, [r4, #0]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	6022      	str	r2, [r4, #0]
 801011e:	701e      	strb	r6, [r3, #0]
 8010120:	6963      	ldr	r3, [r4, #20]
 8010122:	3001      	adds	r0, #1
 8010124:	4283      	cmp	r3, r0
 8010126:	d004      	beq.n	8010132 <__swbuf_r+0x62>
 8010128:	89a3      	ldrh	r3, [r4, #12]
 801012a:	07db      	lsls	r3, r3, #31
 801012c:	d506      	bpl.n	801013c <__swbuf_r+0x6c>
 801012e:	2e0a      	cmp	r6, #10
 8010130:	d104      	bne.n	801013c <__swbuf_r+0x6c>
 8010132:	4621      	mov	r1, r4
 8010134:	4628      	mov	r0, r5
 8010136:	f7fe fd6f 	bl	800ec18 <_fflush_r>
 801013a:	b988      	cbnz	r0, 8010160 <__swbuf_r+0x90>
 801013c:	4638      	mov	r0, r7
 801013e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010140:	4b0a      	ldr	r3, [pc, #40]	; (801016c <__swbuf_r+0x9c>)
 8010142:	429c      	cmp	r4, r3
 8010144:	d101      	bne.n	801014a <__swbuf_r+0x7a>
 8010146:	68ac      	ldr	r4, [r5, #8]
 8010148:	e7cf      	b.n	80100ea <__swbuf_r+0x1a>
 801014a:	4b09      	ldr	r3, [pc, #36]	; (8010170 <__swbuf_r+0xa0>)
 801014c:	429c      	cmp	r4, r3
 801014e:	bf08      	it	eq
 8010150:	68ec      	ldreq	r4, [r5, #12]
 8010152:	e7ca      	b.n	80100ea <__swbuf_r+0x1a>
 8010154:	4621      	mov	r1, r4
 8010156:	4628      	mov	r0, r5
 8010158:	f000 f81a 	bl	8010190 <__swsetup_r>
 801015c:	2800      	cmp	r0, #0
 801015e:	d0cb      	beq.n	80100f8 <__swbuf_r+0x28>
 8010160:	f04f 37ff 	mov.w	r7, #4294967295
 8010164:	e7ea      	b.n	801013c <__swbuf_r+0x6c>
 8010166:	bf00      	nop
 8010168:	08010e10 	.word	0x08010e10
 801016c:	08010e30 	.word	0x08010e30
 8010170:	08010df0 	.word	0x08010df0

08010174 <__ascii_wctomb>:
 8010174:	b149      	cbz	r1, 801018a <__ascii_wctomb+0x16>
 8010176:	2aff      	cmp	r2, #255	; 0xff
 8010178:	bf85      	ittet	hi
 801017a:	238a      	movhi	r3, #138	; 0x8a
 801017c:	6003      	strhi	r3, [r0, #0]
 801017e:	700a      	strbls	r2, [r1, #0]
 8010180:	f04f 30ff 	movhi.w	r0, #4294967295
 8010184:	bf98      	it	ls
 8010186:	2001      	movls	r0, #1
 8010188:	4770      	bx	lr
 801018a:	4608      	mov	r0, r1
 801018c:	4770      	bx	lr
	...

08010190 <__swsetup_r>:
 8010190:	4b32      	ldr	r3, [pc, #200]	; (801025c <__swsetup_r+0xcc>)
 8010192:	b570      	push	{r4, r5, r6, lr}
 8010194:	681d      	ldr	r5, [r3, #0]
 8010196:	4606      	mov	r6, r0
 8010198:	460c      	mov	r4, r1
 801019a:	b125      	cbz	r5, 80101a6 <__swsetup_r+0x16>
 801019c:	69ab      	ldr	r3, [r5, #24]
 801019e:	b913      	cbnz	r3, 80101a6 <__swsetup_r+0x16>
 80101a0:	4628      	mov	r0, r5
 80101a2:	f7fb fd8d 	bl	800bcc0 <__sinit>
 80101a6:	4b2e      	ldr	r3, [pc, #184]	; (8010260 <__swsetup_r+0xd0>)
 80101a8:	429c      	cmp	r4, r3
 80101aa:	d10f      	bne.n	80101cc <__swsetup_r+0x3c>
 80101ac:	686c      	ldr	r4, [r5, #4]
 80101ae:	89a3      	ldrh	r3, [r4, #12]
 80101b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b4:	0719      	lsls	r1, r3, #28
 80101b6:	d42c      	bmi.n	8010212 <__swsetup_r+0x82>
 80101b8:	06dd      	lsls	r5, r3, #27
 80101ba:	d411      	bmi.n	80101e0 <__swsetup_r+0x50>
 80101bc:	2309      	movs	r3, #9
 80101be:	6033      	str	r3, [r6, #0]
 80101c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80101c4:	81a3      	strh	r3, [r4, #12]
 80101c6:	f04f 30ff 	mov.w	r0, #4294967295
 80101ca:	e03e      	b.n	801024a <__swsetup_r+0xba>
 80101cc:	4b25      	ldr	r3, [pc, #148]	; (8010264 <__swsetup_r+0xd4>)
 80101ce:	429c      	cmp	r4, r3
 80101d0:	d101      	bne.n	80101d6 <__swsetup_r+0x46>
 80101d2:	68ac      	ldr	r4, [r5, #8]
 80101d4:	e7eb      	b.n	80101ae <__swsetup_r+0x1e>
 80101d6:	4b24      	ldr	r3, [pc, #144]	; (8010268 <__swsetup_r+0xd8>)
 80101d8:	429c      	cmp	r4, r3
 80101da:	bf08      	it	eq
 80101dc:	68ec      	ldreq	r4, [r5, #12]
 80101de:	e7e6      	b.n	80101ae <__swsetup_r+0x1e>
 80101e0:	0758      	lsls	r0, r3, #29
 80101e2:	d512      	bpl.n	801020a <__swsetup_r+0x7a>
 80101e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101e6:	b141      	cbz	r1, 80101fa <__swsetup_r+0x6a>
 80101e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d002      	beq.n	80101f6 <__swsetup_r+0x66>
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7fb fe6b 	bl	800becc <_free_r>
 80101f6:	2300      	movs	r3, #0
 80101f8:	6363      	str	r3, [r4, #52]	; 0x34
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010200:	81a3      	strh	r3, [r4, #12]
 8010202:	2300      	movs	r3, #0
 8010204:	6063      	str	r3, [r4, #4]
 8010206:	6923      	ldr	r3, [r4, #16]
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	f043 0308 	orr.w	r3, r3, #8
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	6923      	ldr	r3, [r4, #16]
 8010214:	b94b      	cbnz	r3, 801022a <__swsetup_r+0x9a>
 8010216:	89a3      	ldrh	r3, [r4, #12]
 8010218:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801021c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010220:	d003      	beq.n	801022a <__swsetup_r+0x9a>
 8010222:	4621      	mov	r1, r4
 8010224:	4630      	mov	r0, r6
 8010226:	f000 f877 	bl	8010318 <__smakebuf_r>
 801022a:	89a0      	ldrh	r0, [r4, #12]
 801022c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010230:	f010 0301 	ands.w	r3, r0, #1
 8010234:	d00a      	beq.n	801024c <__swsetup_r+0xbc>
 8010236:	2300      	movs	r3, #0
 8010238:	60a3      	str	r3, [r4, #8]
 801023a:	6963      	ldr	r3, [r4, #20]
 801023c:	425b      	negs	r3, r3
 801023e:	61a3      	str	r3, [r4, #24]
 8010240:	6923      	ldr	r3, [r4, #16]
 8010242:	b943      	cbnz	r3, 8010256 <__swsetup_r+0xc6>
 8010244:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010248:	d1ba      	bne.n	80101c0 <__swsetup_r+0x30>
 801024a:	bd70      	pop	{r4, r5, r6, pc}
 801024c:	0781      	lsls	r1, r0, #30
 801024e:	bf58      	it	pl
 8010250:	6963      	ldrpl	r3, [r4, #20]
 8010252:	60a3      	str	r3, [r4, #8]
 8010254:	e7f4      	b.n	8010240 <__swsetup_r+0xb0>
 8010256:	2000      	movs	r0, #0
 8010258:	e7f7      	b.n	801024a <__swsetup_r+0xba>
 801025a:	bf00      	nop
 801025c:	20000018 	.word	0x20000018
 8010260:	08010e10 	.word	0x08010e10
 8010264:	08010e30 	.word	0x08010e30
 8010268:	08010df0 	.word	0x08010df0

0801026c <__assert_func>:
 801026c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801026e:	4614      	mov	r4, r2
 8010270:	461a      	mov	r2, r3
 8010272:	4b09      	ldr	r3, [pc, #36]	; (8010298 <__assert_func+0x2c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4605      	mov	r5, r0
 8010278:	68d8      	ldr	r0, [r3, #12]
 801027a:	b14c      	cbz	r4, 8010290 <__assert_func+0x24>
 801027c:	4b07      	ldr	r3, [pc, #28]	; (801029c <__assert_func+0x30>)
 801027e:	9100      	str	r1, [sp, #0]
 8010280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010284:	4906      	ldr	r1, [pc, #24]	; (80102a0 <__assert_func+0x34>)
 8010286:	462b      	mov	r3, r5
 8010288:	f000 f80e 	bl	80102a8 <fiprintf>
 801028c:	f7fb fcb2 	bl	800bbf4 <abort>
 8010290:	4b04      	ldr	r3, [pc, #16]	; (80102a4 <__assert_func+0x38>)
 8010292:	461c      	mov	r4, r3
 8010294:	e7f3      	b.n	801027e <__assert_func+0x12>
 8010296:	bf00      	nop
 8010298:	20000018 	.word	0x20000018
 801029c:	08011255 	.word	0x08011255
 80102a0:	08011262 	.word	0x08011262
 80102a4:	08011290 	.word	0x08011290

080102a8 <fiprintf>:
 80102a8:	b40e      	push	{r1, r2, r3}
 80102aa:	b503      	push	{r0, r1, lr}
 80102ac:	4601      	mov	r1, r0
 80102ae:	ab03      	add	r3, sp, #12
 80102b0:	4805      	ldr	r0, [pc, #20]	; (80102c8 <fiprintf+0x20>)
 80102b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80102b6:	6800      	ldr	r0, [r0, #0]
 80102b8:	9301      	str	r3, [sp, #4]
 80102ba:	f000 f89f 	bl	80103fc <_vfiprintf_r>
 80102be:	b002      	add	sp, #8
 80102c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80102c4:	b003      	add	sp, #12
 80102c6:	4770      	bx	lr
 80102c8:	20000018 	.word	0x20000018

080102cc <__swhatbuf_r>:
 80102cc:	b570      	push	{r4, r5, r6, lr}
 80102ce:	460e      	mov	r6, r1
 80102d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d4:	2900      	cmp	r1, #0
 80102d6:	b096      	sub	sp, #88	; 0x58
 80102d8:	4614      	mov	r4, r2
 80102da:	461d      	mov	r5, r3
 80102dc:	da08      	bge.n	80102f0 <__swhatbuf_r+0x24>
 80102de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102e2:	2200      	movs	r2, #0
 80102e4:	602a      	str	r2, [r5, #0]
 80102e6:	061a      	lsls	r2, r3, #24
 80102e8:	d410      	bmi.n	801030c <__swhatbuf_r+0x40>
 80102ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ee:	e00e      	b.n	801030e <__swhatbuf_r+0x42>
 80102f0:	466a      	mov	r2, sp
 80102f2:	f000 f9b3 	bl	801065c <_fstat_r>
 80102f6:	2800      	cmp	r0, #0
 80102f8:	dbf1      	blt.n	80102de <__swhatbuf_r+0x12>
 80102fa:	9a01      	ldr	r2, [sp, #4]
 80102fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010300:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010304:	425a      	negs	r2, r3
 8010306:	415a      	adcs	r2, r3
 8010308:	602a      	str	r2, [r5, #0]
 801030a:	e7ee      	b.n	80102ea <__swhatbuf_r+0x1e>
 801030c:	2340      	movs	r3, #64	; 0x40
 801030e:	2000      	movs	r0, #0
 8010310:	6023      	str	r3, [r4, #0]
 8010312:	b016      	add	sp, #88	; 0x58
 8010314:	bd70      	pop	{r4, r5, r6, pc}
	...

08010318 <__smakebuf_r>:
 8010318:	898b      	ldrh	r3, [r1, #12]
 801031a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801031c:	079d      	lsls	r5, r3, #30
 801031e:	4606      	mov	r6, r0
 8010320:	460c      	mov	r4, r1
 8010322:	d507      	bpl.n	8010334 <__smakebuf_r+0x1c>
 8010324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	6123      	str	r3, [r4, #16]
 801032c:	2301      	movs	r3, #1
 801032e:	6163      	str	r3, [r4, #20]
 8010330:	b002      	add	sp, #8
 8010332:	bd70      	pop	{r4, r5, r6, pc}
 8010334:	ab01      	add	r3, sp, #4
 8010336:	466a      	mov	r2, sp
 8010338:	f7ff ffc8 	bl	80102cc <__swhatbuf_r>
 801033c:	9900      	ldr	r1, [sp, #0]
 801033e:	4605      	mov	r5, r0
 8010340:	4630      	mov	r0, r6
 8010342:	f7fb fe2f 	bl	800bfa4 <_malloc_r>
 8010346:	b948      	cbnz	r0, 801035c <__smakebuf_r+0x44>
 8010348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801034c:	059a      	lsls	r2, r3, #22
 801034e:	d4ef      	bmi.n	8010330 <__smakebuf_r+0x18>
 8010350:	f023 0303 	bic.w	r3, r3, #3
 8010354:	f043 0302 	orr.w	r3, r3, #2
 8010358:	81a3      	strh	r3, [r4, #12]
 801035a:	e7e3      	b.n	8010324 <__smakebuf_r+0xc>
 801035c:	4b0d      	ldr	r3, [pc, #52]	; (8010394 <__smakebuf_r+0x7c>)
 801035e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	6020      	str	r0, [r4, #0]
 8010364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010368:	81a3      	strh	r3, [r4, #12]
 801036a:	9b00      	ldr	r3, [sp, #0]
 801036c:	6163      	str	r3, [r4, #20]
 801036e:	9b01      	ldr	r3, [sp, #4]
 8010370:	6120      	str	r0, [r4, #16]
 8010372:	b15b      	cbz	r3, 801038c <__smakebuf_r+0x74>
 8010374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010378:	4630      	mov	r0, r6
 801037a:	f000 f981 	bl	8010680 <_isatty_r>
 801037e:	b128      	cbz	r0, 801038c <__smakebuf_r+0x74>
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	f023 0303 	bic.w	r3, r3, #3
 8010386:	f043 0301 	orr.w	r3, r3, #1
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	89a0      	ldrh	r0, [r4, #12]
 801038e:	4305      	orrs	r5, r0
 8010390:	81a5      	strh	r5, [r4, #12]
 8010392:	e7cd      	b.n	8010330 <__smakebuf_r+0x18>
 8010394:	0800bc59 	.word	0x0800bc59

08010398 <_malloc_usable_size_r>:
 8010398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801039c:	1f18      	subs	r0, r3, #4
 801039e:	2b00      	cmp	r3, #0
 80103a0:	bfbc      	itt	lt
 80103a2:	580b      	ldrlt	r3, [r1, r0]
 80103a4:	18c0      	addlt	r0, r0, r3
 80103a6:	4770      	bx	lr

080103a8 <__sfputc_r>:
 80103a8:	6893      	ldr	r3, [r2, #8]
 80103aa:	3b01      	subs	r3, #1
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	b410      	push	{r4}
 80103b0:	6093      	str	r3, [r2, #8]
 80103b2:	da08      	bge.n	80103c6 <__sfputc_r+0x1e>
 80103b4:	6994      	ldr	r4, [r2, #24]
 80103b6:	42a3      	cmp	r3, r4
 80103b8:	db01      	blt.n	80103be <__sfputc_r+0x16>
 80103ba:	290a      	cmp	r1, #10
 80103bc:	d103      	bne.n	80103c6 <__sfputc_r+0x1e>
 80103be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103c2:	f7ff be85 	b.w	80100d0 <__swbuf_r>
 80103c6:	6813      	ldr	r3, [r2, #0]
 80103c8:	1c58      	adds	r0, r3, #1
 80103ca:	6010      	str	r0, [r2, #0]
 80103cc:	7019      	strb	r1, [r3, #0]
 80103ce:	4608      	mov	r0, r1
 80103d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103d4:	4770      	bx	lr

080103d6 <__sfputs_r>:
 80103d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d8:	4606      	mov	r6, r0
 80103da:	460f      	mov	r7, r1
 80103dc:	4614      	mov	r4, r2
 80103de:	18d5      	adds	r5, r2, r3
 80103e0:	42ac      	cmp	r4, r5
 80103e2:	d101      	bne.n	80103e8 <__sfputs_r+0x12>
 80103e4:	2000      	movs	r0, #0
 80103e6:	e007      	b.n	80103f8 <__sfputs_r+0x22>
 80103e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103ec:	463a      	mov	r2, r7
 80103ee:	4630      	mov	r0, r6
 80103f0:	f7ff ffda 	bl	80103a8 <__sfputc_r>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d1f3      	bne.n	80103e0 <__sfputs_r+0xa>
 80103f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103fc <_vfiprintf_r>:
 80103fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010400:	460d      	mov	r5, r1
 8010402:	b09d      	sub	sp, #116	; 0x74
 8010404:	4614      	mov	r4, r2
 8010406:	4698      	mov	r8, r3
 8010408:	4606      	mov	r6, r0
 801040a:	b118      	cbz	r0, 8010414 <_vfiprintf_r+0x18>
 801040c:	6983      	ldr	r3, [r0, #24]
 801040e:	b90b      	cbnz	r3, 8010414 <_vfiprintf_r+0x18>
 8010410:	f7fb fc56 	bl	800bcc0 <__sinit>
 8010414:	4b89      	ldr	r3, [pc, #548]	; (801063c <_vfiprintf_r+0x240>)
 8010416:	429d      	cmp	r5, r3
 8010418:	d11b      	bne.n	8010452 <_vfiprintf_r+0x56>
 801041a:	6875      	ldr	r5, [r6, #4]
 801041c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801041e:	07d9      	lsls	r1, r3, #31
 8010420:	d405      	bmi.n	801042e <_vfiprintf_r+0x32>
 8010422:	89ab      	ldrh	r3, [r5, #12]
 8010424:	059a      	lsls	r2, r3, #22
 8010426:	d402      	bmi.n	801042e <_vfiprintf_r+0x32>
 8010428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801042a:	f7fb fd0c 	bl	800be46 <__retarget_lock_acquire_recursive>
 801042e:	89ab      	ldrh	r3, [r5, #12]
 8010430:	071b      	lsls	r3, r3, #28
 8010432:	d501      	bpl.n	8010438 <_vfiprintf_r+0x3c>
 8010434:	692b      	ldr	r3, [r5, #16]
 8010436:	b9eb      	cbnz	r3, 8010474 <_vfiprintf_r+0x78>
 8010438:	4629      	mov	r1, r5
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff fea8 	bl	8010190 <__swsetup_r>
 8010440:	b1c0      	cbz	r0, 8010474 <_vfiprintf_r+0x78>
 8010442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010444:	07dc      	lsls	r4, r3, #31
 8010446:	d50e      	bpl.n	8010466 <_vfiprintf_r+0x6a>
 8010448:	f04f 30ff 	mov.w	r0, #4294967295
 801044c:	b01d      	add	sp, #116	; 0x74
 801044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010452:	4b7b      	ldr	r3, [pc, #492]	; (8010640 <_vfiprintf_r+0x244>)
 8010454:	429d      	cmp	r5, r3
 8010456:	d101      	bne.n	801045c <_vfiprintf_r+0x60>
 8010458:	68b5      	ldr	r5, [r6, #8]
 801045a:	e7df      	b.n	801041c <_vfiprintf_r+0x20>
 801045c:	4b79      	ldr	r3, [pc, #484]	; (8010644 <_vfiprintf_r+0x248>)
 801045e:	429d      	cmp	r5, r3
 8010460:	bf08      	it	eq
 8010462:	68f5      	ldreq	r5, [r6, #12]
 8010464:	e7da      	b.n	801041c <_vfiprintf_r+0x20>
 8010466:	89ab      	ldrh	r3, [r5, #12]
 8010468:	0598      	lsls	r0, r3, #22
 801046a:	d4ed      	bmi.n	8010448 <_vfiprintf_r+0x4c>
 801046c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801046e:	f7fb fceb 	bl	800be48 <__retarget_lock_release_recursive>
 8010472:	e7e9      	b.n	8010448 <_vfiprintf_r+0x4c>
 8010474:	2300      	movs	r3, #0
 8010476:	9309      	str	r3, [sp, #36]	; 0x24
 8010478:	2320      	movs	r3, #32
 801047a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801047e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010482:	2330      	movs	r3, #48	; 0x30
 8010484:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010648 <_vfiprintf_r+0x24c>
 8010488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801048c:	f04f 0901 	mov.w	r9, #1
 8010490:	4623      	mov	r3, r4
 8010492:	469a      	mov	sl, r3
 8010494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010498:	b10a      	cbz	r2, 801049e <_vfiprintf_r+0xa2>
 801049a:	2a25      	cmp	r2, #37	; 0x25
 801049c:	d1f9      	bne.n	8010492 <_vfiprintf_r+0x96>
 801049e:	ebba 0b04 	subs.w	fp, sl, r4
 80104a2:	d00b      	beq.n	80104bc <_vfiprintf_r+0xc0>
 80104a4:	465b      	mov	r3, fp
 80104a6:	4622      	mov	r2, r4
 80104a8:	4629      	mov	r1, r5
 80104aa:	4630      	mov	r0, r6
 80104ac:	f7ff ff93 	bl	80103d6 <__sfputs_r>
 80104b0:	3001      	adds	r0, #1
 80104b2:	f000 80aa 	beq.w	801060a <_vfiprintf_r+0x20e>
 80104b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104b8:	445a      	add	r2, fp
 80104ba:	9209      	str	r2, [sp, #36]	; 0x24
 80104bc:	f89a 3000 	ldrb.w	r3, [sl]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f000 80a2 	beq.w	801060a <_vfiprintf_r+0x20e>
 80104c6:	2300      	movs	r3, #0
 80104c8:	f04f 32ff 	mov.w	r2, #4294967295
 80104cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104d0:	f10a 0a01 	add.w	sl, sl, #1
 80104d4:	9304      	str	r3, [sp, #16]
 80104d6:	9307      	str	r3, [sp, #28]
 80104d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104dc:	931a      	str	r3, [sp, #104]	; 0x68
 80104de:	4654      	mov	r4, sl
 80104e0:	2205      	movs	r2, #5
 80104e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104e6:	4858      	ldr	r0, [pc, #352]	; (8010648 <_vfiprintf_r+0x24c>)
 80104e8:	f7ef fe82 	bl	80001f0 <memchr>
 80104ec:	9a04      	ldr	r2, [sp, #16]
 80104ee:	b9d8      	cbnz	r0, 8010528 <_vfiprintf_r+0x12c>
 80104f0:	06d1      	lsls	r1, r2, #27
 80104f2:	bf44      	itt	mi
 80104f4:	2320      	movmi	r3, #32
 80104f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104fa:	0713      	lsls	r3, r2, #28
 80104fc:	bf44      	itt	mi
 80104fe:	232b      	movmi	r3, #43	; 0x2b
 8010500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010504:	f89a 3000 	ldrb.w	r3, [sl]
 8010508:	2b2a      	cmp	r3, #42	; 0x2a
 801050a:	d015      	beq.n	8010538 <_vfiprintf_r+0x13c>
 801050c:	9a07      	ldr	r2, [sp, #28]
 801050e:	4654      	mov	r4, sl
 8010510:	2000      	movs	r0, #0
 8010512:	f04f 0c0a 	mov.w	ip, #10
 8010516:	4621      	mov	r1, r4
 8010518:	f811 3b01 	ldrb.w	r3, [r1], #1
 801051c:	3b30      	subs	r3, #48	; 0x30
 801051e:	2b09      	cmp	r3, #9
 8010520:	d94e      	bls.n	80105c0 <_vfiprintf_r+0x1c4>
 8010522:	b1b0      	cbz	r0, 8010552 <_vfiprintf_r+0x156>
 8010524:	9207      	str	r2, [sp, #28]
 8010526:	e014      	b.n	8010552 <_vfiprintf_r+0x156>
 8010528:	eba0 0308 	sub.w	r3, r0, r8
 801052c:	fa09 f303 	lsl.w	r3, r9, r3
 8010530:	4313      	orrs	r3, r2
 8010532:	9304      	str	r3, [sp, #16]
 8010534:	46a2      	mov	sl, r4
 8010536:	e7d2      	b.n	80104de <_vfiprintf_r+0xe2>
 8010538:	9b03      	ldr	r3, [sp, #12]
 801053a:	1d19      	adds	r1, r3, #4
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	9103      	str	r1, [sp, #12]
 8010540:	2b00      	cmp	r3, #0
 8010542:	bfbb      	ittet	lt
 8010544:	425b      	neglt	r3, r3
 8010546:	f042 0202 	orrlt.w	r2, r2, #2
 801054a:	9307      	strge	r3, [sp, #28]
 801054c:	9307      	strlt	r3, [sp, #28]
 801054e:	bfb8      	it	lt
 8010550:	9204      	strlt	r2, [sp, #16]
 8010552:	7823      	ldrb	r3, [r4, #0]
 8010554:	2b2e      	cmp	r3, #46	; 0x2e
 8010556:	d10c      	bne.n	8010572 <_vfiprintf_r+0x176>
 8010558:	7863      	ldrb	r3, [r4, #1]
 801055a:	2b2a      	cmp	r3, #42	; 0x2a
 801055c:	d135      	bne.n	80105ca <_vfiprintf_r+0x1ce>
 801055e:	9b03      	ldr	r3, [sp, #12]
 8010560:	1d1a      	adds	r2, r3, #4
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	9203      	str	r2, [sp, #12]
 8010566:	2b00      	cmp	r3, #0
 8010568:	bfb8      	it	lt
 801056a:	f04f 33ff 	movlt.w	r3, #4294967295
 801056e:	3402      	adds	r4, #2
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010658 <_vfiprintf_r+0x25c>
 8010576:	7821      	ldrb	r1, [r4, #0]
 8010578:	2203      	movs	r2, #3
 801057a:	4650      	mov	r0, sl
 801057c:	f7ef fe38 	bl	80001f0 <memchr>
 8010580:	b140      	cbz	r0, 8010594 <_vfiprintf_r+0x198>
 8010582:	2340      	movs	r3, #64	; 0x40
 8010584:	eba0 000a 	sub.w	r0, r0, sl
 8010588:	fa03 f000 	lsl.w	r0, r3, r0
 801058c:	9b04      	ldr	r3, [sp, #16]
 801058e:	4303      	orrs	r3, r0
 8010590:	3401      	adds	r4, #1
 8010592:	9304      	str	r3, [sp, #16]
 8010594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010598:	482c      	ldr	r0, [pc, #176]	; (801064c <_vfiprintf_r+0x250>)
 801059a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801059e:	2206      	movs	r2, #6
 80105a0:	f7ef fe26 	bl	80001f0 <memchr>
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d03f      	beq.n	8010628 <_vfiprintf_r+0x22c>
 80105a8:	4b29      	ldr	r3, [pc, #164]	; (8010650 <_vfiprintf_r+0x254>)
 80105aa:	bb1b      	cbnz	r3, 80105f4 <_vfiprintf_r+0x1f8>
 80105ac:	9b03      	ldr	r3, [sp, #12]
 80105ae:	3307      	adds	r3, #7
 80105b0:	f023 0307 	bic.w	r3, r3, #7
 80105b4:	3308      	adds	r3, #8
 80105b6:	9303      	str	r3, [sp, #12]
 80105b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ba:	443b      	add	r3, r7
 80105bc:	9309      	str	r3, [sp, #36]	; 0x24
 80105be:	e767      	b.n	8010490 <_vfiprintf_r+0x94>
 80105c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80105c4:	460c      	mov	r4, r1
 80105c6:	2001      	movs	r0, #1
 80105c8:	e7a5      	b.n	8010516 <_vfiprintf_r+0x11a>
 80105ca:	2300      	movs	r3, #0
 80105cc:	3401      	adds	r4, #1
 80105ce:	9305      	str	r3, [sp, #20]
 80105d0:	4619      	mov	r1, r3
 80105d2:	f04f 0c0a 	mov.w	ip, #10
 80105d6:	4620      	mov	r0, r4
 80105d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105dc:	3a30      	subs	r2, #48	; 0x30
 80105de:	2a09      	cmp	r2, #9
 80105e0:	d903      	bls.n	80105ea <_vfiprintf_r+0x1ee>
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d0c5      	beq.n	8010572 <_vfiprintf_r+0x176>
 80105e6:	9105      	str	r1, [sp, #20]
 80105e8:	e7c3      	b.n	8010572 <_vfiprintf_r+0x176>
 80105ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80105ee:	4604      	mov	r4, r0
 80105f0:	2301      	movs	r3, #1
 80105f2:	e7f0      	b.n	80105d6 <_vfiprintf_r+0x1da>
 80105f4:	ab03      	add	r3, sp, #12
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	462a      	mov	r2, r5
 80105fa:	4b16      	ldr	r3, [pc, #88]	; (8010654 <_vfiprintf_r+0x258>)
 80105fc:	a904      	add	r1, sp, #16
 80105fe:	4630      	mov	r0, r6
 8010600:	f7fb fde4 	bl	800c1cc <_printf_float>
 8010604:	4607      	mov	r7, r0
 8010606:	1c78      	adds	r0, r7, #1
 8010608:	d1d6      	bne.n	80105b8 <_vfiprintf_r+0x1bc>
 801060a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801060c:	07d9      	lsls	r1, r3, #31
 801060e:	d405      	bmi.n	801061c <_vfiprintf_r+0x220>
 8010610:	89ab      	ldrh	r3, [r5, #12]
 8010612:	059a      	lsls	r2, r3, #22
 8010614:	d402      	bmi.n	801061c <_vfiprintf_r+0x220>
 8010616:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010618:	f7fb fc16 	bl	800be48 <__retarget_lock_release_recursive>
 801061c:	89ab      	ldrh	r3, [r5, #12]
 801061e:	065b      	lsls	r3, r3, #25
 8010620:	f53f af12 	bmi.w	8010448 <_vfiprintf_r+0x4c>
 8010624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010626:	e711      	b.n	801044c <_vfiprintf_r+0x50>
 8010628:	ab03      	add	r3, sp, #12
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	462a      	mov	r2, r5
 801062e:	4b09      	ldr	r3, [pc, #36]	; (8010654 <_vfiprintf_r+0x258>)
 8010630:	a904      	add	r1, sp, #16
 8010632:	4630      	mov	r0, r6
 8010634:	f7fc f86e 	bl	800c714 <_printf_i>
 8010638:	e7e4      	b.n	8010604 <_vfiprintf_r+0x208>
 801063a:	bf00      	nop
 801063c:	08010e10 	.word	0x08010e10
 8010640:	08010e30 	.word	0x08010e30
 8010644:	08010df0 	.word	0x08010df0
 8010648:	08011244 	.word	0x08011244
 801064c:	0801124e 	.word	0x0801124e
 8010650:	0800c1cd 	.word	0x0800c1cd
 8010654:	080103d7 	.word	0x080103d7
 8010658:	0801124a 	.word	0x0801124a

0801065c <_fstat_r>:
 801065c:	b538      	push	{r3, r4, r5, lr}
 801065e:	4d07      	ldr	r5, [pc, #28]	; (801067c <_fstat_r+0x20>)
 8010660:	2300      	movs	r3, #0
 8010662:	4604      	mov	r4, r0
 8010664:	4608      	mov	r0, r1
 8010666:	4611      	mov	r1, r2
 8010668:	602b      	str	r3, [r5, #0]
 801066a:	f7f4 f98a 	bl	8004982 <_fstat>
 801066e:	1c43      	adds	r3, r0, #1
 8010670:	d102      	bne.n	8010678 <_fstat_r+0x1c>
 8010672:	682b      	ldr	r3, [r5, #0]
 8010674:	b103      	cbz	r3, 8010678 <_fstat_r+0x1c>
 8010676:	6023      	str	r3, [r4, #0]
 8010678:	bd38      	pop	{r3, r4, r5, pc}
 801067a:	bf00      	nop
 801067c:	2000531c 	.word	0x2000531c

08010680 <_isatty_r>:
 8010680:	b538      	push	{r3, r4, r5, lr}
 8010682:	4d06      	ldr	r5, [pc, #24]	; (801069c <_isatty_r+0x1c>)
 8010684:	2300      	movs	r3, #0
 8010686:	4604      	mov	r4, r0
 8010688:	4608      	mov	r0, r1
 801068a:	602b      	str	r3, [r5, #0]
 801068c:	f7f4 f989 	bl	80049a2 <_isatty>
 8010690:	1c43      	adds	r3, r0, #1
 8010692:	d102      	bne.n	801069a <_isatty_r+0x1a>
 8010694:	682b      	ldr	r3, [r5, #0]
 8010696:	b103      	cbz	r3, 801069a <_isatty_r+0x1a>
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	bd38      	pop	{r3, r4, r5, pc}
 801069c:	2000531c 	.word	0x2000531c

080106a0 <_init>:
 80106a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a2:	bf00      	nop
 80106a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106a6:	bc08      	pop	{r3}
 80106a8:	469e      	mov	lr, r3
 80106aa:	4770      	bx	lr

080106ac <_fini>:
 80106ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ae:	bf00      	nop
 80106b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106b2:	bc08      	pop	{r3}
 80106b4:	469e      	mov	lr, r3
 80106b6:	4770      	bx	lr
